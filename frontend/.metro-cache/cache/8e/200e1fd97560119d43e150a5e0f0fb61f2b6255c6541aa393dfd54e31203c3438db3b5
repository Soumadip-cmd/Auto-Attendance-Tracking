{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"KYhnx5+o028X5IFQh7qGm6XZdSU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.filter = filter;\n  exports.find = find;\n  exports.findOneChild = findOneChild;\n  exports.findOne = findOne;\n  exports.existsOne = existsOne;\n  exports.findAll = findAll;\n  var _domhandler = require(_dependencyMap[0], \"domhandler\");\n  /**\n   * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param node Node to search. Will be included in the result set if it matches.\n   * @param recurse Also consider child nodes.\n   * @param limit Maximum number of nodes to return.\n   * @returns All nodes passing `test`.\n   */\n  function filter(test, node) {\n    var recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n  }\n  /**\n   * Search an array of nodes and their children for nodes passing a test function.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @param recurse Also consider child nodes.\n   * @param limit Maximum number of nodes to return.\n   * @returns All nodes passing `test`.\n   */\n  function find(test, nodes, recurse, limit) {\n    var result = [];\n    /** Stack of the arrays we are looking at. */\n    var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n    /** Stack of the indices within the arrays. */\n    var indexStack = [0];\n    for (;;) {\n      // First, check if the current array has any more elements to look at.\n      if (indexStack[0] >= nodeStack[0].length) {\n        // If we have no more arrays to look at, we are done.\n        if (indexStack.length === 1) {\n          return result;\n        }\n        // Otherwise, remove the current array from the stack.\n        nodeStack.shift();\n        indexStack.shift();\n        // Loop back to the start to continue with the next array.\n        continue;\n      }\n      var elem = nodeStack[0][indexStack[0]++];\n      if (test(elem)) {\n        result.push(elem);\n        if (--limit <= 0) return result;\n      }\n      if (recurse && (0, _domhandler.hasChildren)(elem) && elem.children.length > 0) {\n        /*\n         * Add the children to the stack. We are depth-first, so this is\n         * the next array we look at.\n         */\n        indexStack.unshift(0);\n        nodeStack.unshift(elem.children);\n      }\n    }\n  }\n  /**\n   * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns The first node in the array that passes `test`.\n   * @deprecated Use `Array.prototype.find` directly.\n   */\n  function findOneChild(test, nodes) {\n    return nodes.find(test);\n  }\n  /**\n   * Finds one element in a tree that passes a test.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Node or array of nodes to search.\n   * @param recurse Also consider child nodes.\n   * @returns The first node that passes `test`.\n   */\n  function findOne(test, nodes) {\n    var recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var searchedNodes = Array.isArray(nodes) ? nodes : [nodes];\n    for (var i = 0; i < searchedNodes.length; i++) {\n      var node = searchedNodes[i];\n      if ((0, _domhandler.isTag)(node) && test(node)) {\n        return node;\n      }\n      if (recurse && (0, _domhandler.hasChildren)(node) && node.children.length > 0) {\n        var found = findOne(test, node.children, true);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n  /**\n   * Checks if a tree of nodes contains at least one node passing a test.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns Whether a tree of nodes contains at least one node passing the test.\n   */\n  function existsOne(test, nodes) {\n    return (Array.isArray(nodes) ? nodes : [nodes]).some(node => (0, _domhandler.isTag)(node) && test(node) || (0, _domhandler.hasChildren)(node) && existsOne(test, node.children));\n  }\n  /**\n   * Search an array of nodes and their children for elements passing a test function.\n   *\n   * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns All nodes passing `test`.\n   */\n  function findAll(test, nodes) {\n    var result = [];\n    var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n    var indexStack = [0];\n    for (;;) {\n      if (indexStack[0] >= nodeStack[0].length) {\n        if (nodeStack.length === 1) {\n          return result;\n        }\n        // Otherwise, remove the current array from the stack.\n        nodeStack.shift();\n        indexStack.shift();\n        // Loop back to the start to continue with the next array.\n        continue;\n      }\n      var elem = nodeStack[0][indexStack[0]++];\n      if ((0, _domhandler.isTag)(elem) && test(elem)) result.push(elem);\n      if ((0, _domhandler.hasChildren)(elem) && elem.children.length > 0) {\n        indexStack.unshift(0);\n        nodeStack.unshift(elem.children);\n      }\n    }\n  }\n});","lineCount":153,"map":[[7,2,12,0,"exports"],[7,9,12,0],[7,10,12,0,"filter"],[7,16,12,0],[7,19,12,0,"filter"],[7,25,12,0],[8,2,25,0,"exports"],[8,9,25,0],[8,10,25,0,"find"],[8,14,25,0],[8,17,25,0,"find"],[8,21,25,0],[9,2,69,0,"exports"],[9,9,69,0],[9,10,69,0,"findOneChild"],[9,22,69,0],[9,25,69,0,"findOneChild"],[9,37,69,0],[10,2,81,0,"exports"],[10,9,81,0],[10,10,81,0,"findOne"],[10,17,81,0],[10,20,81,0,"findOne"],[10,27,81,0],[11,2,104,0,"exports"],[11,9,104,0],[11,10,104,0,"existsOne"],[11,19,104,0],[11,22,104,0,"existsOne"],[11,31,104,0],[12,2,118,0,"exports"],[12,9,118,0],[12,10,118,0,"findAll"],[12,17,118,0],[12,20,118,0,"findAll"],[12,27,118,0],[13,2,1,0],[13,6,1,0,"_domhandler"],[13,17,1,0],[13,20,1,0,"require"],[13,27,1,0],[13,28,1,0,"_dependencyMap"],[13,42,1,0],[14,2,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,2,12,7],[24,11,12,16,"filter"],[24,17,12,22,"filter"],[24,18,12,23,"test"],[24,22,12,27],[24,24,12,29,"node"],[24,28,12,33],[24,30,12,69],[25,4,12,69],[25,8,12,35,"recurse"],[25,15,12,42],[25,18,12,42,"arguments"],[25,27,12,42],[25,28,12,42,"length"],[25,34,12,42],[25,42,12,42,"arguments"],[25,51,12,42],[25,59,12,42,"undefined"],[25,68,12,42],[25,71,12,42,"arguments"],[25,80,12,42],[25,86,12,45],[25,90,12,49],[26,4,12,49],[26,8,12,51,"limit"],[26,13,12,56],[26,16,12,56,"arguments"],[26,25,12,56],[26,26,12,56,"length"],[26,32,12,56],[26,40,12,56,"arguments"],[26,49,12,56],[26,57,12,56,"undefined"],[26,66,12,56],[26,69,12,56,"arguments"],[26,78,12,56],[26,84,12,59,"Infinity"],[26,92,12,67],[27,4,13,4],[27,11,13,11,"find"],[27,15,13,15],[27,16,13,16,"test"],[27,20,13,20],[27,22,13,22,"Array"],[27,27,13,27],[27,28,13,28,"isArray"],[27,35,13,35],[27,36,13,36,"node"],[27,40,13,40],[27,41,13,41],[27,44,13,44,"node"],[27,48,13,48],[27,51,13,51],[27,52,13,52,"node"],[27,56,13,56],[27,57,13,57],[27,59,13,59,"recurse"],[27,66,13,66],[27,68,13,68,"limit"],[27,73,13,73],[27,74,13,74],[28,2,14,0],[29,2,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[35,0,21,0],[36,0,22,0],[37,0,23,0],[38,0,24,0],[39,2,25,7],[39,11,25,16,"find"],[39,15,25,20,"find"],[39,16,25,21,"test"],[39,20,25,25],[39,22,25,27,"nodes"],[39,27,25,32],[39,29,25,34,"recurse"],[39,36,25,41],[39,38,25,43,"limit"],[39,43,25,48],[39,45,25,50],[40,4,26,4],[40,8,26,10,"result"],[40,14,26,16],[40,17,26,19],[40,19,26,21],[41,4,27,4],[42,4,28,4],[42,8,28,10,"nodeStack"],[42,17,28,19],[42,20,28,22],[42,21,28,23,"Array"],[42,26,28,28],[42,27,28,29,"isArray"],[42,34,28,36],[42,35,28,37,"nodes"],[42,40,28,42],[42,41,28,43],[42,44,28,46,"nodes"],[42,49,28,51],[42,52,28,54],[42,53,28,55,"nodes"],[42,58,28,60],[42,59,28,61],[42,60,28,62],[43,4,29,4],[44,4,30,4],[44,8,30,10,"indexStack"],[44,18,30,20],[44,21,30,23],[44,22,30,24],[44,23,30,25],[44,24,30,26],[45,4,31,4],[45,13,31,13],[46,6,32,8],[47,6,33,8],[47,10,33,12,"indexStack"],[47,20,33,22],[47,21,33,23],[47,22,33,24],[47,23,33,25],[47,27,33,29,"nodeStack"],[47,36,33,38],[47,37,33,39],[47,38,33,40],[47,39,33,41],[47,40,33,42,"length"],[47,46,33,48],[47,48,33,50],[48,8,34,12],[49,8,35,12],[49,12,35,16,"indexStack"],[49,22,35,26],[49,23,35,27,"length"],[49,29,35,33],[49,34,35,38],[49,35,35,39],[49,37,35,41],[50,10,36,16],[50,17,36,23,"result"],[50,23,36,29],[51,8,37,12],[52,8,38,12],[53,8,39,12,"nodeStack"],[53,17,39,21],[53,18,39,22,"shift"],[53,23,39,27],[53,24,39,28],[53,25,39,29],[54,8,40,12,"indexStack"],[54,18,40,22],[54,19,40,23,"shift"],[54,24,40,28],[54,25,40,29],[54,26,40,30],[55,8,41,12],[56,8,42,12],[57,6,43,8],[58,6,44,8],[58,10,44,14,"elem"],[58,14,44,18],[58,17,44,21,"nodeStack"],[58,26,44,30],[58,27,44,31],[58,28,44,32],[58,29,44,33],[58,30,44,34,"indexStack"],[58,40,44,44],[58,41,44,45],[58,42,44,46],[58,43,44,47],[58,45,44,49],[58,46,44,50],[59,6,45,8],[59,10,45,12,"test"],[59,14,45,16],[59,15,45,17,"elem"],[59,19,45,21],[59,20,45,22],[59,22,45,24],[60,8,46,12,"result"],[60,14,46,18],[60,15,46,19,"push"],[60,19,46,23],[60,20,46,24,"elem"],[60,24,46,28],[60,25,46,29],[61,8,47,12],[61,12,47,16],[61,14,47,18,"limit"],[61,19,47,23],[61,23,47,27],[61,24,47,28],[61,26,48,16],[61,33,48,23,"result"],[61,39,48,29],[62,6,49,8],[63,6,50,8],[63,10,50,12,"recurse"],[63,17,50,19],[63,21,50,23],[63,25,50,23,"hasChildren"],[63,36,50,34],[63,37,50,34,"hasChildren"],[63,48,50,34],[63,50,50,35,"elem"],[63,54,50,39],[63,55,50,40],[63,59,50,44,"elem"],[63,63,50,48],[63,64,50,49,"children"],[63,72,50,57],[63,73,50,58,"length"],[63,79,50,64],[63,82,50,67],[63,83,50,68],[63,85,50,70],[64,8,51,12],[65,0,52,0],[66,0,53,0],[67,0,54,0],[68,8,55,12,"indexStack"],[68,18,55,22],[68,19,55,23,"unshift"],[68,26,55,30],[68,27,55,31],[68,28,55,32],[68,29,55,33],[69,8,56,12,"nodeStack"],[69,17,56,21],[69,18,56,22,"unshift"],[69,25,56,29],[69,26,56,30,"elem"],[69,30,56,34],[69,31,56,35,"children"],[69,39,56,43],[69,40,56,44],[70,6,57,8],[71,4,58,4],[72,2,59,0],[73,2,60,0],[74,0,61,0],[75,0,62,0],[76,0,63,0],[77,0,64,0],[78,0,65,0],[79,0,66,0],[80,0,67,0],[81,0,68,0],[82,2,69,7],[82,11,69,16,"findOneChild"],[82,23,69,28,"findOneChild"],[82,24,69,29,"test"],[82,28,69,33],[82,30,69,35,"nodes"],[82,35,69,40],[82,37,69,42],[83,4,70,4],[83,11,70,11,"nodes"],[83,16,70,16],[83,17,70,17,"find"],[83,21,70,21],[83,22,70,22,"test"],[83,26,70,26],[83,27,70,27],[84,2,71,0],[85,2,72,0],[86,0,73,0],[87,0,74,0],[88,0,75,0],[89,0,76,0],[90,0,77,0],[91,0,78,0],[92,0,79,0],[93,0,80,0],[94,2,81,7],[94,11,81,16,"findOne"],[94,18,81,23,"findOne"],[94,19,81,24,"test"],[94,23,81,28],[94,25,81,30,"nodes"],[94,30,81,35],[94,32,81,53],[95,4,81,53],[95,8,81,37,"recurse"],[95,15,81,44],[95,18,81,44,"arguments"],[95,27,81,44],[95,28,81,44,"length"],[95,34,81,44],[95,42,81,44,"arguments"],[95,51,81,44],[95,59,81,44,"undefined"],[95,68,81,44],[95,71,81,44,"arguments"],[95,80,81,44],[95,86,81,47],[95,90,81,51],[96,4,82,4],[96,8,82,10,"searchedNodes"],[96,21,82,23],[96,24,82,26,"Array"],[96,29,82,31],[96,30,82,32,"isArray"],[96,37,82,39],[96,38,82,40,"nodes"],[96,43,82,45],[96,44,82,46],[96,47,82,49,"nodes"],[96,52,82,54],[96,55,82,57],[96,56,82,58,"nodes"],[96,61,82,63],[96,62,82,64],[97,4,83,4],[97,9,83,9],[97,13,83,13,"i"],[97,14,83,14],[97,17,83,17],[97,18,83,18],[97,20,83,20,"i"],[97,21,83,21],[97,24,83,24,"searchedNodes"],[97,37,83,37],[97,38,83,38,"length"],[97,44,83,44],[97,46,83,46,"i"],[97,47,83,47],[97,49,83,49],[97,51,83,51],[98,6,84,8],[98,10,84,14,"node"],[98,14,84,18],[98,17,84,21,"searchedNodes"],[98,30,84,34],[98,31,84,35,"i"],[98,32,84,36],[98,33,84,37],[99,6,85,8],[99,10,85,12],[99,14,85,12,"isTag"],[99,25,85,17],[99,26,85,17,"isTag"],[99,31,85,17],[99,33,85,18,"node"],[99,37,85,22],[99,38,85,23],[99,42,85,27,"test"],[99,46,85,31],[99,47,85,32,"node"],[99,51,85,36],[99,52,85,37],[99,54,85,39],[100,8,86,12],[100,15,86,19,"node"],[100,19,86,23],[101,6,87,8],[102,6,88,8],[102,10,88,12,"recurse"],[102,17,88,19],[102,21,88,23],[102,25,88,23,"hasChildren"],[102,36,88,34],[102,37,88,34,"hasChildren"],[102,48,88,34],[102,50,88,35,"node"],[102,54,88,39],[102,55,88,40],[102,59,88,44,"node"],[102,63,88,48],[102,64,88,49,"children"],[102,72,88,57],[102,73,88,58,"length"],[102,79,88,64],[102,82,88,67],[102,83,88,68],[102,85,88,70],[103,8,89,12],[103,12,89,18,"found"],[103,17,89,23],[103,20,89,26,"findOne"],[103,27,89,33],[103,28,89,34,"test"],[103,32,89,38],[103,34,89,40,"node"],[103,38,89,44],[103,39,89,45,"children"],[103,47,89,53],[103,49,89,55],[103,53,89,59],[103,54,89,60],[104,8,90,12],[104,12,90,16,"found"],[104,17,90,21],[104,19,91,16],[104,26,91,23,"found"],[104,31,91,28],[105,6,92,8],[106,4,93,4],[107,4,94,4],[107,11,94,11],[107,15,94,15],[108,2,95,0],[109,2,96,0],[110,0,97,0],[111,0,98,0],[112,0,99,0],[113,0,100,0],[114,0,101,0],[115,0,102,0],[116,0,103,0],[117,2,104,7],[117,11,104,16,"existsOne"],[117,20,104,25,"existsOne"],[117,21,104,26,"test"],[117,25,104,30],[117,27,104,32,"nodes"],[117,32,104,37],[117,34,104,39],[118,4,105,4],[118,11,105,11],[118,12,105,12,"Array"],[118,17,105,17],[118,18,105,18,"isArray"],[118,25,105,25],[118,26,105,26,"nodes"],[118,31,105,31],[118,32,105,32],[118,35,105,35,"nodes"],[118,40,105,40],[118,43,105,43],[118,44,105,44,"nodes"],[118,49,105,49],[118,50,105,50],[118,52,105,52,"some"],[118,56,105,56],[118,57,105,58,"node"],[118,61,105,62],[118,65,105,68],[118,69,105,68,"isTag"],[118,80,105,73],[118,81,105,73,"isTag"],[118,86,105,73],[118,88,105,74,"node"],[118,92,105,78],[118,93,105,79],[118,97,105,83,"test"],[118,101,105,87],[118,102,105,88,"node"],[118,106,105,92],[118,107,105,93],[118,111,106,9],[118,115,106,9,"hasChildren"],[118,126,106,20],[118,127,106,20,"hasChildren"],[118,138,106,20],[118,140,106,21,"node"],[118,144,106,25],[118,145,106,26],[118,149,106,30,"existsOne"],[118,158,106,39],[118,159,106,40,"test"],[118,163,106,44],[118,165,106,46,"node"],[118,169,106,50],[118,170,106,51,"children"],[118,178,106,59],[118,179,106,61],[118,180,106,62],[119,2,107,0],[120,2,108,0],[121,0,109,0],[122,0,110,0],[123,0,111,0],[124,0,112,0],[125,0,113,0],[126,0,114,0],[127,0,115,0],[128,0,116,0],[129,0,117,0],[130,2,118,7],[130,11,118,16,"findAll"],[130,18,118,23,"findAll"],[130,19,118,24,"test"],[130,23,118,28],[130,25,118,30,"nodes"],[130,30,118,35],[130,32,118,37],[131,4,119,4],[131,8,119,10,"result"],[131,14,119,16],[131,17,119,19],[131,19,119,21],[132,4,120,4],[132,8,120,10,"nodeStack"],[132,17,120,19],[132,20,120,22],[132,21,120,23,"Array"],[132,26,120,28],[132,27,120,29,"isArray"],[132,34,120,36],[132,35,120,37,"nodes"],[132,40,120,42],[132,41,120,43],[132,44,120,46,"nodes"],[132,49,120,51],[132,52,120,54],[132,53,120,55,"nodes"],[132,58,120,60],[132,59,120,61],[132,60,120,62],[133,4,121,4],[133,8,121,10,"indexStack"],[133,18,121,20],[133,21,121,23],[133,22,121,24],[133,23,121,25],[133,24,121,26],[134,4,122,4],[134,13,122,13],[135,6,123,8],[135,10,123,12,"indexStack"],[135,20,123,22],[135,21,123,23],[135,22,123,24],[135,23,123,25],[135,27,123,29,"nodeStack"],[135,36,123,38],[135,37,123,39],[135,38,123,40],[135,39,123,41],[135,40,123,42,"length"],[135,46,123,48],[135,48,123,50],[136,8,124,12],[136,12,124,16,"nodeStack"],[136,21,124,25],[136,22,124,26,"length"],[136,28,124,32],[136,33,124,37],[136,34,124,38],[136,36,124,40],[137,10,125,16],[137,17,125,23,"result"],[137,23,125,29],[138,8,126,12],[139,8,127,12],[140,8,128,12,"nodeStack"],[140,17,128,21],[140,18,128,22,"shift"],[140,23,128,27],[140,24,128,28],[140,25,128,29],[141,8,129,12,"indexStack"],[141,18,129,22],[141,19,129,23,"shift"],[141,24,129,28],[141,25,129,29],[141,26,129,30],[142,8,130,12],[143,8,131,12],[144,6,132,8],[145,6,133,8],[145,10,133,14,"elem"],[145,14,133,18],[145,17,133,21,"nodeStack"],[145,26,133,30],[145,27,133,31],[145,28,133,32],[145,29,133,33],[145,30,133,34,"indexStack"],[145,40,133,44],[145,41,133,45],[145,42,133,46],[145,43,133,47],[145,45,133,49],[145,46,133,50],[146,6,134,8],[146,10,134,12],[146,14,134,12,"isTag"],[146,25,134,17],[146,26,134,17,"isTag"],[146,31,134,17],[146,33,134,18,"elem"],[146,37,134,22],[146,38,134,23],[146,42,134,27,"test"],[146,46,134,31],[146,47,134,32,"elem"],[146,51,134,36],[146,52,134,37],[146,54,135,12,"result"],[146,60,135,18],[146,61,135,19,"push"],[146,65,135,23],[146,66,135,24,"elem"],[146,70,135,28],[146,71,135,29],[147,6,136,8],[147,10,136,12],[147,14,136,12,"hasChildren"],[147,25,136,23],[147,26,136,23,"hasChildren"],[147,37,136,23],[147,39,136,24,"elem"],[147,43,136,28],[147,44,136,29],[147,48,136,33,"elem"],[147,52,136,37],[147,53,136,38,"children"],[147,61,136,46],[147,62,136,47,"length"],[147,68,136,53],[147,71,136,56],[147,72,136,57],[147,74,136,59],[148,8,137,12,"indexStack"],[148,18,137,22],[148,19,137,23,"unshift"],[148,26,137,30],[148,27,137,31],[148,28,137,32],[148,29,137,33],[149,8,138,12,"nodeStack"],[149,17,138,21],[149,18,138,22,"unshift"],[149,25,138,29],[149,26,138,30,"elem"],[149,30,138,34],[149,31,138,35,"children"],[149,39,138,43],[149,40,138,44],[150,6,139,8],[151,4,140,4],[152,2,141,0],[153,0,141,1],[153,3]],"functionMap":{"names":["<global>","filter","find","findOneChild","findOne","existsOne","some$argument_0","findAll"],"mappings":"AAA;OCW;CDE;OEW;CFkC;OGU;CHE;OIU;CJc;OKS;yDCC;6DDC;CLC;OOW;CPuB"},"hasCjsExports":false},"type":"js/module"}]}