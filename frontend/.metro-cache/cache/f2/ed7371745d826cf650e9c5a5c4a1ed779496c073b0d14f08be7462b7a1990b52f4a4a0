{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./error","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":27,"index":27},"end":{"line":1,"column":45,"index":45}},{"start":{"line":2,"column":23,"index":91},"end":{"line":2,"column":41,"index":109}}],"key":"ABL1W5lBwNEqpjG9q/KVa7squiQ=","exportNames":["*"],"imports":2}},{"name":"../utils/names","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":12,"index":140},"end":{"line":3,"column":37,"index":165}}],"key":"L2MKZtQXn0W8qTjLJhkpTgzKTxA=","exportNames":["*"],"imports":1}},{"name":"./generic","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":181},"end":{"line":4,"column":34,"index":201}}],"key":"oWN8T1FewMEPfRgNVLHWQbhlrwg=","exportNames":["*"],"imports":1}},{"name":"../definition-syntax/parse","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":215},"end":{"line":5,"column":49,"index":252}}],"key":"sn+RN7tJU4ThPOKAEy6L7OdQWFs=","exportNames":["*"],"imports":1}},{"name":"../definition-syntax/generate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":15,"index":269},"end":{"line":6,"column":55,"index":309}}],"key":"w0l5t/Jf1sNLF1hV0Sc5Cra1Bgg=","exportNames":["*"],"imports":1}},{"name":"../definition-syntax/walk","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":11,"index":322},"end":{"line":7,"column":47,"index":358}}],"key":"/W+O35B4MJwzhxMaxq4wfrc2ofA=","exportNames":["*"],"imports":1}},{"name":"./prepare-tokens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":20,"index":380},"end":{"line":8,"column":47,"index":407}}],"key":"dELhmCyz+QIZtgVSf/ybIOe80KQ=","exportNames":["*"],"imports":1}},{"name":"./match-graph","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":22,"index":431},"end":{"line":9,"column":46,"index":455}}],"key":"FCZvlNKlTD5d7PCxUNzj1QfxgE4=","exportNames":["*"],"imports":1}},{"name":"./match","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":18,"index":491},"end":{"line":10,"column":36,"index":509}}],"key":"i/V+fCltWAqmU/ZaqT2uhzqXnW0=","exportNames":["*"],"imports":1}},{"name":"./trace","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":12,"index":535},"end":{"line":11,"column":30,"index":553}}],"key":"iRFsLcgtciI9N1wyLWhAVOdtROY=","exportNames":["*"],"imports":1}},{"name":"./search","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":13,"index":568},"end":{"line":12,"column":32,"index":587}}],"key":"xPlM0I1iuKDSFJx1zl3Iq73ihV0=","exportNames":["*"],"imports":1}},{"name":"./structure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":29,"index":618},"end":{"line":13,"column":51,"index":640}}],"key":"9LD0W5ODTigK+6pHJszl+pI+i8w=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var SyntaxReferenceError = require(_dependencyMap[1], \"./error\").SyntaxReferenceError;\n  var SyntaxMatchError = require(_dependencyMap[1], \"./error\").SyntaxMatchError;\n  var names = require(_dependencyMap[2], \"../utils/names\");\n  var generic = require(_dependencyMap[3], \"./generic\");\n  var parse = require(_dependencyMap[4], \"../definition-syntax/parse\");\n  var generate = require(_dependencyMap[5], \"../definition-syntax/generate\");\n  var walk = require(_dependencyMap[6], \"../definition-syntax/walk\");\n  var prepareTokens = require(_dependencyMap[7], \"./prepare-tokens\");\n  var buildMatchGraph = require(_dependencyMap[8], \"./match-graph\").buildMatchGraph;\n  var matchAsTree = require(_dependencyMap[9], \"./match\").matchAsTree;\n  var trace = require(_dependencyMap[10], \"./trace\");\n  var search = require(_dependencyMap[11], \"./search\");\n  var getStructureFromConfig = require(_dependencyMap[12], \"./structure\").getStructureFromConfig;\n  var cssWideKeywords = buildMatchGraph('inherit | initial | unset');\n  var cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n  function dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n    for (var name in map) {\n      if (map[name].syntax) {\n        result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, {\n          compact: compact\n        });\n      }\n    }\n    return result;\n  }\n  function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n    for (var _ref of Object.entries(map)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var name = _ref2[0];\n      var atrule = _ref2[1];\n      result[name] = {\n        prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : generate(atrule.prelude.syntax, {\n          compact\n        })),\n        descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n      };\n    }\n    return result;\n  }\n  function valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].value.toLowerCase() === 'var(') {\n        return true;\n      }\n    }\n    return false;\n  }\n  function buildMatchResult(match, error, iterations) {\n    return {\n      matched: match,\n      iterations: iterations,\n      error: error,\n      getTrace: trace.getTrace,\n      isType: trace.isType,\n      isProperty: trace.isProperty,\n      isKeyword: trace.isKeyword\n    };\n  }\n  function matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = prepareTokens(value, lexer.syntax);\n    var result;\n    if (valueHasVar(tokens)) {\n      return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n    if (useCommon) {\n      result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n    if (!useCommon || !result.match) {\n      result = matchAsTree(tokens, syntax.match, lexer);\n      if (!result.match) {\n        return buildMatchResult(null, new SyntaxMatchError(result.reason, syntax.syntax, value, result), result.iterations);\n      }\n    }\n    return buildMatchResult(result.match, null, result.iterations);\n  }\n  var Lexer = function (config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = {};\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n    if (config) {\n      if (config.types) {\n        for (var name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n      if (config.generic) {\n        this.generic = true;\n        for (var name in generic) {\n          this.addType_(name, generic[name]);\n        }\n      }\n      if (config.atrules) {\n        for (var name in config.atrules) {\n          this.addAtrule_(name, config.atrules[name]);\n        }\n      }\n      if (config.properties) {\n        for (var name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  };\n  Lexer.prototype = {\n    structure: {},\n    checkStructure: function (ast) {\n      function collectWarning(node, message) {\n        warns.push({\n          node: node,\n          message: message\n        });\n      }\n      var structure = this.structure;\n      var warns = [];\n      this.syntax.walk(ast, function (node) {\n        if (structure.hasOwnProperty(node.type)) {\n          structure[node.type].check(node, collectWarning);\n        } else {\n          collectWarning(node, 'Unknown node type `' + node.type + '`');\n        }\n      });\n      return warns.length ? warns : false;\n    },\n    createDescriptor: function (syntax, type, name) {\n      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var ref = {\n        type: type,\n        name: name\n      };\n      var descriptor = {\n        type: type,\n        name: name,\n        parent: parent,\n        syntax: null,\n        match: null\n      };\n      if (typeof syntax === 'function') {\n        descriptor.match = buildMatchGraph(syntax, ref);\n      } else {\n        if (typeof syntax === 'string') {\n          // lazy parsing on first access\n          Object.defineProperty(descriptor, 'syntax', {\n            get: function () {\n              Object.defineProperty(descriptor, 'syntax', {\n                value: parse(syntax)\n              });\n              return descriptor.syntax;\n            }\n          });\n        } else {\n          descriptor.syntax = syntax;\n        }\n\n        // lazy graph build on first access\n        Object.defineProperty(descriptor, 'match', {\n          get: function () {\n            Object.defineProperty(descriptor, 'match', {\n              value: buildMatchGraph(descriptor.syntax, ref)\n            });\n            return descriptor.match;\n          }\n        });\n      }\n      return descriptor;\n    },\n    addAtrule_: function (name, syntax) {\n      if (!syntax) {\n        return;\n      }\n      this.atrules[name] = {\n        type: 'Atrule',\n        name: name,\n        prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n        descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce((res, descName) => {\n          res[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n          return res;\n        }, {}) : null\n      };\n    },\n    addProperty_: function (name, syntax) {\n      if (!syntax) {\n        return;\n      }\n      this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function (name, syntax) {\n      if (!syntax) {\n        return;\n      }\n      this.types[name] = this.createDescriptor(syntax, 'Type', name);\n      if (syntax === generic['-ms-legacy-expression']) {\n        this.valueCommonSyntax = cssWideKeywordsWithExpression;\n      }\n    },\n    checkAtruleName: function (atruleName) {\n      if (!this.getAtrule(atruleName)) {\n        return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);\n      }\n    },\n    checkAtrulePrelude: function (atruleName, prelude) {\n      var error = this.checkAtruleName(atruleName);\n      if (error) {\n        return error;\n      }\n      var atrule = this.getAtrule(atruleName);\n      if (!atrule.prelude && prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n      }\n      if (atrule.prelude && !prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n      }\n    },\n    checkAtruleDescriptorName: function (atruleName, descriptorName) {\n      var error = this.checkAtruleName(atruleName);\n      if (error) {\n        return error;\n      }\n      var atrule = this.getAtrule(atruleName);\n      var descriptor = names.keyword(descriptorName);\n      if (!atrule.descriptors) {\n        return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n      }\n      if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {\n        return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);\n      }\n    },\n    checkPropertyName: function (propertyName) {\n      var property = names.property(propertyName);\n\n      // don't match syntax for a custom property\n      if (property.custom) {\n        return new Error('Lexer matching doesn\\'t applicable for custom properties');\n      }\n      if (!this.getProperty(propertyName)) {\n        return new SyntaxReferenceError('Unknown property', propertyName);\n      }\n    },\n    matchAtrulePrelude: function (atruleName, prelude) {\n      var error = this.checkAtrulePrelude(atruleName, prelude);\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n      if (!prelude) {\n        return buildMatchResult(null, null);\n      }\n      return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);\n    },\n    matchAtruleDescriptor: function (atruleName, descriptorName, value) {\n      var error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n      var atrule = this.getAtrule(atruleName);\n      var descriptor = names.keyword(descriptorName);\n      return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n    },\n    matchDeclaration: function (node) {\n      if (node.type !== 'Declaration') {\n        return buildMatchResult(null, new Error('Not a Declaration node'));\n      }\n      return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function (propertyName, value) {\n      var error = this.checkPropertyName(propertyName);\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n      return matchSyntax(this, this.getProperty(propertyName), value, true);\n    },\n    matchType: function (typeName, value) {\n      var typeSyntax = this.getType(typeName);\n      if (!typeSyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n      }\n      return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function (syntax, value) {\n      if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n        return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n      }\n      if (typeof syntax === 'string' || !syntax.match) {\n        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n      }\n      return matchSyntax(this, syntax, value, false);\n    },\n    findValueFragments: function (propertyName, value, type, name) {\n      return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function (declaration, type, name) {\n      return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function (ast, type, name) {\n      var result = [];\n      this.syntax.walk(ast, {\n        visit: 'Declaration',\n        enter: function (declaration) {\n          result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n        }.bind(this)\n      });\n      return result;\n    },\n    getAtrule: function (atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = names.keyword(atruleName);\n      var atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n      return atruleEntry || null;\n    },\n    getAtrulePrelude: function (atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = this.getAtrule(atruleName, fallbackBasename);\n      return atrule && atrule.prelude || null;\n    },\n    getAtruleDescriptor: function (atruleName, name) {\n      return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n    },\n    getProperty: function (propertyName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var property = names.property(propertyName);\n      var propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];\n      return propertyEntry || null;\n    },\n    getType: function (name) {\n      return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n    validate: function () {\n      function validate(syntax, name, broken, descriptor) {\n        if (broken.hasOwnProperty(name)) {\n          return broken[name];\n        }\n        broken[name] = false;\n        if (descriptor.syntax !== null) {\n          walk(descriptor.syntax, function (node) {\n            if (node.type !== 'Type' && node.type !== 'Property') {\n              return;\n            }\n            var map = node.type === 'Type' ? syntax.types : syntax.properties;\n            var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n            if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n              broken[name] = true;\n            }\n          }, this);\n        }\n      }\n      var brokenTypes = {};\n      var brokenProperties = {};\n      for (var key in this.types) {\n        validate(this, key, brokenTypes, this.types[key]);\n      }\n      for (var key in this.properties) {\n        validate(this, key, brokenProperties, this.properties[key]);\n      }\n      brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n        return brokenTypes[name];\n      });\n      brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n        return brokenProperties[name];\n      });\n      if (brokenTypes.length || brokenProperties.length) {\n        return {\n          types: brokenTypes,\n          properties: brokenProperties\n        };\n      }\n      return null;\n    },\n    dump: function (syntaxAsAst, pretty) {\n      return {\n        generic: this.generic,\n        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n        atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n      };\n    },\n    toString: function () {\n      return JSON.stringify(this.dump());\n    }\n  };\n  module.exports = Lexer;\n});","lineCount":387,"map":[[3,2,1,0],[3,6,1,4,"SyntaxReferenceError"],[3,26,1,24],[3,29,1,27,"require"],[3,36,1,34],[3,37,1,34,"_dependencyMap"],[3,51,1,34],[3,65,1,44],[3,66,1,45],[3,67,1,46,"SyntaxReferenceError"],[3,87,1,66],[4,2,2,0],[4,6,2,4,"SyntaxMatchError"],[4,22,2,20],[4,25,2,23,"require"],[4,32,2,30],[4,33,2,30,"_dependencyMap"],[4,47,2,30],[4,61,2,40],[4,62,2,41],[4,63,2,42,"SyntaxMatchError"],[4,79,2,58],[5,2,3,0],[5,6,3,4,"names"],[5,11,3,9],[5,14,3,12,"require"],[5,21,3,19],[5,22,3,19,"_dependencyMap"],[5,36,3,19],[5,57,3,36],[5,58,3,37],[6,2,4,0],[6,6,4,4,"generic"],[6,13,4,11],[6,16,4,14,"require"],[6,23,4,21],[6,24,4,21,"_dependencyMap"],[6,38,4,21],[6,54,4,33],[6,55,4,34],[7,2,5,0],[7,6,5,4,"parse"],[7,11,5,9],[7,14,5,12,"require"],[7,21,5,19],[7,22,5,19,"_dependencyMap"],[7,36,5,19],[7,69,5,48],[7,70,5,49],[8,2,6,0],[8,6,6,4,"generate"],[8,14,6,12],[8,17,6,15,"require"],[8,24,6,22],[8,25,6,22,"_dependencyMap"],[8,39,6,22],[8,75,6,54],[8,76,6,55],[9,2,7,0],[9,6,7,4,"walk"],[9,10,7,8],[9,13,7,11,"require"],[9,20,7,18],[9,21,7,18,"_dependencyMap"],[9,35,7,18],[9,67,7,46],[9,68,7,47],[10,2,8,0],[10,6,8,4,"prepareTokens"],[10,19,8,17],[10,22,8,20,"require"],[10,29,8,27],[10,30,8,27,"_dependencyMap"],[10,44,8,27],[10,67,8,46],[10,68,8,47],[11,2,9,0],[11,6,9,4,"buildMatchGraph"],[11,21,9,19],[11,24,9,22,"require"],[11,31,9,29],[11,32,9,29,"_dependencyMap"],[11,46,9,29],[11,66,9,45],[11,67,9,46],[11,68,9,47,"buildMatchGraph"],[11,83,9,62],[12,2,10,0],[12,6,10,4,"matchAsTree"],[12,17,10,15],[12,20,10,18,"require"],[12,27,10,25],[12,28,10,25,"_dependencyMap"],[12,42,10,25],[12,56,10,35],[12,57,10,36],[12,58,10,37,"matchAsTree"],[12,69,10,48],[13,2,11,0],[13,6,11,4,"trace"],[13,11,11,9],[13,14,11,12,"require"],[13,21,11,19],[13,22,11,19,"_dependencyMap"],[13,36,11,19],[13,51,11,29],[13,52,11,30],[14,2,12,0],[14,6,12,4,"search"],[14,12,12,10],[14,15,12,13,"require"],[14,22,12,20],[14,23,12,20,"_dependencyMap"],[14,37,12,20],[14,53,12,31],[14,54,12,32],[15,2,13,0],[15,6,13,4,"getStructureFromConfig"],[15,28,13,26],[15,31,13,29,"require"],[15,38,13,36],[15,39,13,36,"_dependencyMap"],[15,53,13,36],[15,72,13,50],[15,73,13,51],[15,74,13,52,"getStructureFromConfig"],[15,96,13,74],[16,2,14,0],[16,6,14,4,"cssWideKeywords"],[16,21,14,19],[16,24,14,22,"buildMatchGraph"],[16,39,14,37],[16,40,14,38],[16,67,14,65],[16,68,14,66],[17,2,15,0],[17,6,15,4,"cssWideKeywordsWithExpression"],[17,35,15,33],[17,38,15,36,"buildMatchGraph"],[17,53,15,51],[17,54,15,52],[17,107,15,105],[17,108,15,106],[18,2,17,0],[18,11,17,9,"dumpMapSyntax"],[18,24,17,22,"dumpMapSyntax"],[18,25,17,23,"map"],[18,28,17,26],[18,30,17,28,"compact"],[18,37,17,35],[18,39,17,37,"syntaxAsAst"],[18,50,17,48],[18,52,17,50],[19,4,18,4],[19,8,18,8,"result"],[19,14,18,14],[19,17,18,17],[19,18,18,18],[19,19,18,19],[20,4,20,4],[20,9,20,9],[20,13,20,13,"name"],[20,17,20,17],[20,21,20,21,"map"],[20,24,20,24],[20,26,20,26],[21,6,21,8],[21,10,21,12,"map"],[21,13,21,15],[21,14,21,16,"name"],[21,18,21,20],[21,19,21,21],[21,20,21,22,"syntax"],[21,26,21,28],[21,28,21,30],[22,8,22,12,"result"],[22,14,22,18],[22,15,22,19,"name"],[22,19,22,23],[22,20,22,24],[22,23,22,27,"syntaxAsAst"],[22,34,22,38],[22,37,23,18,"map"],[22,40,23,21],[22,41,23,22,"name"],[22,45,23,26],[22,46,23,27],[22,47,23,28,"syntax"],[22,53,23,34],[22,56,24,18,"generate"],[22,64,24,26],[22,65,24,27,"map"],[22,68,24,30],[22,69,24,31,"name"],[22,73,24,35],[22,74,24,36],[22,75,24,37,"syntax"],[22,81,24,43],[22,83,24,45],[23,10,24,47,"compact"],[23,17,24,54],[23,19,24,56,"compact"],[24,8,24,64],[24,9,24,65],[24,10,24,66],[25,6,25,8],[26,4,26,4],[27,4,28,4],[27,11,28,11,"result"],[27,17,28,17],[28,2,29,0],[29,2,31,0],[29,11,31,9,"dumpAtruleMapSyntax"],[29,30,31,28,"dumpAtruleMapSyntax"],[29,31,31,29,"map"],[29,34,31,32],[29,36,31,34,"compact"],[29,43,31,41],[29,45,31,43,"syntaxAsAst"],[29,56,31,54],[29,58,31,56],[30,4,32,4],[30,8,32,10,"result"],[30,14,32,16],[30,17,32,19],[30,18,32,20],[30,19,32,21],[31,4,34,4],[31,13,34,4,"_ref"],[31,17,34,4],[31,21,34,33,"Object"],[31,27,34,39],[31,28,34,40,"entries"],[31,35,34,47],[31,36,34,48,"map"],[31,39,34,51],[31,40,34,52],[31,42,34,54],[32,6,34,54],[32,10,34,54,"_ref2"],[32,15,34,54],[32,18,34,54,"_slicedToArray"],[32,32,34,54],[32,33,34,54,"_ref"],[32,37,34,54],[33,6,34,54],[33,10,34,16,"name"],[33,14,34,20],[33,17,34,20,"_ref2"],[33,22,34,20],[34,6,34,20],[34,10,34,22,"atrule"],[34,16,34,28],[34,19,34,28,"_ref2"],[34,24,34,28],[35,6,35,8,"result"],[35,12,35,14],[35,13,35,15,"name"],[35,17,35,19],[35,18,35,20],[35,21,35,23],[36,8,36,12,"prelude"],[36,15,36,19],[36,17,36,21,"atrule"],[36,23,36,27],[36,24,36,28,"prelude"],[36,31,36,35],[36,36,37,16,"syntaxAsAst"],[36,47,37,27],[36,50,38,22,"atrule"],[36,56,38,28],[36,57,38,29,"prelude"],[36,64,38,36],[36,65,38,37,"syntax"],[36,71,38,43],[36,74,39,22,"generate"],[36,82,39,30],[36,83,39,31,"atrule"],[36,89,39,37],[36,90,39,38,"prelude"],[36,97,39,45],[36,98,39,46,"syntax"],[36,104,39,52],[36,106,39,54],[37,10,39,56,"compact"],[38,8,39,64],[38,9,39,65],[38,10,39,66],[38,11,40,13],[39,8,41,12,"descriptors"],[39,19,41,23],[39,21,41,25,"atrule"],[39,27,41,31],[39,28,41,32,"descriptors"],[39,39,41,43],[39,43,41,47,"dumpMapSyntax"],[39,56,41,60],[39,57,41,61,"atrule"],[39,63,41,67],[39,64,41,68,"descriptors"],[39,75,41,79],[39,77,41,81,"compact"],[39,84,41,88],[39,86,41,90,"syntaxAsAst"],[39,97,41,101],[40,6,42,8],[40,7,42,9],[41,4,43,4],[42,4,45,4],[42,11,45,11,"result"],[42,17,45,17],[43,2,46,0],[44,2,48,0],[44,11,48,9,"valueHasVar"],[44,22,48,20,"valueHasVar"],[44,23,48,21,"tokens"],[44,29,48,27],[44,31,48,29],[45,4,49,4],[45,9,49,9],[45,13,49,13,"i"],[45,14,49,14],[45,17,49,17],[45,18,49,18],[45,20,49,20,"i"],[45,21,49,21],[45,24,49,24,"tokens"],[45,30,49,30],[45,31,49,31,"length"],[45,37,49,37],[45,39,49,39,"i"],[45,40,49,40],[45,42,49,42],[45,44,49,44],[46,6,50,8],[46,10,50,12,"tokens"],[46,16,50,18],[46,17,50,19,"i"],[46,18,50,20],[46,19,50,21],[46,20,50,22,"value"],[46,25,50,27],[46,26,50,28,"toLowerCase"],[46,37,50,39],[46,38,50,40],[46,39,50,41],[46,44,50,46],[46,50,50,52],[46,52,50,54],[47,8,51,12],[47,15,51,19],[47,19,51,23],[48,6,52,8],[49,4,53,4],[50,4,55,4],[50,11,55,11],[50,16,55,16],[51,2,56,0],[52,2,58,0],[52,11,58,9,"buildMatchResult"],[52,27,58,25,"buildMatchResult"],[52,28,58,26,"match"],[52,33,58,31],[52,35,58,33,"error"],[52,40,58,38],[52,42,58,40,"iterations"],[52,52,58,50],[52,54,58,52],[53,4,59,4],[53,11,59,11],[54,6,60,8,"matched"],[54,13,60,15],[54,15,60,17,"match"],[54,20,60,22],[55,6,61,8,"iterations"],[55,16,61,18],[55,18,61,20,"iterations"],[55,28,61,30],[56,6,62,8,"error"],[56,11,62,13],[56,13,62,15,"error"],[56,18,62,20],[57,6,63,8,"getTrace"],[57,14,63,16],[57,16,63,18,"trace"],[57,21,63,23],[57,22,63,24,"getTrace"],[57,30,63,32],[58,6,64,8,"isType"],[58,12,64,14],[58,14,64,16,"trace"],[58,19,64,21],[58,20,64,22,"isType"],[58,26,64,28],[59,6,65,8,"isProperty"],[59,16,65,18],[59,18,65,20,"trace"],[59,23,65,25],[59,24,65,26,"isProperty"],[59,34,65,36],[60,6,66,8,"isKeyword"],[60,15,66,17],[60,17,66,19,"trace"],[60,22,66,24],[60,23,66,25,"isKeyword"],[61,4,67,4],[61,5,67,5],[62,2,68,0],[63,2,70,0],[63,11,70,9,"matchSyntax"],[63,22,70,20,"matchSyntax"],[63,23,70,21,"lexer"],[63,28,70,26],[63,30,70,28,"syntax"],[63,36,70,34],[63,38,70,36,"value"],[63,43,70,41],[63,45,70,43,"useCommon"],[63,54,70,52],[63,56,70,54],[64,4,71,4],[64,8,71,8,"tokens"],[64,14,71,14],[64,17,71,17,"prepareTokens"],[64,30,71,30],[64,31,71,31,"value"],[64,36,71,36],[64,38,71,38,"lexer"],[64,43,71,43],[64,44,71,44,"syntax"],[64,50,71,50],[64,51,71,51],[65,4,72,4],[65,8,72,8,"result"],[65,14,72,14],[66,4,74,4],[66,8,74,8,"valueHasVar"],[66,19,74,19],[66,20,74,20,"tokens"],[66,26,74,26],[66,27,74,27],[66,29,74,29],[67,6,75,8],[67,13,75,15,"buildMatchResult"],[67,29,75,31],[67,30,75,32],[67,34,75,36],[67,36,75,38],[67,40,75,42,"Error"],[67,45,75,47],[67,46,75,48],[67,95,75,97],[67,96,75,98],[67,97,75,99],[68,4,76,4],[69,4,78,4],[69,8,78,8,"useCommon"],[69,17,78,17],[69,19,78,19],[70,6,79,8,"result"],[70,12,79,14],[70,15,79,17,"matchAsTree"],[70,26,79,28],[70,27,79,29,"tokens"],[70,33,79,35],[70,35,79,37,"lexer"],[70,40,79,42],[70,41,79,43,"valueCommonSyntax"],[70,58,79,60],[70,60,79,62,"lexer"],[70,65,79,67],[70,66,79,68],[71,4,80,4],[72,4,82,4],[72,8,82,8],[72,9,82,9,"useCommon"],[72,18,82,18],[72,22,82,22],[72,23,82,23,"result"],[72,29,82,29],[72,30,82,30,"match"],[72,35,82,35],[72,37,82,37],[73,6,83,8,"result"],[73,12,83,14],[73,15,83,17,"matchAsTree"],[73,26,83,28],[73,27,83,29,"tokens"],[73,33,83,35],[73,35,83,37,"syntax"],[73,41,83,43],[73,42,83,44,"match"],[73,47,83,49],[73,49,83,51,"lexer"],[73,54,83,56],[73,55,83,57],[74,6,84,8],[74,10,84,12],[74,11,84,13,"result"],[74,17,84,19],[74,18,84,20,"match"],[74,23,84,25],[74,25,84,27],[75,8,85,12],[75,15,85,19,"buildMatchResult"],[75,31,85,35],[75,32,86,16],[75,36,86,20],[75,38,87,16],[75,42,87,20,"SyntaxMatchError"],[75,58,87,36],[75,59,87,37,"result"],[75,65,87,43],[75,66,87,44,"reason"],[75,72,87,50],[75,74,87,52,"syntax"],[75,80,87,58],[75,81,87,59,"syntax"],[75,87,87,65],[75,89,87,67,"value"],[75,94,87,72],[75,96,87,74,"result"],[75,102,87,80],[75,103,87,81],[75,105,88,16,"result"],[75,111,88,22],[75,112,88,23,"iterations"],[75,122,89,12],[75,123,89,13],[76,6,90,8],[77,4,91,4],[78,4,93,4],[78,11,93,11,"buildMatchResult"],[78,27,93,27],[78,28,93,28,"result"],[78,34,93,34],[78,35,93,35,"match"],[78,40,93,40],[78,42,93,42],[78,46,93,46],[78,48,93,48,"result"],[78,54,93,54],[78,55,93,55,"iterations"],[78,65,93,65],[78,66,93,66],[79,2,94,0],[80,2,96,0],[80,6,96,4,"Lexer"],[80,11,96,9],[80,14,96,12],[80,23,96,12,"Lexer"],[80,24,96,21,"config"],[80,30,96,27],[80,32,96,29,"syntax"],[80,38,96,35],[80,40,96,37,"structure"],[80,49,96,46],[80,51,96,48],[81,4,97,4],[81,8,97,8],[81,9,97,9,"valueCommonSyntax"],[81,26,97,26],[81,29,97,29,"cssWideKeywords"],[81,44,97,44],[82,4,98,4],[82,8,98,8],[82,9,98,9,"syntax"],[82,15,98,15],[82,18,98,18,"syntax"],[82,24,98,24],[83,4,99,4],[83,8,99,8],[83,9,99,9,"generic"],[83,16,99,16],[83,19,99,19],[83,24,99,24],[84,4,100,4],[84,8,100,8],[84,9,100,9,"atrules"],[84,16,100,16],[84,19,100,19],[84,20,100,20],[84,21,100,21],[85,4,101,4],[85,8,101,8],[85,9,101,9,"properties"],[85,19,101,19],[85,22,101,22],[85,23,101,23],[85,24,101,24],[86,4,102,4],[86,8,102,8],[86,9,102,9,"types"],[86,14,102,14],[86,17,102,17],[86,18,102,18],[86,19,102,19],[87,4,103,4],[87,8,103,8],[87,9,103,9,"structure"],[87,18,103,18],[87,21,103,21,"structure"],[87,30,103,30],[87,34,103,34,"getStructureFromConfig"],[87,56,103,56],[87,57,103,57,"config"],[87,63,103,63],[87,64,103,64],[88,4,105,4],[88,8,105,8,"config"],[88,14,105,14],[88,16,105,16],[89,6,106,8],[89,10,106,12,"config"],[89,16,106,18],[89,17,106,19,"types"],[89,22,106,24],[89,24,106,26],[90,8,107,12],[90,13,107,17],[90,17,107,21,"name"],[90,21,107,25],[90,25,107,29,"config"],[90,31,107,35],[90,32,107,36,"types"],[90,37,107,41],[90,39,107,43],[91,10,108,16],[91,14,108,20],[91,15,108,21,"addType_"],[91,23,108,29],[91,24,108,30,"name"],[91,28,108,34],[91,30,108,36,"config"],[91,36,108,42],[91,37,108,43,"types"],[91,42,108,48],[91,43,108,49,"name"],[91,47,108,53],[91,48,108,54],[91,49,108,55],[92,8,109,12],[93,6,110,8],[94,6,112,8],[94,10,112,12,"config"],[94,16,112,18],[94,17,112,19,"generic"],[94,24,112,26],[94,26,112,28],[95,8,113,12],[95,12,113,16],[95,13,113,17,"generic"],[95,20,113,24],[95,23,113,27],[95,27,113,31],[96,8,114,12],[96,13,114,17],[96,17,114,21,"name"],[96,21,114,25],[96,25,114,29,"generic"],[96,32,114,36],[96,34,114,38],[97,10,115,16],[97,14,115,20],[97,15,115,21,"addType_"],[97,23,115,29],[97,24,115,30,"name"],[97,28,115,34],[97,30,115,36,"generic"],[97,37,115,43],[97,38,115,44,"name"],[97,42,115,48],[97,43,115,49],[97,44,115,50],[98,8,116,12],[99,6,117,8],[100,6,119,8],[100,10,119,12,"config"],[100,16,119,18],[100,17,119,19,"atrules"],[100,24,119,26],[100,26,119,28],[101,8,120,12],[101,13,120,17],[101,17,120,21,"name"],[101,21,120,25],[101,25,120,29,"config"],[101,31,120,35],[101,32,120,36,"atrules"],[101,39,120,43],[101,41,120,45],[102,10,121,16],[102,14,121,20],[102,15,121,21,"addAtrule_"],[102,25,121,31],[102,26,121,32,"name"],[102,30,121,36],[102,32,121,38,"config"],[102,38,121,44],[102,39,121,45,"atrules"],[102,46,121,52],[102,47,121,53,"name"],[102,51,121,57],[102,52,121,58],[102,53,121,59],[103,8,122,12],[104,6,123,8],[105,6,125,8],[105,10,125,12,"config"],[105,16,125,18],[105,17,125,19,"properties"],[105,27,125,29],[105,29,125,31],[106,8,126,12],[106,13,126,17],[106,17,126,21,"name"],[106,21,126,25],[106,25,126,29,"config"],[106,31,126,35],[106,32,126,36,"properties"],[106,42,126,46],[106,44,126,48],[107,10,127,16],[107,14,127,20],[107,15,127,21,"addProperty_"],[107,27,127,33],[107,28,127,34,"name"],[107,32,127,38],[107,34,127,40,"config"],[107,40,127,46],[107,41,127,47,"properties"],[107,51,127,57],[107,52,127,58,"name"],[107,56,127,62],[107,57,127,63],[107,58,127,64],[108,8,128,12],[109,6,129,8],[110,4,130,4],[111,2,131,0],[111,3,131,1],[112,2,133,0,"Lexer"],[112,7,133,5],[112,8,133,6,"prototype"],[112,17,133,15],[112,20,133,18],[113,4,134,4,"structure"],[113,13,134,13],[113,15,134,15],[113,16,134,16],[113,17,134,17],[114,4,135,4,"checkStructure"],[114,18,135,18],[114,20,135,20],[114,29,135,20,"checkStructure"],[114,30,135,29,"ast"],[114,33,135,32],[114,35,135,34],[115,6,136,8],[115,15,136,17,"collectWarning"],[115,29,136,31,"collectWarning"],[115,30,136,32,"node"],[115,34,136,36],[115,36,136,38,"message"],[115,43,136,45],[115,45,136,47],[116,8,137,12,"warns"],[116,13,137,17],[116,14,137,18,"push"],[116,18,137,22],[116,19,137,23],[117,10,138,16,"node"],[117,14,138,20],[117,16,138,22,"node"],[117,20,138,26],[118,10,139,16,"message"],[118,17,139,23],[118,19,139,25,"message"],[119,8,140,12],[119,9,140,13],[119,10,140,14],[120,6,141,8],[121,6,143,8],[121,10,143,12,"structure"],[121,19,143,21],[121,22,143,24],[121,26,143,28],[121,27,143,29,"structure"],[121,36,143,38],[122,6,144,8],[122,10,144,12,"warns"],[122,15,144,17],[122,18,144,20],[122,20,144,22],[123,6,146,8],[123,10,146,12],[123,11,146,13,"syntax"],[123,17,146,19],[123,18,146,20,"walk"],[123,22,146,24],[123,23,146,25,"ast"],[123,26,146,28],[123,28,146,30],[123,38,146,39,"node"],[123,42,146,43],[123,44,146,45],[124,8,147,12],[124,12,147,16,"structure"],[124,21,147,25],[124,22,147,26,"hasOwnProperty"],[124,36,147,40],[124,37,147,41,"node"],[124,41,147,45],[124,42,147,46,"type"],[124,46,147,50],[124,47,147,51],[124,49,147,53],[125,10,148,16,"structure"],[125,19,148,25],[125,20,148,26,"node"],[125,24,148,30],[125,25,148,31,"type"],[125,29,148,35],[125,30,148,36],[125,31,148,37,"check"],[125,36,148,42],[125,37,148,43,"node"],[125,41,148,47],[125,43,148,49,"collectWarning"],[125,57,148,63],[125,58,148,64],[126,8,149,12],[126,9,149,13],[126,15,149,19],[127,10,150,16,"collectWarning"],[127,24,150,30],[127,25,150,31,"node"],[127,29,150,35],[127,31,150,37],[127,52,150,58],[127,55,150,61,"node"],[127,59,150,65],[127,60,150,66,"type"],[127,64,150,70],[127,67,150,73],[127,70,150,76],[127,71,150,77],[128,8,151,12],[129,6,152,8],[129,7,152,9],[129,8,152,10],[130,6,154,8],[130,13,154,15,"warns"],[130,18,154,20],[130,19,154,21,"length"],[130,25,154,27],[130,28,154,30,"warns"],[130,33,154,35],[130,36,154,38],[130,41,154,43],[131,4,155,4],[131,5,155,5],[132,4,157,4,"createDescriptor"],[132,20,157,20],[132,22,157,22],[132,31,157,22,"createDescriptor"],[132,32,157,31,"syntax"],[132,38,157,37],[132,40,157,39,"type"],[132,44,157,43],[132,46,157,45,"name"],[132,50,157,49],[132,52,157,66],[133,6,157,66],[133,10,157,51,"parent"],[133,16,157,57],[133,19,157,57,"arguments"],[133,28,157,57],[133,29,157,57,"length"],[133,35,157,57],[133,43,157,57,"arguments"],[133,52,157,57],[133,60,157,57,"undefined"],[133,69,157,57],[133,72,157,57,"arguments"],[133,81,157,57],[133,87,157,60],[133,91,157,64],[134,6,158,8],[134,10,158,12,"ref"],[134,13,158,15],[134,16,158,18],[135,8,159,12,"type"],[135,12,159,16],[135,14,159,18,"type"],[135,18,159,22],[136,8,160,12,"name"],[136,12,160,16],[136,14,160,18,"name"],[137,6,161,8],[137,7,161,9],[138,6,162,8],[138,10,162,12,"descriptor"],[138,20,162,22],[138,23,162,25],[139,8,163,12,"type"],[139,12,163,16],[139,14,163,18,"type"],[139,18,163,22],[140,8,164,12,"name"],[140,12,164,16],[140,14,164,18,"name"],[140,18,164,22],[141,8,165,12,"parent"],[141,14,165,18],[141,16,165,20,"parent"],[141,22,165,26],[142,8,166,12,"syntax"],[142,14,166,18],[142,16,166,20],[142,20,166,24],[143,8,167,12,"match"],[143,13,167,17],[143,15,167,19],[144,6,168,8],[144,7,168,9],[145,6,170,8],[145,10,170,12],[145,17,170,19,"syntax"],[145,23,170,25],[145,28,170,30],[145,38,170,40],[145,40,170,42],[146,8,171,12,"descriptor"],[146,18,171,22],[146,19,171,23,"match"],[146,24,171,28],[146,27,171,31,"buildMatchGraph"],[146,42,171,46],[146,43,171,47,"syntax"],[146,49,171,53],[146,51,171,55,"ref"],[146,54,171,58],[146,55,171,59],[147,6,172,8],[147,7,172,9],[147,13,172,15],[148,8,173,12],[148,12,173,16],[148,19,173,23,"syntax"],[148,25,173,29],[148,30,173,34],[148,38,173,42],[148,40,173,44],[149,10,174,16],[150,10,175,16,"Object"],[150,16,175,22],[150,17,175,23,"defineProperty"],[150,31,175,37],[150,32,175,38,"descriptor"],[150,42,175,48],[150,44,175,50],[150,52,175,58],[150,54,175,60],[151,12,176,20,"get"],[151,15,176,23],[151,17,176,25],[151,26,176,25,"get"],[151,27,176,25],[151,29,176,36],[152,14,177,24,"Object"],[152,20,177,30],[152,21,177,31,"defineProperty"],[152,35,177,45],[152,36,177,46,"descriptor"],[152,46,177,56],[152,48,177,58],[152,56,177,66],[152,58,177,68],[153,16,178,28,"value"],[153,21,178,33],[153,23,178,35,"parse"],[153,28,178,40],[153,29,178,41,"syntax"],[153,35,178,47],[154,14,179,24],[154,15,179,25],[154,16,179,26],[155,14,181,24],[155,21,181,31,"descriptor"],[155,31,181,41],[155,32,181,42,"syntax"],[155,38,181,48],[156,12,182,20],[157,10,183,16],[157,11,183,17],[157,12,183,18],[158,8,184,12],[158,9,184,13],[158,15,184,19],[159,10,185,16,"descriptor"],[159,20,185,26],[159,21,185,27,"syntax"],[159,27,185,33],[159,30,185,36,"syntax"],[159,36,185,42],[160,8,186,12],[162,8,188,12],[163,8,189,12,"Object"],[163,14,189,18],[163,15,189,19,"defineProperty"],[163,29,189,33],[163,30,189,34,"descriptor"],[163,40,189,44],[163,42,189,46],[163,49,189,53],[163,51,189,55],[164,10,190,16,"get"],[164,13,190,19],[164,15,190,21],[164,24,190,21,"get"],[164,25,190,21],[164,27,190,32],[165,12,191,20,"Object"],[165,18,191,26],[165,19,191,27,"defineProperty"],[165,33,191,41],[165,34,191,42,"descriptor"],[165,44,191,52],[165,46,191,54],[165,53,191,61],[165,55,191,63],[166,14,192,24,"value"],[166,19,192,29],[166,21,192,31,"buildMatchGraph"],[166,36,192,46],[166,37,192,47,"descriptor"],[166,47,192,57],[166,48,192,58,"syntax"],[166,54,192,64],[166,56,192,66,"ref"],[166,59,192,69],[167,12,193,20],[167,13,193,21],[167,14,193,22],[168,12,195,20],[168,19,195,27,"descriptor"],[168,29,195,37],[168,30,195,38,"match"],[168,35,195,43],[169,10,196,16],[170,8,197,12],[170,9,197,13],[170,10,197,14],[171,6,198,8],[172,6,200,8],[172,13,200,15,"descriptor"],[172,23,200,25],[173,4,201,4],[173,5,201,5],[174,4,202,4,"addAtrule_"],[174,14,202,14],[174,16,202,16],[174,25,202,16,"addAtrule_"],[174,26,202,25,"name"],[174,30,202,29],[174,32,202,31,"syntax"],[174,38,202,37],[174,40,202,39],[175,6,203,8],[175,10,203,12],[175,11,203,13,"syntax"],[175,17,203,19],[175,19,203,21],[176,8,204,12],[177,6,205,8],[178,6,207,8],[178,10,207,12],[178,11,207,13,"atrules"],[178,18,207,20],[178,19,207,21,"name"],[178,23,207,25],[178,24,207,26],[178,27,207,29],[179,8,208,12,"type"],[179,12,208,16],[179,14,208,18],[179,22,208,26],[180,8,209,12,"name"],[180,12,209,16],[180,14,209,18,"name"],[180,18,209,22],[181,8,210,12,"prelude"],[181,15,210,19],[181,17,210,21,"syntax"],[181,23,210,27],[181,24,210,28,"prelude"],[181,31,210,35],[181,34,210,38],[181,38,210,42],[181,39,210,43,"createDescriptor"],[181,55,210,59],[181,56,210,60,"syntax"],[181,62,210,66],[181,63,210,67,"prelude"],[181,70,210,74],[181,72,210,76],[181,87,210,91],[181,89,210,93,"name"],[181,93,210,97],[181,94,210,98],[181,97,210,101],[181,101,210,105],[182,8,211,12,"descriptors"],[182,19,211,23],[182,21,211,25,"syntax"],[182,27,211,31],[182,28,211,32,"descriptors"],[182,39,211,43],[182,42,212,18,"Object"],[182,48,212,24],[182,49,212,25,"keys"],[182,53,212,29],[182,54,212,30,"syntax"],[182,60,212,36],[182,61,212,37,"descriptors"],[182,72,212,48],[182,73,212,49],[182,74,212,50,"reduce"],[182,80,212,56],[182,81,212,57],[182,82,212,58,"res"],[182,85,212,61],[182,87,212,63,"descName"],[182,95,212,71],[182,100,212,76],[183,10,213,20,"res"],[183,13,213,23],[183,14,213,24,"descName"],[183,22,213,32],[183,23,213,33],[183,26,213,36],[183,30,213,40],[183,31,213,41,"createDescriptor"],[183,47,213,57],[183,48,213,58,"syntax"],[183,54,213,64],[183,55,213,65,"descriptors"],[183,66,213,76],[183,67,213,77,"descName"],[183,75,213,85],[183,76,213,86],[183,78,213,88],[183,96,213,106],[183,98,213,108,"descName"],[183,106,213,116],[183,108,213,118,"name"],[183,112,213,122],[183,113,213,123],[184,10,214,20],[184,17,214,27,"res"],[184,20,214,30],[185,8,215,16],[185,9,215,17],[185,11,215,19],[185,12,215,20],[185,13,215,21],[185,14,215,22],[185,17,216,18],[186,6,217,8],[186,7,217,9],[187,4,218,4],[187,5,218,5],[188,4,219,4,"addProperty_"],[188,16,219,16],[188,18,219,18],[188,27,219,18,"addProperty_"],[188,28,219,27,"name"],[188,32,219,31],[188,34,219,33,"syntax"],[188,40,219,39],[188,42,219,41],[189,6,220,8],[189,10,220,12],[189,11,220,13,"syntax"],[189,17,220,19],[189,19,220,21],[190,8,221,12],[191,6,222,8],[192,6,224,8],[192,10,224,12],[192,11,224,13,"properties"],[192,21,224,23],[192,22,224,24,"name"],[192,26,224,28],[192,27,224,29],[192,30,224,32],[192,34,224,36],[192,35,224,37,"createDescriptor"],[192,51,224,53],[192,52,224,54,"syntax"],[192,58,224,60],[192,60,224,62],[192,70,224,72],[192,72,224,74,"name"],[192,76,224,78],[192,77,224,79],[193,4,225,4],[193,5,225,5],[194,4,226,4,"addType_"],[194,12,226,12],[194,14,226,14],[194,23,226,14,"addType_"],[194,24,226,23,"name"],[194,28,226,27],[194,30,226,29,"syntax"],[194,36,226,35],[194,38,226,37],[195,6,227,8],[195,10,227,12],[195,11,227,13,"syntax"],[195,17,227,19],[195,19,227,21],[196,8,228,12],[197,6,229,8],[198,6,231,8],[198,10,231,12],[198,11,231,13,"types"],[198,16,231,18],[198,17,231,19,"name"],[198,21,231,23],[198,22,231,24],[198,25,231,27],[198,29,231,31],[198,30,231,32,"createDescriptor"],[198,46,231,48],[198,47,231,49,"syntax"],[198,53,231,55],[198,55,231,57],[198,61,231,63],[198,63,231,65,"name"],[198,67,231,69],[198,68,231,70],[199,6,233,8],[199,10,233,12,"syntax"],[199,16,233,18],[199,21,233,23,"generic"],[199,28,233,30],[199,29,233,31],[199,52,233,54],[199,53,233,55],[199,55,233,57],[200,8,234,12],[200,12,234,16],[200,13,234,17,"valueCommonSyntax"],[200,30,234,34],[200,33,234,37,"cssWideKeywordsWithExpression"],[200,62,234,66],[201,6,235,8],[202,4,236,4],[202,5,236,5],[203,4,238,4,"checkAtruleName"],[203,19,238,19],[203,21,238,21],[203,30,238,21,"checkAtruleName"],[203,31,238,30,"atruleName"],[203,41,238,40],[203,43,238,42],[204,6,239,8],[204,10,239,12],[204,11,239,13],[204,15,239,17],[204,16,239,18,"getAtrule"],[204,25,239,27],[204,26,239,28,"atruleName"],[204,36,239,38],[204,37,239,39],[204,39,239,41],[205,8,240,12],[205,15,240,19],[205,19,240,23,"SyntaxReferenceError"],[205,39,240,43],[205,40,240,44],[205,57,240,61],[205,59,240,63],[205,62,240,66],[205,65,240,69,"atruleName"],[205,75,240,79],[205,76,240,80],[206,6,241,8],[207,4,242,4],[207,5,242,5],[208,4,243,4,"checkAtrulePrelude"],[208,22,243,22],[208,24,243,24],[208,33,243,24,"checkAtrulePrelude"],[208,34,243,33,"atruleName"],[208,44,243,43],[208,46,243,45,"prelude"],[208,53,243,52],[208,55,243,54],[209,6,244,8],[209,10,244,12,"error"],[209,15,244,17],[209,18,244,20],[209,22,244,24],[209,23,244,25,"checkAtruleName"],[209,38,244,40],[209,39,244,41,"atruleName"],[209,49,244,51],[209,50,244,52],[210,6,246,8],[210,10,246,12,"error"],[210,15,246,17],[210,17,246,19],[211,8,247,12],[211,15,247,19,"error"],[211,20,247,24],[212,6,248,8],[213,6,250,8],[213,10,250,12,"atrule"],[213,16,250,18],[213,19,250,21],[213,23,250,25],[213,24,250,26,"getAtrule"],[213,33,250,35],[213,34,250,36,"atruleName"],[213,44,250,46],[213,45,250,47],[214,6,252,8],[214,10,252,12],[214,11,252,13,"atrule"],[214,17,252,19],[214,18,252,20,"prelude"],[214,25,252,27],[214,29,252,31,"prelude"],[214,36,252,38],[214,38,252,40],[215,8,253,12],[215,15,253,19],[215,19,253,23,"SyntaxError"],[215,30,253,34],[215,31,253,35],[215,43,253,47],[215,46,253,50,"atruleName"],[215,56,253,60],[215,59,253,63],[215,91,253,95],[215,92,253,96],[216,6,254,8],[217,6,256,8],[217,10,256,12,"atrule"],[217,16,256,18],[217,17,256,19,"prelude"],[217,24,256,26],[217,28,256,30],[217,29,256,31,"prelude"],[217,36,256,38],[217,38,256,40],[218,8,257,12],[218,15,257,19],[218,19,257,23,"SyntaxError"],[218,30,257,34],[218,31,257,35],[218,43,257,47],[218,46,257,50,"atruleName"],[218,56,257,60],[218,59,257,63],[218,87,257,91],[218,88,257,92],[219,6,258,8],[220,4,259,4],[220,5,259,5],[221,4,260,4,"checkAtruleDescriptorName"],[221,29,260,29],[221,31,260,31],[221,40,260,31,"checkAtruleDescriptorName"],[221,41,260,40,"atruleName"],[221,51,260,50],[221,53,260,52,"descriptorName"],[221,67,260,66],[221,69,260,68],[222,6,261,8],[222,10,261,12,"error"],[222,15,261,17],[222,18,261,20],[222,22,261,24],[222,23,261,25,"checkAtruleName"],[222,38,261,40],[222,39,261,41,"atruleName"],[222,49,261,51],[222,50,261,52],[223,6,263,8],[223,10,263,12,"error"],[223,15,263,17],[223,17,263,19],[224,8,264,12],[224,15,264,19,"error"],[224,20,264,24],[225,6,265,8],[226,6,267,8],[226,10,267,12,"atrule"],[226,16,267,18],[226,19,267,21],[226,23,267,25],[226,24,267,26,"getAtrule"],[226,33,267,35],[226,34,267,36,"atruleName"],[226,44,267,46],[226,45,267,47],[227,6,268,8],[227,10,268,12,"descriptor"],[227,20,268,22],[227,23,268,25,"names"],[227,28,268,30],[227,29,268,31,"keyword"],[227,36,268,38],[227,37,268,39,"descriptorName"],[227,51,268,53],[227,52,268,54],[228,6,270,8],[228,10,270,12],[228,11,270,13,"atrule"],[228,17,270,19],[228,18,270,20,"descriptors"],[228,29,270,31],[228,31,270,33],[229,8,271,12],[229,15,271,19],[229,19,271,23,"SyntaxError"],[229,30,271,34],[229,31,271,35],[229,43,271,47],[229,46,271,50,"atruleName"],[229,56,271,60],[229,59,271,63],[229,87,271,91],[229,88,271,92],[230,6,272,8],[231,6,274,8],[231,10,274,12],[231,11,274,13,"atrule"],[231,17,274,19],[231,18,274,20,"descriptors"],[231,29,274,31],[231,30,274,32,"descriptor"],[231,40,274,42],[231,41,274,43,"name"],[231,45,274,47],[231,46,274,48],[231,50,275,12],[231,51,275,13,"atrule"],[231,57,275,19],[231,58,275,20,"descriptors"],[231,69,275,31],[231,70,275,32,"descriptor"],[231,80,275,42],[231,81,275,43,"basename"],[231,89,275,51],[231,90,275,52],[231,92,275,54],[232,8,276,12],[232,15,276,19],[232,19,276,23,"SyntaxReferenceError"],[232,39,276,43],[232,40,276,44],[232,68,276,72],[232,70,276,74,"descriptorName"],[232,84,276,88],[232,85,276,89],[233,6,277,8],[234,4,278,4],[234,5,278,5],[235,4,279,4,"checkPropertyName"],[235,21,279,21],[235,23,279,23],[235,32,279,23,"checkPropertyName"],[235,33,279,32,"propertyName"],[235,45,279,44],[235,47,279,46],[236,6,280,8],[236,10,280,12,"property"],[236,18,280,20],[236,21,280,23,"names"],[236,26,280,28],[236,27,280,29,"property"],[236,35,280,37],[236,36,280,38,"propertyName"],[236,48,280,50],[236,49,280,51],[238,6,282,8],[239,6,283,8],[239,10,283,12,"property"],[239,18,283,20],[239,19,283,21,"custom"],[239,25,283,27],[239,27,283,29],[240,8,284,12],[240,15,284,19],[240,19,284,23,"Error"],[240,24,284,28],[240,25,284,29],[240,83,284,87],[240,84,284,88],[241,6,285,8],[242,6,287,8],[242,10,287,12],[242,11,287,13],[242,15,287,17],[242,16,287,18,"getProperty"],[242,27,287,29],[242,28,287,30,"propertyName"],[242,40,287,42],[242,41,287,43],[242,43,287,45],[243,8,288,12],[243,15,288,19],[243,19,288,23,"SyntaxReferenceError"],[243,39,288,43],[243,40,288,44],[243,58,288,62],[243,60,288,64,"propertyName"],[243,72,288,76],[243,73,288,77],[244,6,289,8],[245,4,290,4],[245,5,290,5],[246,4,292,4,"matchAtrulePrelude"],[246,22,292,22],[246,24,292,24],[246,33,292,24,"matchAtrulePrelude"],[246,34,292,33,"atruleName"],[246,44,292,43],[246,46,292,45,"prelude"],[246,53,292,52],[246,55,292,54],[247,6,293,8],[247,10,293,12,"error"],[247,15,293,17],[247,18,293,20],[247,22,293,24],[247,23,293,25,"checkAtrulePrelude"],[247,41,293,43],[247,42,293,44,"atruleName"],[247,52,293,54],[247,54,293,56,"prelude"],[247,61,293,63],[247,62,293,64],[248,6,295,8],[248,10,295,12,"error"],[248,15,295,17],[248,17,295,19],[249,8,296,12],[249,15,296,19,"buildMatchResult"],[249,31,296,35],[249,32,296,36],[249,36,296,40],[249,38,296,42,"error"],[249,43,296,47],[249,44,296,48],[250,6,297,8],[251,6,299,8],[251,10,299,12],[251,11,299,13,"prelude"],[251,18,299,20],[251,20,299,22],[252,8,300,12],[252,15,300,19,"buildMatchResult"],[252,31,300,35],[252,32,300,36],[252,36,300,40],[252,38,300,42],[252,42,300,46],[252,43,300,47],[253,6,301,8],[254,6,303,8],[254,13,303,15,"matchSyntax"],[254,24,303,26],[254,25,303,27],[254,29,303,31],[254,31,303,33],[254,35,303,37],[254,36,303,38,"getAtrule"],[254,45,303,47],[254,46,303,48,"atruleName"],[254,56,303,58],[254,57,303,59],[254,58,303,60,"prelude"],[254,65,303,67],[254,67,303,69,"prelude"],[254,74,303,76],[254,76,303,78],[254,81,303,83],[254,82,303,84],[255,4,304,4],[255,5,304,5],[256,4,305,4,"matchAtruleDescriptor"],[256,25,305,25],[256,27,305,27],[256,36,305,27,"matchAtruleDescriptor"],[256,37,305,36,"atruleName"],[256,47,305,46],[256,49,305,48,"descriptorName"],[256,63,305,62],[256,65,305,64,"value"],[256,70,305,69],[256,72,305,71],[257,6,306,8],[257,10,306,12,"error"],[257,15,306,17],[257,18,306,20],[257,22,306,24],[257,23,306,25,"checkAtruleDescriptorName"],[257,48,306,50],[257,49,306,51,"atruleName"],[257,59,306,61],[257,61,306,63,"descriptorName"],[257,75,306,77],[257,76,306,78],[258,6,308,8],[258,10,308,12,"error"],[258,15,308,17],[258,17,308,19],[259,8,309,12],[259,15,309,19,"buildMatchResult"],[259,31,309,35],[259,32,309,36],[259,36,309,40],[259,38,309,42,"error"],[259,43,309,47],[259,44,309,48],[260,6,310,8],[261,6,312,8],[261,10,312,12,"atrule"],[261,16,312,18],[261,19,312,21],[261,23,312,25],[261,24,312,26,"getAtrule"],[261,33,312,35],[261,34,312,36,"atruleName"],[261,44,312,46],[261,45,312,47],[262,6,313,8],[262,10,313,12,"descriptor"],[262,20,313,22],[262,23,313,25,"names"],[262,28,313,30],[262,29,313,31,"keyword"],[262,36,313,38],[262,37,313,39,"descriptorName"],[262,51,313,53],[262,52,313,54],[263,6,315,8],[263,13,315,15,"matchSyntax"],[263,24,315,26],[263,25,315,27],[263,29,315,31],[263,31,315,33,"atrule"],[263,37,315,39],[263,38,315,40,"descriptors"],[263,49,315,51],[263,50,315,52,"descriptor"],[263,60,315,62],[263,61,315,63,"name"],[263,65,315,67],[263,66,315,68],[263,70,315,72,"atrule"],[263,76,315,78],[263,77,315,79,"descriptors"],[263,88,315,90],[263,89,315,91,"descriptor"],[263,99,315,101],[263,100,315,102,"basename"],[263,108,315,110],[263,109,315,111],[263,111,315,113,"value"],[263,116,315,118],[263,118,315,120],[263,123,315,125],[263,124,315,126],[264,4,316,4],[264,5,316,5],[265,4,317,4,"matchDeclaration"],[265,20,317,20],[265,22,317,22],[265,31,317,22,"matchDeclaration"],[265,32,317,31,"node"],[265,36,317,35],[265,38,317,37],[266,6,318,8],[266,10,318,12,"node"],[266,14,318,16],[266,15,318,17,"type"],[266,19,318,21],[266,24,318,26],[266,37,318,39],[266,39,318,41],[267,8,319,12],[267,15,319,19,"buildMatchResult"],[267,31,319,35],[267,32,319,36],[267,36,319,40],[267,38,319,42],[267,42,319,46,"Error"],[267,47,319,51],[267,48,319,52],[267,72,319,76],[267,73,319,77],[267,74,319,78],[268,6,320,8],[269,6,322,8],[269,13,322,15],[269,17,322,19],[269,18,322,20,"matchProperty"],[269,31,322,33],[269,32,322,34,"node"],[269,36,322,38],[269,37,322,39,"property"],[269,45,322,47],[269,47,322,49,"node"],[269,51,322,53],[269,52,322,54,"value"],[269,57,322,59],[269,58,322,60],[270,4,323,4],[270,5,323,5],[271,4,324,4,"matchProperty"],[271,17,324,17],[271,19,324,19],[271,28,324,19,"matchProperty"],[271,29,324,28,"propertyName"],[271,41,324,40],[271,43,324,42,"value"],[271,48,324,47],[271,50,324,49],[272,6,325,8],[272,10,325,12,"error"],[272,15,325,17],[272,18,325,20],[272,22,325,24],[272,23,325,25,"checkPropertyName"],[272,40,325,42],[272,41,325,43,"propertyName"],[272,53,325,55],[272,54,325,56],[273,6,327,8],[273,10,327,12,"error"],[273,15,327,17],[273,17,327,19],[274,8,328,12],[274,15,328,19,"buildMatchResult"],[274,31,328,35],[274,32,328,36],[274,36,328,40],[274,38,328,42,"error"],[274,43,328,47],[274,44,328,48],[275,6,329,8],[276,6,331,8],[276,13,331,15,"matchSyntax"],[276,24,331,26],[276,25,331,27],[276,29,331,31],[276,31,331,33],[276,35,331,37],[276,36,331,38,"getProperty"],[276,47,331,49],[276,48,331,50,"propertyName"],[276,60,331,62],[276,61,331,63],[276,63,331,65,"value"],[276,68,331,70],[276,70,331,72],[276,74,331,76],[276,75,331,77],[277,4,332,4],[277,5,332,5],[278,4,333,4,"matchType"],[278,13,333,13],[278,15,333,15],[278,24,333,15,"matchType"],[278,25,333,24,"typeName"],[278,33,333,32],[278,35,333,34,"value"],[278,40,333,39],[278,42,333,41],[279,6,334,8],[279,10,334,12,"typeSyntax"],[279,20,334,22],[279,23,334,25],[279,27,334,29],[279,28,334,30,"getType"],[279,35,334,37],[279,36,334,38,"typeName"],[279,44,334,46],[279,45,334,47],[280,6,336,8],[280,10,336,12],[280,11,336,13,"typeSyntax"],[280,21,336,23],[280,23,336,25],[281,8,337,12],[281,15,337,19,"buildMatchResult"],[281,31,337,35],[281,32,337,36],[281,36,337,40],[281,38,337,42],[281,42,337,46,"SyntaxReferenceError"],[281,62,337,66],[281,63,337,67],[281,77,337,81],[281,79,337,83,"typeName"],[281,87,337,91],[281,88,337,92],[281,89,337,93],[282,6,338,8],[283,6,340,8],[283,13,340,15,"matchSyntax"],[283,24,340,26],[283,25,340,27],[283,29,340,31],[283,31,340,33,"typeSyntax"],[283,41,340,43],[283,43,340,45,"value"],[283,48,340,50],[283,50,340,52],[283,55,340,57],[283,56,340,58],[284,4,341,4],[284,5,341,5],[285,4,342,4,"match"],[285,9,342,9],[285,11,342,11],[285,20,342,11,"match"],[285,21,342,20,"syntax"],[285,27,342,26],[285,29,342,28,"value"],[285,34,342,33],[285,36,342,35],[286,6,343,8],[286,10,343,12],[286,17,343,19,"syntax"],[286,23,343,25],[286,28,343,30],[286,36,343,38],[286,41,343,43],[286,42,343,44,"syntax"],[286,48,343,50],[286,52,343,54],[286,53,343,55,"syntax"],[286,59,343,61],[286,60,343,62,"type"],[286,64,343,66],[286,65,343,67],[286,67,343,69],[287,8,344,12],[287,15,344,19,"buildMatchResult"],[287,31,344,35],[287,32,344,36],[287,36,344,40],[287,38,344,42],[287,42,344,46,"SyntaxReferenceError"],[287,62,344,66],[287,63,344,67],[287,75,344,79],[287,76,344,80],[287,77,344,81],[288,6,345,8],[289,6,347,8],[289,10,347,12],[289,17,347,19,"syntax"],[289,23,347,25],[289,28,347,30],[289,36,347,38],[289,40,347,42],[289,41,347,43,"syntax"],[289,47,347,49],[289,48,347,50,"match"],[289,53,347,55],[289,55,347,57],[290,8,348,12,"syntax"],[290,14,348,18],[290,17,348,21],[290,21,348,25],[290,22,348,26,"createDescriptor"],[290,38,348,42],[290,39,348,43,"syntax"],[290,45,348,49],[290,47,348,51],[290,53,348,57],[290,55,348,59],[290,66,348,70],[290,67,348,71],[291,6,349,8],[292,6,351,8],[292,13,351,15,"matchSyntax"],[292,24,351,26],[292,25,351,27],[292,29,351,31],[292,31,351,33,"syntax"],[292,37,351,39],[292,39,351,41,"value"],[292,44,351,46],[292,46,351,48],[292,51,351,53],[292,52,351,54],[293,4,352,4],[293,5,352,5],[294,4,354,4,"findValueFragments"],[294,22,354,22],[294,24,354,24],[294,33,354,24,"findValueFragments"],[294,34,354,33,"propertyName"],[294,46,354,45],[294,48,354,47,"value"],[294,53,354,52],[294,55,354,54,"type"],[294,59,354,58],[294,61,354,60,"name"],[294,65,354,64],[294,67,354,66],[295,6,355,8],[295,13,355,15,"search"],[295,19,355,21],[295,20,355,22,"matchFragments"],[295,34,355,36],[295,35,355,37],[295,39,355,41],[295,41,355,43,"value"],[295,46,355,48],[295,48,355,50],[295,52,355,54],[295,53,355,55,"matchProperty"],[295,66,355,68],[295,67,355,69,"propertyName"],[295,79,355,81],[295,81,355,83,"value"],[295,86,355,88],[295,87,355,89],[295,89,355,91,"type"],[295,93,355,95],[295,95,355,97,"name"],[295,99,355,101],[295,100,355,102],[296,4,356,4],[296,5,356,5],[297,4,357,4,"findDeclarationValueFragments"],[297,33,357,33],[297,35,357,35],[297,44,357,35,"findDeclarationValueFragments"],[297,45,357,44,"declaration"],[297,56,357,55],[297,58,357,57,"type"],[297,62,357,61],[297,64,357,63,"name"],[297,68,357,67],[297,70,357,69],[298,6,358,8],[298,13,358,15,"search"],[298,19,358,21],[298,20,358,22,"matchFragments"],[298,34,358,36],[298,35,358,37],[298,39,358,41],[298,41,358,43,"declaration"],[298,52,358,54],[298,53,358,55,"value"],[298,58,358,60],[298,60,358,62],[298,64,358,66],[298,65,358,67,"matchDeclaration"],[298,81,358,83],[298,82,358,84,"declaration"],[298,93,358,95],[298,94,358,96],[298,96,358,98,"type"],[298,100,358,102],[298,102,358,104,"name"],[298,106,358,108],[298,107,358,109],[299,4,359,4],[299,5,359,5],[300,4,360,4,"findAllFragments"],[300,20,360,20],[300,22,360,22],[300,31,360,22,"findAllFragments"],[300,32,360,31,"ast"],[300,35,360,34],[300,37,360,36,"type"],[300,41,360,40],[300,43,360,42,"name"],[300,47,360,46],[300,49,360,48],[301,6,361,8],[301,10,361,12,"result"],[301,16,361,18],[301,19,361,21],[301,21,361,23],[302,6,363,8],[302,10,363,12],[302,11,363,13,"syntax"],[302,17,363,19],[302,18,363,20,"walk"],[302,22,363,24],[302,23,363,25,"ast"],[302,26,363,28],[302,28,363,30],[303,8,364,12,"visit"],[303,13,364,17],[303,15,364,19],[303,28,364,32],[304,8,365,12,"enter"],[304,13,365,17],[304,15,365,19],[304,25,365,28,"declaration"],[304,36,365,39],[304,38,365,41],[305,10,366,16,"result"],[305,16,366,22],[305,17,366,23,"push"],[305,21,366,27],[305,22,366,28,"apply"],[305,27,366,33],[305,28,366,34,"result"],[305,34,366,40],[305,36,366,42],[305,40,366,46],[305,41,366,47,"findDeclarationValueFragments"],[305,70,366,76],[305,71,366,77,"declaration"],[305,82,366,88],[305,84,366,90,"type"],[305,88,366,94],[305,90,366,96,"name"],[305,94,366,100],[305,95,366,101],[305,96,366,102],[306,8,367,12],[306,9,367,13],[306,10,367,14,"bind"],[306,14,367,18],[306,15,367,19],[306,19,367,23],[307,6,368,8],[307,7,368,9],[307,8,368,10],[308,6,370,8],[308,13,370,15,"result"],[308,19,370,21],[309,4,371,4],[309,5,371,5],[310,4,373,4,"getAtrule"],[310,13,373,13],[310,15,373,15],[310,24,373,15,"getAtrule"],[310,25,373,24,"atruleName"],[310,35,373,34],[310,37,373,61],[311,6,373,61],[311,10,373,36,"fallbackBasename"],[311,26,373,52],[311,29,373,52,"arguments"],[311,38,373,52],[311,39,373,52,"length"],[311,45,373,52],[311,53,373,52,"arguments"],[311,62,373,52],[311,70,373,52,"undefined"],[311,79,373,52],[311,82,373,52,"arguments"],[311,91,373,52],[311,97,373,55],[311,101,373,59],[312,6,374,8],[312,10,374,12,"atrule"],[312,16,374,18],[312,19,374,21,"names"],[312,24,374,26],[312,25,374,27,"keyword"],[312,32,374,34],[312,33,374,35,"atruleName"],[312,43,374,45],[312,44,374,46],[313,6,375,8],[313,10,375,12,"atruleEntry"],[313,21,375,23],[313,24,375,26,"atrule"],[313,30,375,32],[313,31,375,33,"vendor"],[313,37,375,39],[313,41,375,43,"fallbackBasename"],[313,57,375,59],[313,60,376,14],[313,64,376,18],[313,65,376,19,"atrules"],[313,72,376,26],[313,73,376,27,"atrule"],[313,79,376,33],[313,80,376,34,"name"],[313,84,376,38],[313,85,376,39],[313,89,376,43],[313,93,376,47],[313,94,376,48,"atrules"],[313,101,376,55],[313,102,376,56,"atrule"],[313,108,376,62],[313,109,376,63,"basename"],[313,117,376,71],[313,118,376,72],[313,121,377,14],[313,125,377,18],[313,126,377,19,"atrules"],[313,133,377,26],[313,134,377,27,"atrule"],[313,140,377,33],[313,141,377,34,"name"],[313,145,377,38],[313,146,377,39],[314,6,379,8],[314,13,379,15,"atruleEntry"],[314,24,379,26],[314,28,379,30],[314,32,379,34],[315,4,380,4],[315,5,380,5],[316,4,381,4,"getAtrulePrelude"],[316,20,381,20],[316,22,381,22],[316,31,381,22,"getAtrulePrelude"],[316,32,381,31,"atruleName"],[316,42,381,41],[316,44,381,68],[317,6,381,68],[317,10,381,43,"fallbackBasename"],[317,26,381,59],[317,29,381,59,"arguments"],[317,38,381,59],[317,39,381,59,"length"],[317,45,381,59],[317,53,381,59,"arguments"],[317,62,381,59],[317,70,381,59,"undefined"],[317,79,381,59],[317,82,381,59,"arguments"],[317,91,381,59],[317,97,381,62],[317,101,381,66],[318,6,382,8],[318,10,382,14,"atrule"],[318,16,382,20],[318,19,382,23],[318,23,382,27],[318,24,382,28,"getAtrule"],[318,33,382,37],[318,34,382,38,"atruleName"],[318,44,382,48],[318,46,382,50,"fallbackBasename"],[318,62,382,66],[318,63,382,67],[319,6,384,8],[319,13,384,15,"atrule"],[319,19,384,21],[319,23,384,25,"atrule"],[319,29,384,31],[319,30,384,32,"prelude"],[319,37,384,39],[319,41,384,43],[319,45,384,47],[320,4,385,4],[320,5,385,5],[321,4,386,4,"getAtruleDescriptor"],[321,23,386,23],[321,25,386,25],[321,34,386,25,"getAtruleDescriptor"],[321,35,386,34,"atruleName"],[321,45,386,44],[321,47,386,46,"name"],[321,51,386,50],[321,53,386,52],[322,6,387,8],[322,13,387,15],[322,17,387,19],[322,18,387,20,"atrules"],[322,25,387,27],[322,26,387,28,"hasOwnProperty"],[322,40,387,42],[322,41,387,43,"atruleName"],[322,51,387,53],[322,52,387,54],[322,56,387,58],[322,60,387,62],[322,61,387,63,"atrules"],[322,68,387,70],[322,69,387,71,"declarators"],[322,80,387,82],[322,83,388,14],[322,87,388,18],[322,88,388,19,"atrules"],[322,95,388,26],[322,96,388,27,"atruleName"],[322,106,388,37],[322,107,388,38],[322,108,388,39,"declarators"],[322,119,388,50],[322,120,388,51,"name"],[322,124,388,55],[322,125,388,56],[322,129,388,60],[322,133,388,64],[322,136,389,14],[322,140,389,18],[323,4,390,4],[323,5,390,5],[324,4,391,4,"getProperty"],[324,15,391,15],[324,17,391,17],[324,26,391,17,"getProperty"],[324,27,391,26,"propertyName"],[324,39,391,38],[324,41,391,65],[325,6,391,65],[325,10,391,40,"fallbackBasename"],[325,26,391,56],[325,29,391,56,"arguments"],[325,38,391,56],[325,39,391,56,"length"],[325,45,391,56],[325,53,391,56,"arguments"],[325,62,391,56],[325,70,391,56,"undefined"],[325,79,391,56],[325,82,391,56,"arguments"],[325,91,391,56],[325,97,391,59],[325,101,391,63],[326,6,392,8],[326,10,392,12,"property"],[326,18,392,20],[326,21,392,23,"names"],[326,26,392,28],[326,27,392,29,"property"],[326,35,392,37],[326,36,392,38,"propertyName"],[326,48,392,50],[326,49,392,51],[327,6,393,8],[327,10,393,12,"propertyEntry"],[327,23,393,25],[327,26,393,28,"property"],[327,34,393,36],[327,35,393,37,"vendor"],[327,41,393,43],[327,45,393,47,"fallbackBasename"],[327,61,393,63],[327,64,394,14],[327,68,394,18],[327,69,394,19,"properties"],[327,79,394,29],[327,80,394,30,"property"],[327,88,394,38],[327,89,394,39,"name"],[327,93,394,43],[327,94,394,44],[327,98,394,48],[327,102,394,52],[327,103,394,53,"properties"],[327,113,394,63],[327,114,394,64,"property"],[327,122,394,72],[327,123,394,73,"basename"],[327,131,394,81],[327,132,394,82],[327,135,395,14],[327,139,395,18],[327,140,395,19,"properties"],[327,150,395,29],[327,151,395,30,"property"],[327,159,395,38],[327,160,395,39,"name"],[327,164,395,43],[327,165,395,44],[328,6,397,8],[328,13,397,15,"propertyEntry"],[328,26,397,28],[328,30,397,32],[328,34,397,36],[329,4,398,4],[329,5,398,5],[330,4,399,4,"getType"],[330,11,399,11],[330,13,399,13],[330,22,399,13,"getType"],[330,23,399,22,"name"],[330,27,399,26],[330,29,399,28],[331,6,400,8],[331,13,400,15],[331,17,400,19],[331,18,400,20,"types"],[331,23,400,25],[331,24,400,26,"hasOwnProperty"],[331,38,400,40],[331,39,400,41,"name"],[331,43,400,45],[331,44,400,46],[331,47,400,49],[331,51,400,53],[331,52,400,54,"types"],[331,57,400,59],[331,58,400,60,"name"],[331,62,400,64],[331,63,400,65],[331,66,400,68],[331,70,400,72],[332,4,401,4],[332,5,401,5],[333,4,403,4,"validate"],[333,12,403,12],[333,14,403,14],[333,23,403,14,"validate"],[333,24,403,14],[333,26,403,25],[334,6,404,8],[334,15,404,17,"validate"],[334,23,404,25,"validate"],[334,24,404,26,"syntax"],[334,30,404,32],[334,32,404,34,"name"],[334,36,404,38],[334,38,404,40,"broken"],[334,44,404,46],[334,46,404,48,"descriptor"],[334,56,404,58],[334,58,404,60],[335,8,405,12],[335,12,405,16,"broken"],[335,18,405,22],[335,19,405,23,"hasOwnProperty"],[335,33,405,37],[335,34,405,38,"name"],[335,38,405,42],[335,39,405,43],[335,41,405,45],[336,10,406,16],[336,17,406,23,"broken"],[336,23,406,29],[336,24,406,30,"name"],[336,28,406,34],[336,29,406,35],[337,8,407,12],[338,8,409,12,"broken"],[338,14,409,18],[338,15,409,19,"name"],[338,19,409,23],[338,20,409,24],[338,23,409,27],[338,28,409,32],[339,8,410,12],[339,12,410,16,"descriptor"],[339,22,410,26],[339,23,410,27,"syntax"],[339,29,410,33],[339,34,410,38],[339,38,410,42],[339,40,410,44],[340,10,411,16,"walk"],[340,14,411,20],[340,15,411,21,"descriptor"],[340,25,411,31],[340,26,411,32,"syntax"],[340,32,411,38],[340,34,411,40],[340,44,411,49,"node"],[340,48,411,53],[340,50,411,55],[341,12,412,20],[341,16,412,24,"node"],[341,20,412,28],[341,21,412,29,"type"],[341,25,412,33],[341,30,412,38],[341,36,412,44],[341,40,412,48,"node"],[341,44,412,52],[341,45,412,53,"type"],[341,49,412,57],[341,54,412,62],[341,64,412,72],[341,66,412,74],[342,14,413,24],[343,12,414,20],[344,12,416,20],[344,16,416,24,"map"],[344,19,416,27],[344,22,416,30,"node"],[344,26,416,34],[344,27,416,35,"type"],[344,31,416,39],[344,36,416,44],[344,42,416,50],[344,45,416,53,"syntax"],[344,51,416,59],[344,52,416,60,"types"],[344,57,416,65],[344,60,416,68,"syntax"],[344,66,416,74],[344,67,416,75,"properties"],[344,77,416,85],[345,12,417,20],[345,16,417,24,"brokenMap"],[345,25,417,33],[345,28,417,36,"node"],[345,32,417,40],[345,33,417,41,"type"],[345,37,417,45],[345,42,417,50],[345,48,417,56],[345,51,417,59,"brokenTypes"],[345,62,417,70],[345,65,417,73,"brokenProperties"],[345,81,417,89],[346,12,419,20],[346,16,419,24],[346,17,419,25,"map"],[346,20,419,28],[346,21,419,29,"hasOwnProperty"],[346,35,419,43],[346,36,419,44,"node"],[346,40,419,48],[346,41,419,49,"name"],[346,45,419,53],[346,46,419,54],[346,50,419,58,"validate"],[346,58,419,66],[346,59,419,67,"syntax"],[346,65,419,73],[346,67,419,75,"node"],[346,71,419,79],[346,72,419,80,"name"],[346,76,419,84],[346,78,419,86,"brokenMap"],[346,87,419,95],[346,89,419,97,"map"],[346,92,419,100],[346,93,419,101,"node"],[346,97,419,105],[346,98,419,106,"name"],[346,102,419,110],[346,103,419,111],[346,104,419,112],[346,106,419,114],[347,14,420,24,"broken"],[347,20,420,30],[347,21,420,31,"name"],[347,25,420,35],[347,26,420,36],[347,29,420,39],[347,33,420,43],[348,12,421,20],[349,10,422,16],[349,11,422,17],[349,13,422,19],[349,17,422,23],[349,18,422,24],[350,8,423,12],[351,6,424,8],[352,6,426,8],[352,10,426,12,"brokenTypes"],[352,21,426,23],[352,24,426,26],[352,25,426,27],[352,26,426,28],[353,6,427,8],[353,10,427,12,"brokenProperties"],[353,26,427,28],[353,29,427,31],[353,30,427,32],[353,31,427,33],[354,6,429,8],[354,11,429,13],[354,15,429,17,"key"],[354,18,429,20],[354,22,429,24],[354,26,429,28],[354,27,429,29,"types"],[354,32,429,34],[354,34,429,36],[355,8,430,12,"validate"],[355,16,430,20],[355,17,430,21],[355,21,430,25],[355,23,430,27,"key"],[355,26,430,30],[355,28,430,32,"brokenTypes"],[355,39,430,43],[355,41,430,45],[355,45,430,49],[355,46,430,50,"types"],[355,51,430,55],[355,52,430,56,"key"],[355,55,430,59],[355,56,430,60],[355,57,430,61],[356,6,431,8],[357,6,433,8],[357,11,433,13],[357,15,433,17,"key"],[357,18,433,20],[357,22,433,24],[357,26,433,28],[357,27,433,29,"properties"],[357,37,433,39],[357,39,433,41],[358,8,434,12,"validate"],[358,16,434,20],[358,17,434,21],[358,21,434,25],[358,23,434,27,"key"],[358,26,434,30],[358,28,434,32,"brokenProperties"],[358,44,434,48],[358,46,434,50],[358,50,434,54],[358,51,434,55,"properties"],[358,61,434,65],[358,62,434,66,"key"],[358,65,434,69],[358,66,434,70],[358,67,434,71],[359,6,435,8],[360,6,437,8,"brokenTypes"],[360,17,437,19],[360,20,437,22,"Object"],[360,26,437,28],[360,27,437,29,"keys"],[360,31,437,33],[360,32,437,34,"brokenTypes"],[360,43,437,45],[360,44,437,46],[360,45,437,47,"filter"],[360,51,437,53],[360,52,437,54],[360,62,437,63,"name"],[360,66,437,67],[360,68,437,69],[361,8,438,12],[361,15,438,19,"brokenTypes"],[361,26,438,30],[361,27,438,31,"name"],[361,31,438,35],[361,32,438,36],[362,6,439,8],[362,7,439,9],[362,8,439,10],[363,6,440,8,"brokenProperties"],[363,22,440,24],[363,25,440,27,"Object"],[363,31,440,33],[363,32,440,34,"keys"],[363,36,440,38],[363,37,440,39,"brokenProperties"],[363,53,440,55],[363,54,440,56],[363,55,440,57,"filter"],[363,61,440,63],[363,62,440,64],[363,72,440,73,"name"],[363,76,440,77],[363,78,440,79],[364,8,441,12],[364,15,441,19,"brokenProperties"],[364,31,441,35],[364,32,441,36,"name"],[364,36,441,40],[364,37,441,41],[365,6,442,8],[365,7,442,9],[365,8,442,10],[366,6,444,8],[366,10,444,12,"brokenTypes"],[366,21,444,23],[366,22,444,24,"length"],[366,28,444,30],[366,32,444,34,"brokenProperties"],[366,48,444,50],[366,49,444,51,"length"],[366,55,444,57],[366,57,444,59],[367,8,445,12],[367,15,445,19],[368,10,446,16,"types"],[368,15,446,21],[368,17,446,23,"brokenTypes"],[368,28,446,34],[369,10,447,16,"properties"],[369,20,447,26],[369,22,447,28,"brokenProperties"],[370,8,448,12],[370,9,448,13],[371,6,449,8],[372,6,451,8],[372,13,451,15],[372,17,451,19],[373,4,452,4],[373,5,452,5],[374,4,453,4,"dump"],[374,8,453,8],[374,10,453,10],[374,19,453,10,"dump"],[374,20,453,19,"syntaxAsAst"],[374,31,453,30],[374,33,453,32,"pretty"],[374,39,453,38],[374,41,453,40],[375,6,454,8],[375,13,454,15],[376,8,455,12,"generic"],[376,15,455,19],[376,17,455,21],[376,21,455,25],[376,22,455,26,"generic"],[376,29,455,33],[377,8,456,12,"types"],[377,13,456,17],[377,15,456,19,"dumpMapSyntax"],[377,28,456,32],[377,29,456,33],[377,33,456,37],[377,34,456,38,"types"],[377,39,456,43],[377,41,456,45],[377,42,456,46,"pretty"],[377,48,456,52],[377,50,456,54,"syntaxAsAst"],[377,61,456,65],[377,62,456,66],[378,8,457,12,"properties"],[378,18,457,22],[378,20,457,24,"dumpMapSyntax"],[378,33,457,37],[378,34,457,38],[378,38,457,42],[378,39,457,43,"properties"],[378,49,457,53],[378,51,457,55],[378,52,457,56,"pretty"],[378,58,457,62],[378,60,457,64,"syntaxAsAst"],[378,71,457,75],[378,72,457,76],[379,8,458,12,"atrules"],[379,15,458,19],[379,17,458,21,"dumpAtruleMapSyntax"],[379,36,458,40],[379,37,458,41],[379,41,458,45],[379,42,458,46,"atrules"],[379,49,458,53],[379,51,458,55],[379,52,458,56,"pretty"],[379,58,458,62],[379,60,458,64,"syntaxAsAst"],[379,71,458,75],[380,6,459,8],[380,7,459,9],[381,4,460,4],[381,5,460,5],[382,4,461,4,"toString"],[382,12,461,12],[382,14,461,14],[382,23,461,14,"toString"],[382,24,461,14],[382,26,461,25],[383,6,462,8],[383,13,462,15,"JSON"],[383,17,462,19],[383,18,462,20,"stringify"],[383,27,462,29],[383,28,462,30],[383,32,462,34],[383,33,462,35,"dump"],[383,37,462,39],[383,38,462,40],[383,39,462,41],[383,40,462,42],[384,4,463,4],[385,2,464,0],[385,3,464,1],[386,2,466,0,"module"],[386,8,466,6],[386,9,466,7,"exports"],[386,16,466,14],[386,19,466,17,"Lexer"],[386,24,466,22],[387,0,466,23],[387,3]],"functionMap":{"names":["<global>","dumpMapSyntax","dumpAtruleMapSyntax","valueHasVar","buildMatchResult","matchSyntax","Lexer","prototype.checkStructure","collectWarning","syntax.walk$argument_1","prototype.createDescriptor","Object.defineProperty$argument_2.get","prototype.addAtrule_","Object.keys.reduce$argument_0","prototype.addProperty_","prototype.addType_","prototype.checkAtruleName","prototype.checkAtrulePrelude","prototype.checkAtruleDescriptorName","prototype.checkPropertyName","prototype.matchAtrulePrelude","prototype.matchAtruleDescriptor","prototype.matchDeclaration","prototype.matchProperty","prototype.matchType","prototype.match","prototype.findValueFragments","prototype.findDeclarationValueFragments","prototype.findAllFragments","<anonymous>","prototype.getAtrule","prototype.getAtrulePrelude","prototype.getAtruleDescriptor","prototype.getProperty","prototype.getType","prototype.validate","validate","walk$argument_1","Object.keys.filter$argument_0","prototype.dump","prototype.toString"],"mappings":"AAA;ACgB;CDY;AEE;CFe;AGE;CHQ;AIE;CJU;AKE;CLwB;YME;CNmC;oBOI;QCC;SDK;8BEK;SFM;KPG;sBUE;yBCmB;qBDM;qBCQ;iBDM;KVK;gBYC;yDCU;iBDG;KZG;kBcC;KdM;ceC;KfU;qBgBE;KhBI;wBiBC;KjBgB;+BkBC;KlBkB;uBmBC;KnBW;wBoBE;KpBY;2BqBC;KrBW;sBsBC;KtBM;mBuBC;KvBQ;ewBC;KxBQ;WyBC;KzBU;wB0BE;K1BE;mC2BC;K3BE;sB4BC;mBCK;aDE;K5BI;e8BE;K9BO;sB+BC;K/BI;yBgCC;KhCI;iBiCC;KjCO;akCC;KlCE;cmCE;QCC;wCCO;iBDW;SDE;sDGa;SHE;gEGC;SHE;KnCU;UuCC;KvCO;cwCC;KxCE"},"hasCjsExports":true},"type":"js/module"}]}