{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./generated/decode-data-html.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"k3q3h8lJLE1ntwyGrt8hb4Lh0s4=","exportNames":["*"],"imports":1}},{"name":"./generated/decode-data-xml.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":62},"end":{"line":2,"column":59,"index":121}}],"key":"7IkRXU+8yUCkhlmiPWlh7Tfa5Qs=","exportNames":["*"],"imports":1}},{"name":"./decode_codepoint.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":122},"end":{"line":3,"column":90,"index":212}}],"key":"hNbL9TtzGXSHKeJEOAkzIW+3P7o=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"replaceCodePoint\", {\n    enumerable: true,\n    get: function () {\n      return _decode_codepointJs.replaceCodePoint;\n    }\n  });\n  Object.defineProperty(exports, \"fromCodePoint\", {\n    enumerable: true,\n    get: function () {\n      return _decode_codepointJs.fromCodePoint;\n    }\n  });\n  Object.defineProperty(exports, \"htmlDecodeTree\", {\n    enumerable: true,\n    get: function () {\n      return htmlDecodeTree.default;\n    }\n  });\n  Object.defineProperty(exports, \"xmlDecodeTree\", {\n    enumerable: true,\n    get: function () {\n      return xmlDecodeTree.default;\n    }\n  });\n  Object.defineProperty(exports, \"decodeCodePoint\", {\n    enumerable: true,\n    get: function () {\n      return decodeCodePoint.default;\n    }\n  });\n  Object.defineProperty(exports, \"BinTrieFlags\", {\n    enumerable: true,\n    get: function () {\n      return BinTrieFlags;\n    }\n  });\n  Object.defineProperty(exports, \"DecodingMode\", {\n    enumerable: true,\n    get: function () {\n      return DecodingMode;\n    }\n  });\n  Object.defineProperty(exports, \"EntityDecoder\", {\n    enumerable: true,\n    get: function () {\n      return EntityDecoder;\n    }\n  });\n  exports.determineBranch = determineBranch;\n  exports.decodeHTML = decodeHTML;\n  exports.decodeHTMLAttribute = decodeHTMLAttribute;\n  exports.decodeHTMLStrict = decodeHTMLStrict;\n  exports.decodeXML = decodeXML;\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _generatedDecodeDataHtmlJs = require(_dependencyMap[2], \"./generated/decode-data-html.js\");\n  var htmlDecodeTree = _interopDefault(_generatedDecodeDataHtmlJs);\n  var _generatedDecodeDataXmlJs = require(_dependencyMap[3], \"./generated/decode-data-xml.js\");\n  var xmlDecodeTree = _interopDefault(_generatedDecodeDataXmlJs);\n  var _decode_codepointJs = require(_dependencyMap[4], \"./decode_codepoint.js\");\n  var decodeCodePoint = _interopDefault(_decode_codepointJs);\n  // Re-export for use by eg. htmlparser2\n\n  var CharCodes;\n  (function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n  })(CharCodes || (CharCodes = {}));\n  /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n  var TO_LOWER_BIT = 0b100000;\n  var BinTrieFlags;\n  (function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n  })(BinTrieFlags || (BinTrieFlags = {}));\n  function isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n  }\n  function isHexadecimalCharacter(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n  }\n  function isAsciiAlphaNumeric(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n  }\n  /**\n   * Checks if the given character is a valid end character for an entity in an attribute.\n   *\n   * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n   * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n   */\n  function isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n  }\n  var EntityDecoderState;\n  (function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n  })(EntityDecoderState || (EntityDecoderState = {}));\n  var DecodingMode;\n  (function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n  })(DecodingMode || (DecodingMode = {}));\n  /**\n   * Token decoder with support of writing partial entities.\n   */\n  var EntityDecoder = /*#__PURE__*/function () {\n    function EntityDecoder(/** The tree used to decode entities. */\n    decodeTree,\n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, /** An object that is used to produce errors. */\n    errors) {\n      (0, _classCallCheck.default)(this, EntityDecoder);\n      this.decodeTree = decodeTree;\n      this.emitCodePoint = emitCodePoint;\n      this.errors = errors;\n      /** The current state of the decoder. */\n      this.state = EntityDecoderState.EntityStart;\n      /** Characters that were consumed while parsing an entity. */\n      this.consumed = 1;\n      /**\n       * The result of the entity.\n       *\n       * Either the result index of a numeric entity, or the codepoint of a\n       * numeric entity.\n       */\n      this.result = 0;\n      /** The current index in the decode tree. */\n      this.treeIndex = 0;\n      /** The number of characters that were consumed in excess. */\n      this.excess = 1;\n      /** The mode in which the decoder is operating. */\n      this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    return (0, _createClass.default)(EntityDecoder, [{\n      key: \"startEntity\",\n      value: function startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n      }\n      /**\n       * Write an entity to the decoder. This can be called multiple times with partial entities.\n       * If the entity is incomplete, the decoder will return -1.\n       *\n       * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n       * entity is incomplete, and resume when the next string is written.\n       *\n       * @param string The string containing the entity (or a continuation of the entity).\n       * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"write\",\n      value: function write(str, offset) {\n        switch (this.state) {\n          case EntityDecoderState.EntityStart:\n            {\n              if (str.charCodeAt(offset) === CharCodes.NUM) {\n                this.state = EntityDecoderState.NumericStart;\n                this.consumed += 1;\n                return this.stateNumericStart(str, offset + 1);\n              }\n              this.state = EntityDecoderState.NamedEntity;\n              return this.stateNamedEntity(str, offset);\n            }\n          case EntityDecoderState.NumericStart:\n            {\n              return this.stateNumericStart(str, offset);\n            }\n          case EntityDecoderState.NumericDecimal:\n            {\n              return this.stateNumericDecimal(str, offset);\n            }\n          case EntityDecoderState.NumericHex:\n            {\n              return this.stateNumericHex(str, offset);\n            }\n          case EntityDecoderState.NamedEntity:\n            {\n              return this.stateNamedEntity(str, offset);\n            }\n        }\n      }\n      /**\n       * Switches between the numeric decimal and hexadecimal states.\n       *\n       * Equivalent to the `Numeric character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNumericStart\",\n      value: function stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n          return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n          this.state = EntityDecoderState.NumericHex;\n          this.consumed += 1;\n          return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n      }\n    }, {\n      key: \"addToNumericResult\",\n      value: function addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n          var digitCount = end - start;\n          this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n          this.consumed += digitCount;\n        }\n      }\n      /**\n       * Parses a hexadecimal numeric entity.\n       *\n       * Equivalent to the `Hexademical character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNumericHex\",\n      value: function stateNumericHex(str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n          var char = str.charCodeAt(offset);\n          if (isNumber(char) || isHexadecimalCharacter(char)) {\n            offset += 1;\n          } else {\n            this.addToNumericResult(str, startIdx, offset, 16);\n            return this.emitNumericEntity(char, 3);\n          }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n      }\n      /**\n       * Parses a decimal numeric entity.\n       *\n       * Equivalent to the `Decimal character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNumericDecimal\",\n      value: function stateNumericDecimal(str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n          var char = str.charCodeAt(offset);\n          if (isNumber(char)) {\n            offset += 1;\n          } else {\n            this.addToNumericResult(str, startIdx, offset, 10);\n            return this.emitNumericEntity(char, 2);\n          }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n      }\n      /**\n       * Validate and emit a numeric entity.\n       *\n       * Implements the logic from the `Hexademical character reference start\n       * state` and `Numeric character reference end state` in the HTML spec.\n       *\n       * @param lastCp The last code point of the entity. Used to see if the\n       *               entity was terminated with a semicolon.\n       * @param expectedLength The minimum number of characters that should be\n       *                       consumed. Used to validate that at least one digit\n       *                       was consumed.\n       * @returns The number of characters that were consumed.\n       */\n    }, {\n      key: \"emitNumericEntity\",\n      value: function emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n          return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n          this.consumed += 1;\n        } else if (this.decodeMode === DecodingMode.Strict) {\n          return 0;\n        }\n        this.emitCodePoint((0, _decode_codepointJs.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n          if (lastCp !== CharCodes.SEMI) {\n            this.errors.missingSemicolonAfterCharacterReference();\n          }\n          this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n      }\n      /**\n       * Parses a named entity.\n       *\n       * Equivalent to the `Named character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNamedEntity\",\n      value: function stateNamedEntity(str, offset) {\n        var decodeTree = this.decodeTree;\n        var current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n          var char = str.charCodeAt(offset);\n          this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n          if (this.treeIndex < 0) {\n            return this.result === 0 ||\n            // If we are parsing an attribute\n            this.decodeMode === DecodingMode.Attribute && (\n            // We shouldn't have consumed any characters after the entity,\n            valueLength === 0 ||\n            // And there should be no invalid characters.\n            isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n          }\n          current = decodeTree[this.treeIndex];\n          valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n          // If the branch is a value, store it and continue\n          if (valueLength !== 0) {\n            // If the entity is terminated by a semicolon, we are done.\n            if (char === CharCodes.SEMI) {\n              return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n            }\n            // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n            if (this.decodeMode !== DecodingMode.Strict) {\n              this.result = this.treeIndex;\n              this.consumed += this.excess;\n              this.excess = 0;\n            }\n          }\n        }\n        return -1;\n      }\n      /**\n       * Emit a named entity that was not terminated with a semicolon.\n       *\n       * @returns The number of characters consumed.\n       */\n    }, {\n      key: \"emitNotTerminatedNamedEntity\",\n      value: function emitNotTerminatedNamedEntity() {\n        var _a;\n        var result = this.result,\n          decodeTree = this.decodeTree;\n        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n      }\n      /**\n       * Emit a named entity.\n       *\n       * @param result The index of the entity in the decode tree.\n       * @param valueLength The number of bytes in the entity.\n       * @param consumed The number of characters consumed.\n       *\n       * @returns The number of characters consumed.\n       */\n    }, {\n      key: \"emitNamedEntityData\",\n      value: function emitNamedEntityData(result, valueLength, consumed) {\n        var decodeTree = this.decodeTree;\n        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n          // For multi-byte values, we need to emit the second byte.\n          this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n      }\n      /**\n       * Signal to the parser that the end of the input was reached.\n       *\n       * Remaining data will be emitted and relevant errors will be produced.\n       *\n       * @returns The number of characters consumed.\n       */\n    }, {\n      key: \"end\",\n      value: function end() {\n        var _a;\n        switch (this.state) {\n          case EntityDecoderState.NamedEntity:\n            {\n              // Emit a named entity if we have one.\n              return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n            }\n          // Otherwise, emit a numeric entity if we have one.\n          case EntityDecoderState.NumericDecimal:\n            {\n              return this.emitNumericEntity(0, 2);\n            }\n          case EntityDecoderState.NumericHex:\n            {\n              return this.emitNumericEntity(0, 3);\n            }\n          case EntityDecoderState.NumericStart:\n            {\n              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n              return 0;\n            }\n          case EntityDecoderState.EntityStart:\n            {\n              // Return 0 if we have no entity.\n              return 0;\n            }\n        }\n      }\n    }]);\n  }();\n  /**\n   * Creates a function that decodes entities in a string.\n   *\n   * @param decodeTree The decode tree.\n   * @returns A function that decodes entities in a string.\n   */\n  function getDecoder(decodeTree) {\n    var ret = \"\";\n    var decoder = new EntityDecoder(decodeTree, str => ret += (0, _decode_codepointJs.fromCodePoint)(str));\n    return function decodeWithTrie(str, decodeMode) {\n      var lastIndex = 0;\n      var offset = 0;\n      while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n        ret += str.slice(lastIndex, offset);\n        decoder.startEntity(decodeMode);\n        var len = decoder.write(str,\n        // Skip the \"&\"\n        offset + 1);\n        if (len < 0) {\n          lastIndex = offset + decoder.end();\n          break;\n        }\n        lastIndex = offset + len;\n        // If `len` is 0, skip the current `&` and continue.\n        offset = len === 0 ? lastIndex + 1 : lastIndex;\n      }\n      var result = ret + str.slice(lastIndex);\n      // Make sure we don't keep a reference to the final string.\n      ret = \"\";\n      return result;\n    };\n  }\n  /**\n   * Determines the branch of the current node that is taken given the current\n   * character. This function is used to traverse the trie.\n   *\n   * @param decodeTree The trie.\n   * @param current The current node.\n   * @param nodeIdx The index right after the current node and its value.\n   * @param char The current character.\n   * @returns The index of the next node, or -1 if no branch is taken.\n   */\n  function determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n      return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n      var value = char - jumpOffset;\n      return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n      var mid = lo + hi >>> 1;\n      var midVal = decodeTree[mid];\n      if (midVal < char) {\n        lo = mid + 1;\n      } else if (midVal > char) {\n        hi = mid - 1;\n      } else {\n        return decodeTree[mid + branchCount];\n      }\n    }\n    return -1;\n  }\n  var htmlDecoder = getDecoder(htmlDecodeTree.default);\n  var xmlDecoder = getDecoder(xmlDecodeTree.default);\n  /**\n   * Decodes an HTML string.\n   *\n   * @param str The string to decode.\n   * @param mode The decoding mode.\n   * @returns The decoded string.\n   */\n  function decodeHTML(str) {\n    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DecodingMode.Legacy;\n    return htmlDecoder(str, mode);\n  }\n  /**\n   * Decodes an HTML string in an attribute.\n   *\n   * @param str The string to decode.\n   * @returns The decoded string.\n   */\n  function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n  }\n  /**\n   * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n   *\n   * @param str The string to decode.\n   * @returns The decoded string.\n   */\n  function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n  }\n  /**\n   * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n   *\n   * @param str The string to decode.\n   * @returns The decoded string.\n   */\n  function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n  }\n});","lineCount":580,"map":[[12,2,6,0,"Object"],[12,8,6,0],[12,9,6,0,"defineProperty"],[12,23,6,0],[12,24,6,0,"exports"],[12,31,6,0],[13,4,6,0,"enumerable"],[13,14,6,0],[14,4,6,0,"get"],[14,7,6,0],[14,18,6,0,"get"],[14,19,6,0],[15,6,6,0],[15,13,6,0,"_decode_codepointJs"],[15,32,6,0],[15,33,6,0,"replaceCodePoint"],[15,49,6,0],[16,4,6,0],[17,2,6,0],[18,2,6,0,"Object"],[18,8,6,0],[18,9,6,0,"defineProperty"],[18,23,6,0],[18,24,6,0,"exports"],[18,31,6,0],[19,4,6,0,"enumerable"],[19,14,6,0],[20,4,6,0,"get"],[20,7,6,0],[20,18,6,0,"get"],[20,19,6,0],[21,6,6,0],[21,13,6,0,"_decode_codepointJs"],[21,32,6,0],[21,33,6,0,"fromCodePoint"],[21,46,6,0],[22,4,6,0],[23,2,6,0],[24,2,5,0,"Object"],[24,8,5,0],[24,9,5,0,"defineProperty"],[24,23,5,0],[24,24,5,0,"exports"],[24,31,5,0],[25,4,5,0,"enumerable"],[25,14,5,0],[26,4,5,0,"get"],[26,7,5,0],[26,18,5,0,"get"],[26,19,5,0],[27,6,5,0],[27,13,5,9,"htmlDecodeTree"],[27,27,5,23],[27,28,5,23,"default"],[27,35,5,23],[28,4,5,23],[29,2,5,23],[30,2,5,0,"Object"],[30,8,5,0],[30,9,5,0,"defineProperty"],[30,23,5,0],[30,24,5,0,"exports"],[30,31,5,0],[31,4,5,0,"enumerable"],[31,14,5,0],[32,4,5,0,"get"],[32,7,5,0],[32,18,5,0,"get"],[32,19,5,0],[33,6,5,0],[33,13,5,25,"xmlDecodeTree"],[33,26,5,38],[33,27,5,38,"default"],[33,34,5,38],[34,4,5,38],[35,2,5,38],[36,2,5,0,"Object"],[36,8,5,0],[36,9,5,0,"defineProperty"],[36,23,5,0],[36,24,5,0,"exports"],[36,31,5,0],[37,4,5,0,"enumerable"],[37,14,5,0],[38,4,5,0,"get"],[38,7,5,0],[38,18,5,0,"get"],[38,19,5,0],[39,6,5,0],[39,13,5,40,"decodeCodePoint"],[39,28,5,55],[39,29,5,55,"default"],[39,36,5,55],[40,4,5,55],[41,2,5,55],[42,2,24,0,"Object"],[42,8,24,0],[42,9,24,0,"defineProperty"],[42,23,24,0],[42,24,24,0,"exports"],[42,31,24,0],[43,4,24,0,"enumerable"],[43,14,24,0],[44,4,24,0,"get"],[44,7,24,0],[44,18,24,0,"get"],[44,19,24,0],[45,6,24,0],[45,13,24,0,"BinTrieFlags"],[45,25,24,0],[46,4,24,0],[47,2,24,0],[48,2,59,0,"Object"],[48,8,59,0],[48,9,59,0,"defineProperty"],[48,23,59,0],[48,24,59,0,"exports"],[48,31,59,0],[49,4,59,0,"enumerable"],[49,14,59,0],[50,4,59,0,"get"],[50,7,59,0],[50,18,59,0,"get"],[50,19,59,0],[51,6,59,0],[51,13,59,0,"DecodingMode"],[51,25,59,0],[52,4,59,0],[53,2,59,0],[54,2,71,0,"Object"],[54,8,71,0],[54,9,71,0,"defineProperty"],[54,23,71,0],[54,24,71,0,"exports"],[54,31,71,0],[55,4,71,0,"enumerable"],[55,14,71,0],[56,4,71,0,"get"],[56,7,71,0],[56,18,71,0,"get"],[56,19,71,0],[57,6,71,0],[57,13,71,0,"EntityDecoder"],[57,26,71,0],[58,4,71,0],[59,2,71,0],[60,2,424,0,"exports"],[60,9,424,0],[60,10,424,0,"determineBranch"],[60,25,424,0],[60,28,424,0,"determineBranch"],[60,43,424,0],[61,2,466,0,"exports"],[61,9,466,0],[61,10,466,0,"decodeHTML"],[61,20,466,0],[61,23,466,0,"decodeHTML"],[61,33,466,0],[62,2,475,0,"exports"],[62,9,475,0],[62,10,475,0,"decodeHTMLAttribute"],[62,29,475,0],[62,32,475,0,"decodeHTMLAttribute"],[62,51,475,0],[63,2,484,0,"exports"],[63,9,484,0],[63,10,484,0,"decodeHTMLStrict"],[63,26,484,0],[63,29,484,0,"decodeHTMLStrict"],[63,45,484,0],[64,2,493,0,"exports"],[64,9,493,0],[64,10,493,0,"decodeXML"],[64,19,493,0],[64,22,493,0,"decodeXML"],[64,31,493,0],[65,2,495,1],[65,6,495,1,"_babelRuntimeHelpersClassCallCheck"],[65,40,495,1],[65,43,495,1,"require"],[65,50,495,1],[65,51,495,1,"_dependencyMap"],[65,65,495,1],[66,2,495,1],[66,6,495,1,"_classCallCheck"],[66,21,495,1],[66,24,495,1,"_interopDefault"],[66,39,495,1],[66,40,495,1,"_babelRuntimeHelpersClassCallCheck"],[66,74,495,1],[67,2,495,1],[67,6,495,1,"_babelRuntimeHelpersCreateClass"],[67,37,495,1],[67,40,495,1,"require"],[67,47,495,1],[67,48,495,1,"_dependencyMap"],[67,62,495,1],[68,2,495,1],[68,6,495,1,"_createClass"],[68,18,495,1],[68,21,495,1,"_interopDefault"],[68,36,495,1],[68,37,495,1,"_babelRuntimeHelpersCreateClass"],[68,68,495,1],[69,2,1,0],[69,6,1,0,"_generatedDecodeDataHtmlJs"],[69,32,1,0],[69,35,1,0,"require"],[69,42,1,0],[69,43,1,0,"_dependencyMap"],[69,57,1,0],[70,2,1,0],[70,6,1,0,"htmlDecodeTree"],[70,20,1,0],[70,23,1,0,"_interopDefault"],[70,38,1,0],[70,39,1,0,"_generatedDecodeDataHtmlJs"],[70,65,1,0],[71,2,2,0],[71,6,2,0,"_generatedDecodeDataXmlJs"],[71,31,2,0],[71,34,2,0,"require"],[71,41,2,0],[71,42,2,0,"_dependencyMap"],[71,56,2,0],[72,2,2,0],[72,6,2,0,"xmlDecodeTree"],[72,19,2,0],[72,22,2,0,"_interopDefault"],[72,37,2,0],[72,38,2,0,"_generatedDecodeDataXmlJs"],[72,63,2,0],[73,2,3,0],[73,6,3,0,"_decode_codepointJs"],[73,25,3,0],[73,28,3,0,"require"],[73,35,3,0],[73,36,3,0,"_dependencyMap"],[73,50,3,0],[74,2,3,0],[74,6,3,0,"decodeCodePoint"],[74,21,3,0],[74,24,3,0,"_interopDefault"],[74,39,3,0],[74,40,3,0,"_decode_codepointJs"],[74,59,3,0],[75,2,4,0],[77,2,7,0],[77,6,7,4,"CharCodes"],[77,15,7,13],[78,2,8,0],[78,3,8,1],[78,13,8,11,"CharCodes"],[78,22,8,20],[78,24,8,22],[79,4,9,4,"CharCodes"],[79,13,9,13],[79,14,9,14,"CharCodes"],[79,23,9,23],[79,24,9,24],[79,29,9,29],[79,30,9,30],[79,33,9,33],[79,35,9,35],[79,36,9,36],[79,39,9,39],[79,44,9,44],[80,4,10,4,"CharCodes"],[80,13,10,13],[80,14,10,14,"CharCodes"],[80,23,10,23],[80,24,10,24],[80,30,10,30],[80,31,10,31],[80,34,10,34],[80,36,10,36],[80,37,10,37],[80,40,10,40],[80,46,10,46],[81,4,11,4,"CharCodes"],[81,13,11,13],[81,14,11,14,"CharCodes"],[81,23,11,23],[81,24,11,24],[81,32,11,32],[81,33,11,33],[81,36,11,36],[81,38,11,38],[81,39,11,39],[81,42,11,42],[81,50,11,50],[82,4,12,4,"CharCodes"],[82,13,12,13],[82,14,12,14,"CharCodes"],[82,23,12,23],[82,24,12,24],[82,30,12,30],[82,31,12,31],[82,34,12,34],[82,36,12,36],[82,37,12,37],[82,40,12,40],[82,46,12,46],[83,4,13,4,"CharCodes"],[83,13,13,13],[83,14,13,14,"CharCodes"],[83,23,13,23],[83,24,13,24],[83,30,13,30],[83,31,13,31],[83,34,13,34],[83,36,13,36],[83,37,13,37],[83,40,13,40],[83,46,13,46],[84,4,14,4,"CharCodes"],[84,13,14,13],[84,14,14,14,"CharCodes"],[84,23,14,23],[84,24,14,24],[84,33,14,33],[84,34,14,34],[84,37,14,37],[84,39,14,39],[84,40,14,40],[84,43,14,43],[84,52,14,52],[85,4,15,4,"CharCodes"],[85,13,15,13],[85,14,15,14,"CharCodes"],[85,23,15,23],[85,24,15,24],[85,33,15,33],[85,34,15,34],[85,37,15,37],[85,40,15,40],[85,41,15,41],[85,44,15,44],[85,53,15,53],[86,4,16,4,"CharCodes"],[86,13,16,13],[86,14,16,14,"CharCodes"],[86,23,16,23],[86,24,16,24],[86,33,16,33],[86,34,16,34],[86,37,16,37],[86,40,16,40],[86,41,16,41],[86,44,16,44],[86,53,16,53],[87,4,17,4,"CharCodes"],[87,13,17,13],[87,14,17,14,"CharCodes"],[87,23,17,23],[87,24,17,24],[87,33,17,33],[87,34,17,34],[87,37,17,37],[87,40,17,40],[87,41,17,41],[87,44,17,44],[87,53,17,53],[88,4,18,4,"CharCodes"],[88,13,18,13],[88,14,18,14,"CharCodes"],[88,23,18,23],[88,24,18,24],[88,33,18,33],[88,34,18,34],[88,37,18,37],[88,39,18,39],[88,40,18,40],[88,43,18,43],[88,52,18,52],[89,4,19,4,"CharCodes"],[89,13,19,13],[89,14,19,14,"CharCodes"],[89,23,19,23],[89,24,19,24],[89,33,19,33],[89,34,19,34],[89,37,19,37],[89,39,19,39],[89,40,19,40],[89,43,19,43],[89,52,19,52],[90,4,20,4,"CharCodes"],[90,13,20,13],[90,14,20,14,"CharCodes"],[90,23,20,23],[90,24,20,24],[90,33,20,33],[90,34,20,34],[90,37,20,37],[90,39,20,39],[90,40,20,40],[90,43,20,43],[90,52,20,52],[91,2,21,0],[91,3,21,1],[91,5,21,3,"CharCodes"],[91,14,21,12],[91,19,21,17,"CharCodes"],[91,28,21,26],[91,31,21,29],[91,32,21,30],[91,33,21,31],[91,34,21,32],[91,35,21,33],[92,2,22,0],[93,2,23,0],[93,6,23,6,"TO_LOWER_BIT"],[93,18,23,18],[93,21,23,21],[93,29,23,29],[94,2,24,7],[94,6,24,11,"BinTrieFlags"],[94,18,24,23],[95,2,25,0],[95,3,25,1],[95,13,25,11,"BinTrieFlags"],[95,25,25,23],[95,27,25,25],[96,4,26,4,"BinTrieFlags"],[96,16,26,16],[96,17,26,17,"BinTrieFlags"],[96,29,26,29],[96,30,26,30],[96,44,26,44],[96,45,26,45],[96,48,26,48],[96,53,26,53],[96,54,26,54],[96,57,26,57],[96,71,26,71],[97,4,27,4,"BinTrieFlags"],[97,16,27,16],[97,17,27,17,"BinTrieFlags"],[97,29,27,29],[97,30,27,30],[97,45,27,45],[97,46,27,46],[97,49,27,49],[97,54,27,54],[97,55,27,55],[97,58,27,58],[97,73,27,73],[98,4,28,4,"BinTrieFlags"],[98,16,28,16],[98,17,28,17,"BinTrieFlags"],[98,29,28,29],[98,30,28,30],[98,42,28,42],[98,43,28,43],[98,46,28,46],[98,49,28,49],[98,50,28,50],[98,53,28,53],[98,65,28,65],[99,2,29,0],[99,3,29,1],[99,5,29,3,"BinTrieFlags"],[99,17,29,15],[99,22,29,20,"BinTrieFlags"],[99,34,29,32],[99,37,29,35],[99,38,29,36],[99,39,29,37],[99,40,29,38],[99,41,29,39],[100,2,30,0],[100,11,30,9,"isNumber"],[100,19,30,17,"isNumber"],[100,20,30,18,"code"],[100,24,30,22],[100,26,30,24],[101,4,31,4],[101,11,31,11,"code"],[101,15,31,15],[101,19,31,19,"CharCodes"],[101,28,31,28],[101,29,31,29,"ZERO"],[101,33,31,33],[101,37,31,37,"code"],[101,41,31,41],[101,45,31,45,"CharCodes"],[101,54,31,54],[101,55,31,55,"NINE"],[101,59,31,59],[102,2,32,0],[103,2,33,0],[103,11,33,9,"isHexadecimalCharacter"],[103,33,33,31,"isHexadecimalCharacter"],[103,34,33,32,"code"],[103,38,33,36],[103,40,33,38],[104,4,34,4],[104,11,34,13,"code"],[104,15,34,17],[104,19,34,21,"CharCodes"],[104,28,34,30],[104,29,34,31,"UPPER_A"],[104,36,34,38],[104,40,34,42,"code"],[104,44,34,46],[104,48,34,50,"CharCodes"],[104,57,34,59],[104,58,34,60,"UPPER_F"],[104,65,34,67],[104,69,35,9,"code"],[104,73,35,13],[104,77,35,17,"CharCodes"],[104,86,35,26],[104,87,35,27,"LOWER_A"],[104,94,35,34],[104,98,35,38,"code"],[104,102,35,42],[104,106,35,46,"CharCodes"],[104,115,35,55],[104,116,35,56,"LOWER_F"],[104,123,35,64],[105,2,36,0],[106,2,37,0],[106,11,37,9,"isAsciiAlphaNumeric"],[106,30,37,28,"isAsciiAlphaNumeric"],[106,31,37,29,"code"],[106,35,37,33],[106,37,37,35],[107,4,38,4],[107,11,38,13,"code"],[107,15,38,17],[107,19,38,21,"CharCodes"],[107,28,38,30],[107,29,38,31,"UPPER_A"],[107,36,38,38],[107,40,38,42,"code"],[107,44,38,46],[107,48,38,50,"CharCodes"],[107,57,38,59],[107,58,38,60,"UPPER_Z"],[107,65,38,67],[107,69,39,9,"code"],[107,73,39,13],[107,77,39,17,"CharCodes"],[107,86,39,26],[107,87,39,27,"LOWER_A"],[107,94,39,34],[107,98,39,38,"code"],[107,102,39,42],[107,106,39,46,"CharCodes"],[107,115,39,55],[107,116,39,56,"LOWER_Z"],[107,123,39,64],[107,127,40,8,"isNumber"],[107,135,40,16],[107,136,40,17,"code"],[107,140,40,21],[107,141,40,22],[108,2,41,0],[109,2,42,0],[110,0,43,0],[111,0,44,0],[112,0,45,0],[113,0,46,0],[114,0,47,0],[115,2,48,0],[115,11,48,9,"isEntityInAttributeInvalidEnd"],[115,40,48,38,"isEntityInAttributeInvalidEnd"],[115,41,48,39,"code"],[115,45,48,43],[115,47,48,45],[116,4,49,4],[116,11,49,11,"code"],[116,15,49,15],[116,20,49,20,"CharCodes"],[116,29,49,29],[116,30,49,30,"EQUALS"],[116,36,49,36],[116,40,49,40,"isAsciiAlphaNumeric"],[116,59,49,59],[116,60,49,60,"code"],[116,64,49,64],[116,65,49,65],[117,2,50,0],[118,2,51,0],[118,6,51,4,"EntityDecoderState"],[118,24,51,22],[119,2,52,0],[119,3,52,1],[119,13,52,11,"EntityDecoderState"],[119,31,52,29],[119,33,52,31],[120,4,53,4,"EntityDecoderState"],[120,22,53,22],[120,23,53,23,"EntityDecoderState"],[120,41,53,41],[120,42,53,42],[120,55,53,55],[120,56,53,56],[120,59,53,59],[120,60,53,60],[120,61,53,61],[120,64,53,64],[120,77,53,77],[121,4,54,4,"EntityDecoderState"],[121,22,54,22],[121,23,54,23,"EntityDecoderState"],[121,41,54,41],[121,42,54,42],[121,56,54,56],[121,57,54,57],[121,60,54,60],[121,61,54,61],[121,62,54,62],[121,65,54,65],[121,79,54,79],[122,4,55,4,"EntityDecoderState"],[122,22,55,22],[122,23,55,23,"EntityDecoderState"],[122,41,55,41],[122,42,55,42],[122,58,55,58],[122,59,55,59],[122,62,55,62],[122,63,55,63],[122,64,55,64],[122,67,55,67],[122,83,55,83],[123,4,56,4,"EntityDecoderState"],[123,22,56,22],[123,23,56,23,"EntityDecoderState"],[123,41,56,41],[123,42,56,42],[123,54,56,54],[123,55,56,55],[123,58,56,58],[123,59,56,59],[123,60,56,60],[123,63,56,63],[123,75,56,75],[124,4,57,4,"EntityDecoderState"],[124,22,57,22],[124,23,57,23,"EntityDecoderState"],[124,41,57,41],[124,42,57,42],[124,55,57,55],[124,56,57,56],[124,59,57,59],[124,60,57,60],[124,61,57,61],[124,64,57,64],[124,77,57,77],[125,2,58,0],[125,3,58,1],[125,5,58,3,"EntityDecoderState"],[125,23,58,21],[125,28,58,26,"EntityDecoderState"],[125,46,58,44],[125,49,58,47],[125,50,58,48],[125,51,58,49],[125,52,58,50],[125,53,58,51],[126,2,59,7],[126,6,59,11,"DecodingMode"],[126,18,59,23],[127,2,60,0],[127,3,60,1],[127,13,60,11,"DecodingMode"],[127,25,60,23],[127,27,60,25],[128,4,61,4],[129,4,62,4,"DecodingMode"],[129,16,62,16],[129,17,62,17,"DecodingMode"],[129,29,62,29],[129,30,62,30],[129,38,62,38],[129,39,62,39],[129,42,62,42],[129,43,62,43],[129,44,62,44],[129,47,62,47],[129,55,62,55],[130,4,63,4],[131,4,64,4,"DecodingMode"],[131,16,64,16],[131,17,64,17,"DecodingMode"],[131,29,64,29],[131,30,64,30],[131,38,64,38],[131,39,64,39],[131,42,64,42],[131,43,64,43],[131,44,64,44],[131,47,64,47],[131,55,64,55],[132,4,65,4],[133,4,66,4,"DecodingMode"],[133,16,66,16],[133,17,66,17,"DecodingMode"],[133,29,66,29],[133,30,66,30],[133,41,66,41],[133,42,66,42],[133,45,66,45],[133,46,66,46],[133,47,66,47],[133,50,66,50],[133,61,66,61],[134,2,67,0],[134,3,67,1],[134,5,67,3,"DecodingMode"],[134,17,67,15],[134,22,67,20,"DecodingMode"],[134,34,67,32],[134,37,67,35],[134,38,67,36],[134,39,67,37],[134,40,67,38],[134,41,67,39],[135,2,68,0],[136,0,69,0],[137,0,70,0],[138,2,68,0],[138,6,71,13,"EntityDecoder"],[138,19,71,26],[139,4,72,4],[139,13,72,4,"EntityDecoder"],[139,27,73,4],[140,4,74,4,"decodeTree"],[140,14,74,14],[141,4,75,4],[142,0,76,0],[143,0,77,0],[144,0,78,0],[145,0,79,0],[146,0,80,0],[147,0,81,0],[148,0,82,0],[149,0,83,0],[150,4,84,4,"emitCodePoint"],[150,17,84,17],[150,19,85,4],[151,4,86,4,"errors"],[151,10,86,10],[151,12,86,12],[152,6,86,12],[152,10,86,12,"_classCallCheck"],[152,25,86,12],[152,26,86,12,"default"],[152,33,86,12],[152,41,86,12,"EntityDecoder"],[152,54,86,12],[153,6,87,8],[153,10,87,12],[153,11,87,13,"decodeTree"],[153,21,87,23],[153,24,87,26,"decodeTree"],[153,34,87,36],[154,6,88,8],[154,10,88,12],[154,11,88,13,"emitCodePoint"],[154,24,88,26],[154,27,88,29,"emitCodePoint"],[154,40,88,42],[155,6,89,8],[155,10,89,12],[155,11,89,13,"errors"],[155,17,89,19],[155,20,89,22,"errors"],[155,26,89,28],[156,6,90,8],[157,6,91,8],[157,10,91,12],[157,11,91,13,"state"],[157,16,91,18],[157,19,91,21,"EntityDecoderState"],[157,37,91,39],[157,38,91,40,"EntityStart"],[157,49,91,51],[158,6,92,8],[159,6,93,8],[159,10,93,12],[159,11,93,13,"consumed"],[159,19,93,21],[159,22,93,24],[159,23,93,25],[160,6,94,8],[161,0,95,0],[162,0,96,0],[163,0,97,0],[164,0,98,0],[165,0,99,0],[166,6,100,8],[166,10,100,12],[166,11,100,13,"result"],[166,17,100,19],[166,20,100,22],[166,21,100,23],[167,6,101,8],[168,6,102,8],[168,10,102,12],[168,11,102,13,"treeIndex"],[168,20,102,22],[168,23,102,25],[168,24,102,26],[169,6,103,8],[170,6,104,8],[170,10,104,12],[170,11,104,13,"excess"],[170,17,104,19],[170,20,104,22],[170,21,104,23],[171,6,105,8],[172,6,106,8],[172,10,106,12],[172,11,106,13,"decodeMode"],[172,21,106,23],[172,24,106,26,"DecodingMode"],[172,36,106,38],[172,37,106,39,"Strict"],[172,43,106,45],[173,4,107,4],[174,4,108,4],[175,4,108,4],[175,15,108,4,"_createClass"],[175,27,108,4],[175,28,108,4,"default"],[175,35,108,4],[175,37,108,4,"EntityDecoder"],[175,50,108,4],[176,6,108,4,"key"],[176,9,108,4],[177,6,108,4,"value"],[177,11,108,4],[177,13,109,4],[177,22,109,4,"startEntity"],[177,33,109,15,"startEntity"],[177,34,109,16,"decodeMode"],[177,44,109,26],[177,46,109,28],[178,8,110,8],[178,12,110,12],[178,13,110,13,"decodeMode"],[178,23,110,23],[178,26,110,26,"decodeMode"],[178,36,110,36],[179,8,111,8],[179,12,111,12],[179,13,111,13,"state"],[179,18,111,18],[179,21,111,21,"EntityDecoderState"],[179,39,111,39],[179,40,111,40,"EntityStart"],[179,51,111,51],[180,8,112,8],[180,12,112,12],[180,13,112,13,"result"],[180,19,112,19],[180,22,112,22],[180,23,112,23],[181,8,113,8],[181,12,113,12],[181,13,113,13,"treeIndex"],[181,22,113,22],[181,25,113,25],[181,26,113,26],[182,8,114,8],[182,12,114,12],[182,13,114,13,"excess"],[182,19,114,19],[182,22,114,22],[182,23,114,23],[183,8,115,8],[183,12,115,12],[183,13,115,13,"consumed"],[183,21,115,21],[183,24,115,24],[183,25,115,25],[184,6,116,4],[185,6,117,4],[186,0,118,0],[187,0,119,0],[188,0,120,0],[189,0,121,0],[190,0,122,0],[191,0,123,0],[192,0,124,0],[193,0,125,0],[194,0,126,0],[195,0,127,0],[196,4,117,4],[197,6,117,4,"key"],[197,9,117,4],[198,6,117,4,"value"],[198,11,117,4],[198,13,128,4],[198,22,128,4,"write"],[198,27,128,9,"write"],[198,28,128,10,"str"],[198,31,128,13],[198,33,128,15,"offset"],[198,39,128,21],[198,41,128,23],[199,8,129,8],[199,16,129,16],[199,20,129,20],[199,21,129,21,"state"],[199,26,129,26],[200,10,130,12],[200,15,130,17,"EntityDecoderState"],[200,33,130,35],[200,34,130,36,"EntityStart"],[200,45,130,47],[201,12,130,49],[202,14,131,16],[202,18,131,20,"str"],[202,21,131,23],[202,22,131,24,"charCodeAt"],[202,32,131,34],[202,33,131,35,"offset"],[202,39,131,41],[202,40,131,42],[202,45,131,47,"CharCodes"],[202,54,131,56],[202,55,131,57,"NUM"],[202,58,131,60],[202,60,131,62],[203,16,132,20],[203,20,132,24],[203,21,132,25,"state"],[203,26,132,30],[203,29,132,33,"EntityDecoderState"],[203,47,132,51],[203,48,132,52,"NumericStart"],[203,60,132,64],[204,16,133,20],[204,20,133,24],[204,21,133,25,"consumed"],[204,29,133,33],[204,33,133,37],[204,34,133,38],[205,16,134,20],[205,23,134,27],[205,27,134,31],[205,28,134,32,"stateNumericStart"],[205,45,134,49],[205,46,134,50,"str"],[205,49,134,53],[205,51,134,55,"offset"],[205,57,134,61],[205,60,134,64],[205,61,134,65],[205,62,134,66],[206,14,135,16],[207,14,136,16],[207,18,136,20],[207,19,136,21,"state"],[207,24,136,26],[207,27,136,29,"EntityDecoderState"],[207,45,136,47],[207,46,136,48,"NamedEntity"],[207,57,136,59],[208,14,137,16],[208,21,137,23],[208,25,137,27],[208,26,137,28,"stateNamedEntity"],[208,42,137,44],[208,43,137,45,"str"],[208,46,137,48],[208,48,137,50,"offset"],[208,54,137,56],[208,55,137,57],[209,12,138,12],[210,10,139,12],[210,15,139,17,"EntityDecoderState"],[210,33,139,35],[210,34,139,36,"NumericStart"],[210,46,139,48],[211,12,139,50],[212,14,140,16],[212,21,140,23],[212,25,140,27],[212,26,140,28,"stateNumericStart"],[212,43,140,45],[212,44,140,46,"str"],[212,47,140,49],[212,49,140,51,"offset"],[212,55,140,57],[212,56,140,58],[213,12,141,12],[214,10,142,12],[214,15,142,17,"EntityDecoderState"],[214,33,142,35],[214,34,142,36,"NumericDecimal"],[214,48,142,50],[215,12,142,52],[216,14,143,16],[216,21,143,23],[216,25,143,27],[216,26,143,28,"stateNumericDecimal"],[216,45,143,47],[216,46,143,48,"str"],[216,49,143,51],[216,51,143,53,"offset"],[216,57,143,59],[216,58,143,60],[217,12,144,12],[218,10,145,12],[218,15,145,17,"EntityDecoderState"],[218,33,145,35],[218,34,145,36,"NumericHex"],[218,44,145,46],[219,12,145,48],[220,14,146,16],[220,21,146,23],[220,25,146,27],[220,26,146,28,"stateNumericHex"],[220,41,146,43],[220,42,146,44,"str"],[220,45,146,47],[220,47,146,49,"offset"],[220,53,146,55],[220,54,146,56],[221,12,147,12],[222,10,148,12],[222,15,148,17,"EntityDecoderState"],[222,33,148,35],[222,34,148,36,"NamedEntity"],[222,45,148,47],[223,12,148,49],[224,14,149,16],[224,21,149,23],[224,25,149,27],[224,26,149,28,"stateNamedEntity"],[224,42,149,44],[224,43,149,45,"str"],[224,46,149,48],[224,48,149,50,"offset"],[224,54,149,56],[224,55,149,57],[225,12,150,12],[226,8,151,8],[227,6,152,4],[228,6,153,4],[229,0,154,0],[230,0,155,0],[231,0,156,0],[232,0,157,0],[233,0,158,0],[234,0,159,0],[235,0,160,0],[236,0,161,0],[237,4,153,4],[238,6,153,4,"key"],[238,9,153,4],[239,6,153,4,"value"],[239,11,153,4],[239,13,162,4],[239,22,162,4,"stateNumericStart"],[239,39,162,21,"stateNumericStart"],[239,40,162,22,"str"],[239,43,162,25],[239,45,162,27,"offset"],[239,51,162,33],[239,53,162,35],[240,8,163,8],[240,12,163,12,"offset"],[240,18,163,18],[240,22,163,22,"str"],[240,25,163,25],[240,26,163,26,"length"],[240,32,163,32],[240,34,163,34],[241,10,164,12],[241,17,164,19],[241,18,164,20],[241,19,164,21],[242,8,165,8],[243,8,166,8],[243,12,166,12],[243,13,166,13,"str"],[243,16,166,16],[243,17,166,17,"charCodeAt"],[243,27,166,27],[243,28,166,28,"offset"],[243,34,166,34],[243,35,166,35],[243,38,166,38,"TO_LOWER_BIT"],[243,50,166,50],[243,56,166,56,"CharCodes"],[243,65,166,65],[243,66,166,66,"LOWER_X"],[243,73,166,73],[243,75,166,75],[244,10,167,12],[244,14,167,16],[244,15,167,17,"state"],[244,20,167,22],[244,23,167,25,"EntityDecoderState"],[244,41,167,43],[244,42,167,44,"NumericHex"],[244,52,167,54],[245,10,168,12],[245,14,168,16],[245,15,168,17,"consumed"],[245,23,168,25],[245,27,168,29],[245,28,168,30],[246,10,169,12],[246,17,169,19],[246,21,169,23],[246,22,169,24,"stateNumericHex"],[246,37,169,39],[246,38,169,40,"str"],[246,41,169,43],[246,43,169,45,"offset"],[246,49,169,51],[246,52,169,54],[246,53,169,55],[246,54,169,56],[247,8,170,8],[248,8,171,8],[248,12,171,12],[248,13,171,13,"state"],[248,18,171,18],[248,21,171,21,"EntityDecoderState"],[248,39,171,39],[248,40,171,40,"NumericDecimal"],[248,54,171,54],[249,8,172,8],[249,15,172,15],[249,19,172,19],[249,20,172,20,"stateNumericDecimal"],[249,39,172,39],[249,40,172,40,"str"],[249,43,172,43],[249,45,172,45,"offset"],[249,51,172,51],[249,52,172,52],[250,6,173,4],[251,4,173,5],[252,6,173,5,"key"],[252,9,173,5],[253,6,173,5,"value"],[253,11,173,5],[253,13,174,4],[253,22,174,4,"addToNumericResult"],[253,40,174,22,"addToNumericResult"],[253,41,174,23,"str"],[253,44,174,26],[253,46,174,28,"start"],[253,51,174,33],[253,53,174,35,"end"],[253,56,174,38],[253,58,174,40,"base"],[253,62,174,44],[253,64,174,46],[254,8,175,8],[254,12,175,12,"start"],[254,17,175,17],[254,22,175,22,"end"],[254,25,175,25],[254,27,175,27],[255,10,176,12],[255,14,176,18,"digitCount"],[255,24,176,28],[255,27,176,31,"end"],[255,30,176,34],[255,33,176,37,"start"],[255,38,176,42],[256,10,177,12],[256,14,177,16],[256,15,177,17,"result"],[256,21,177,23],[256,24,178,16],[256,28,178,20],[256,29,178,21,"result"],[256,35,178,27],[256,38,178,30,"Math"],[256,42,178,34],[256,43,178,35,"pow"],[256,46,178,38],[256,47,178,39,"base"],[256,51,178,43],[256,53,178,45,"digitCount"],[256,63,178,55],[256,64,178,56],[256,67,179,20,"parseInt"],[256,75,179,28],[256,76,179,29,"str"],[256,79,179,32],[256,80,179,33,"substr"],[256,86,179,39],[256,87,179,40,"start"],[256,92,179,45],[256,94,179,47,"digitCount"],[256,104,179,57],[256,105,179,58],[256,107,179,60,"base"],[256,111,179,64],[256,112,179,65],[257,10,180,12],[257,14,180,16],[257,15,180,17,"consumed"],[257,23,180,25],[257,27,180,29,"digitCount"],[257,37,180,39],[258,8,181,8],[259,6,182,4],[260,6,183,4],[261,0,184,0],[262,0,185,0],[263,0,186,0],[264,0,187,0],[265,0,188,0],[266,0,189,0],[267,0,190,0],[268,0,191,0],[269,4,183,4],[270,6,183,4,"key"],[270,9,183,4],[271,6,183,4,"value"],[271,11,183,4],[271,13,192,4],[271,22,192,4,"stateNumericHex"],[271,37,192,19,"stateNumericHex"],[271,38,192,20,"str"],[271,41,192,23],[271,43,192,25,"offset"],[271,49,192,31],[271,51,192,33],[272,8,193,8],[272,12,193,14,"startIdx"],[272,20,193,22],[272,23,193,25,"offset"],[272,29,193,31],[273,8,194,8],[273,15,194,15,"offset"],[273,21,194,21],[273,24,194,24,"str"],[273,27,194,27],[273,28,194,28,"length"],[273,34,194,34],[273,36,194,36],[274,10,195,12],[274,14,195,18,"char"],[274,18,195,22],[274,21,195,25,"str"],[274,24,195,28],[274,25,195,29,"charCodeAt"],[274,35,195,39],[274,36,195,40,"offset"],[274,42,195,46],[274,43,195,47],[275,10,196,12],[275,14,196,16,"isNumber"],[275,22,196,24],[275,23,196,25,"char"],[275,27,196,29],[275,28,196,30],[275,32,196,34,"isHexadecimalCharacter"],[275,54,196,56],[275,55,196,57,"char"],[275,59,196,61],[275,60,196,62],[275,62,196,64],[276,12,197,16,"offset"],[276,18,197,22],[276,22,197,26],[276,23,197,27],[277,10,198,12],[277,11,198,13],[277,17,199,17],[278,12,200,16],[278,16,200,20],[278,17,200,21,"addToNumericResult"],[278,35,200,39],[278,36,200,40,"str"],[278,39,200,43],[278,41,200,45,"startIdx"],[278,49,200,53],[278,51,200,55,"offset"],[278,57,200,61],[278,59,200,63],[278,61,200,65],[278,62,200,66],[279,12,201,16],[279,19,201,23],[279,23,201,27],[279,24,201,28,"emitNumericEntity"],[279,41,201,45],[279,42,201,46,"char"],[279,46,201,50],[279,48,201,52],[279,49,201,53],[279,50,201,54],[280,10,202,12],[281,8,203,8],[282,8,204,8],[282,12,204,12],[282,13,204,13,"addToNumericResult"],[282,31,204,31],[282,32,204,32,"str"],[282,35,204,35],[282,37,204,37,"startIdx"],[282,45,204,45],[282,47,204,47,"offset"],[282,53,204,53],[282,55,204,55],[282,57,204,57],[282,58,204,58],[283,8,205,8],[283,15,205,15],[283,16,205,16],[283,17,205,17],[284,6,206,4],[285,6,207,4],[286,0,208,0],[287,0,209,0],[288,0,210,0],[289,0,211,0],[290,0,212,0],[291,0,213,0],[292,0,214,0],[293,0,215,0],[294,4,207,4],[295,6,207,4,"key"],[295,9,207,4],[296,6,207,4,"value"],[296,11,207,4],[296,13,216,4],[296,22,216,4,"stateNumericDecimal"],[296,41,216,23,"stateNumericDecimal"],[296,42,216,24,"str"],[296,45,216,27],[296,47,216,29,"offset"],[296,53,216,35],[296,55,216,37],[297,8,217,8],[297,12,217,14,"startIdx"],[297,20,217,22],[297,23,217,25,"offset"],[297,29,217,31],[298,8,218,8],[298,15,218,15,"offset"],[298,21,218,21],[298,24,218,24,"str"],[298,27,218,27],[298,28,218,28,"length"],[298,34,218,34],[298,36,218,36],[299,10,219,12],[299,14,219,18,"char"],[299,18,219,22],[299,21,219,25,"str"],[299,24,219,28],[299,25,219,29,"charCodeAt"],[299,35,219,39],[299,36,219,40,"offset"],[299,42,219,46],[299,43,219,47],[300,10,220,12],[300,14,220,16,"isNumber"],[300,22,220,24],[300,23,220,25,"char"],[300,27,220,29],[300,28,220,30],[300,30,220,32],[301,12,221,16,"offset"],[301,18,221,22],[301,22,221,26],[301,23,221,27],[302,10,222,12],[302,11,222,13],[302,17,223,17],[303,12,224,16],[303,16,224,20],[303,17,224,21,"addToNumericResult"],[303,35,224,39],[303,36,224,40,"str"],[303,39,224,43],[303,41,224,45,"startIdx"],[303,49,224,53],[303,51,224,55,"offset"],[303,57,224,61],[303,59,224,63],[303,61,224,65],[303,62,224,66],[304,12,225,16],[304,19,225,23],[304,23,225,27],[304,24,225,28,"emitNumericEntity"],[304,41,225,45],[304,42,225,46,"char"],[304,46,225,50],[304,48,225,52],[304,49,225,53],[304,50,225,54],[305,10,226,12],[306,8,227,8],[307,8,228,8],[307,12,228,12],[307,13,228,13,"addToNumericResult"],[307,31,228,31],[307,32,228,32,"str"],[307,35,228,35],[307,37,228,37,"startIdx"],[307,45,228,45],[307,47,228,47,"offset"],[307,53,228,53],[307,55,228,55],[307,57,228,57],[307,58,228,58],[308,8,229,8],[308,15,229,15],[308,16,229,16],[308,17,229,17],[309,6,230,4],[310,6,231,4],[311,0,232,0],[312,0,233,0],[313,0,234,0],[314,0,235,0],[315,0,236,0],[316,0,237,0],[317,0,238,0],[318,0,239,0],[319,0,240,0],[320,0,241,0],[321,0,242,0],[322,0,243,0],[323,4,231,4],[324,6,231,4,"key"],[324,9,231,4],[325,6,231,4,"value"],[325,11,231,4],[325,13,244,4],[325,22,244,4,"emitNumericEntity"],[325,39,244,21,"emitNumericEntity"],[325,40,244,22,"lastCp"],[325,46,244,28],[325,48,244,30,"expectedLength"],[325,62,244,44],[325,64,244,46],[326,8,245,8],[326,12,245,12,"_a"],[326,14,245,14],[327,8,246,8],[328,8,247,8],[328,12,247,12],[328,16,247,16],[328,17,247,17,"consumed"],[328,25,247,25],[328,29,247,29,"expectedLength"],[328,43,247,43],[328,45,247,45],[329,10,248,12],[329,11,248,13,"_a"],[329,13,248,15],[329,16,248,18],[329,20,248,22],[329,21,248,23,"errors"],[329,27,248,29],[329,33,248,35],[329,37,248,39],[329,41,248,43,"_a"],[329,43,248,45],[329,48,248,50],[329,53,248,55],[329,54,248,56],[329,57,248,59],[329,62,248,64],[329,63,248,65],[329,66,248,68,"_a"],[329,68,248,70],[329,69,248,71,"absenceOfDigitsInNumericCharacterReference"],[329,111,248,113],[329,112,248,114],[329,116,248,118],[329,117,248,119,"consumed"],[329,125,248,127],[329,126,248,128],[330,10,249,12],[330,17,249,19],[330,18,249,20],[331,8,250,8],[332,8,251,8],[333,8,252,8],[333,12,252,12,"lastCp"],[333,18,252,18],[333,23,252,23,"CharCodes"],[333,32,252,32],[333,33,252,33,"SEMI"],[333,37,252,37],[333,39,252,39],[334,10,253,12],[334,14,253,16],[334,15,253,17,"consumed"],[334,23,253,25],[334,27,253,29],[334,28,253,30],[335,8,254,8],[335,9,254,9],[335,15,255,13],[335,19,255,17],[335,23,255,21],[335,24,255,22,"decodeMode"],[335,34,255,32],[335,39,255,37,"DecodingMode"],[335,51,255,49],[335,52,255,50,"Strict"],[335,58,255,56],[335,60,255,58],[336,10,256,12],[336,17,256,19],[336,18,256,20],[337,8,257,8],[338,8,258,8],[338,12,258,12],[338,13,258,13,"emitCodePoint"],[338,26,258,26],[338,27,258,27],[338,31,258,27,"replaceCodePoint"],[338,50,258,43],[338,51,258,43,"replaceCodePoint"],[338,67,258,43],[338,69,258,44],[338,73,258,48],[338,74,258,49,"result"],[338,80,258,55],[338,81,258,56],[338,83,258,58],[338,87,258,62],[338,88,258,63,"consumed"],[338,96,258,71],[338,97,258,72],[339,8,259,8],[339,12,259,12],[339,16,259,16],[339,17,259,17,"errors"],[339,23,259,23],[339,25,259,25],[340,10,260,12],[340,14,260,16,"lastCp"],[340,20,260,22],[340,25,260,27,"CharCodes"],[340,34,260,36],[340,35,260,37,"SEMI"],[340,39,260,41],[340,41,260,43],[341,12,261,16],[341,16,261,20],[341,17,261,21,"errors"],[341,23,261,27],[341,24,261,28,"missingSemicolonAfterCharacterReference"],[341,63,261,67],[341,64,261,68],[341,65,261,69],[342,10,262,12],[343,10,263,12],[343,14,263,16],[343,15,263,17,"errors"],[343,21,263,23],[343,22,263,24,"validateNumericCharacterReference"],[343,55,263,57],[343,56,263,58],[343,60,263,62],[343,61,263,63,"result"],[343,67,263,69],[343,68,263,70],[344,8,264,8],[345,8,265,8],[345,15,265,15],[345,19,265,19],[345,20,265,20,"consumed"],[345,28,265,28],[346,6,266,4],[347,6,267,4],[348,0,268,0],[349,0,269,0],[350,0,270,0],[351,0,271,0],[352,0,272,0],[353,0,273,0],[354,0,274,0],[355,0,275,0],[356,4,267,4],[357,6,267,4,"key"],[357,9,267,4],[358,6,267,4,"value"],[358,11,267,4],[358,13,276,4],[358,22,276,4,"stateNamedEntity"],[358,38,276,20,"stateNamedEntity"],[358,39,276,21,"str"],[358,42,276,24],[358,44,276,26,"offset"],[358,50,276,32],[358,52,276,34],[359,8,277,8],[359,12,277,16,"decodeTree"],[359,22,277,26],[359,25,277,31],[359,29,277,35],[359,30,277,16,"decodeTree"],[359,40,277,26],[360,8,278,8],[360,12,278,12,"current"],[360,19,278,19],[360,22,278,22,"decodeTree"],[360,32,278,32],[360,33,278,33],[360,37,278,37],[360,38,278,38,"treeIndex"],[360,47,278,47],[360,48,278,48],[361,8,279,8],[362,8,280,8],[362,12,280,12,"valueLength"],[362,23,280,23],[362,26,280,26],[362,27,280,27,"current"],[362,34,280,34],[362,37,280,37,"BinTrieFlags"],[362,49,280,49],[362,50,280,50,"VALUE_LENGTH"],[362,62,280,62],[362,67,280,67],[362,69,280,69],[363,8,281,8],[363,15,281,15,"offset"],[363,21,281,21],[363,24,281,24,"str"],[363,27,281,27],[363,28,281,28,"length"],[363,34,281,34],[363,36,281,36,"offset"],[363,42,281,42],[363,44,281,44],[363,46,281,46],[363,50,281,50],[363,51,281,51,"excess"],[363,57,281,57],[363,59,281,59],[363,61,281,61],[364,10,282,12],[364,14,282,18,"char"],[364,18,282,22],[364,21,282,25,"str"],[364,24,282,28],[364,25,282,29,"charCodeAt"],[364,35,282,39],[364,36,282,40,"offset"],[364,42,282,46],[364,43,282,47],[365,10,283,12],[365,14,283,16],[365,15,283,17,"treeIndex"],[365,24,283,26],[365,27,283,29,"determineBranch"],[365,42,283,44],[365,43,283,45,"decodeTree"],[365,53,283,55],[365,55,283,57,"current"],[365,62,283,64],[365,64,283,66],[365,68,283,70],[365,69,283,71,"treeIndex"],[365,78,283,80],[365,81,283,83,"Math"],[365,85,283,87],[365,86,283,88,"max"],[365,89,283,91],[365,90,283,92],[365,91,283,93],[365,93,283,95,"valueLength"],[365,104,283,106],[365,105,283,107],[365,107,283,109,"char"],[365,111,283,113],[365,112,283,114],[366,10,284,12],[366,14,284,16],[366,18,284,20],[366,19,284,21,"treeIndex"],[366,28,284,30],[366,31,284,33],[366,32,284,34],[366,34,284,36],[367,12,285,16],[367,19,285,23],[367,23,285,27],[367,24,285,28,"result"],[367,30,285,34],[367,35,285,39],[367,36,285,40],[368,12,286,20],[369,12,287,21],[369,16,287,25],[369,17,287,26,"decodeMode"],[369,27,287,36],[369,32,287,41,"DecodingMode"],[369,44,287,53],[369,45,287,54,"Attribute"],[369,54,287,63],[370,12,288,24],[371,12,289,25,"valueLength"],[371,23,289,36],[371,28,289,41],[371,29,289,42],[372,12,290,28],[373,12,291,28,"isEntityInAttributeInvalidEnd"],[373,41,291,57],[373,42,291,58,"char"],[373,46,291,62],[373,47,291,63],[373,48,291,65],[373,51,292,22],[373,52,292,23],[373,55,293,22],[373,59,293,26],[373,60,293,27,"emitNotTerminatedNamedEntity"],[373,88,293,55],[373,89,293,56],[373,90,293,57],[374,10,294,12],[375,10,295,12,"current"],[375,17,295,19],[375,20,295,22,"decodeTree"],[375,30,295,32],[375,31,295,33],[375,35,295,37],[375,36,295,38,"treeIndex"],[375,45,295,47],[375,46,295,48],[376,10,296,12,"valueLength"],[376,21,296,23],[376,24,296,26],[376,25,296,27,"current"],[376,32,296,34],[376,35,296,37,"BinTrieFlags"],[376,47,296,49],[376,48,296,50,"VALUE_LENGTH"],[376,60,296,62],[376,65,296,67],[376,67,296,69],[377,10,297,12],[378,10,298,12],[378,14,298,16,"valueLength"],[378,25,298,27],[378,30,298,32],[378,31,298,33],[378,33,298,35],[379,12,299,16],[380,12,300,16],[380,16,300,20,"char"],[380,20,300,24],[380,25,300,29,"CharCodes"],[380,34,300,38],[380,35,300,39,"SEMI"],[380,39,300,43],[380,41,300,45],[381,14,301,20],[381,21,301,27],[381,25,301,31],[381,26,301,32,"emitNamedEntityData"],[381,45,301,51],[381,46,301,52],[381,50,301,56],[381,51,301,57,"treeIndex"],[381,60,301,66],[381,62,301,68,"valueLength"],[381,73,301,79],[381,75,301,81],[381,79,301,85],[381,80,301,86,"consumed"],[381,88,301,94],[381,91,301,97],[381,95,301,101],[381,96,301,102,"excess"],[381,102,301,108],[381,103,301,109],[382,12,302,16],[383,12,303,16],[384,12,304,16],[384,16,304,20],[384,20,304,24],[384,21,304,25,"decodeMode"],[384,31,304,35],[384,36,304,40,"DecodingMode"],[384,48,304,52],[384,49,304,53,"Strict"],[384,55,304,59],[384,57,304,61],[385,14,305,20],[385,18,305,24],[385,19,305,25,"result"],[385,25,305,31],[385,28,305,34],[385,32,305,38],[385,33,305,39,"treeIndex"],[385,42,305,48],[386,14,306,20],[386,18,306,24],[386,19,306,25,"consumed"],[386,27,306,33],[386,31,306,37],[386,35,306,41],[386,36,306,42,"excess"],[386,42,306,48],[387,14,307,20],[387,18,307,24],[387,19,307,25,"excess"],[387,25,307,31],[387,28,307,34],[387,29,307,35],[388,12,308,16],[389,10,309,12],[390,8,310,8],[391,8,311,8],[391,15,311,15],[391,16,311,16],[391,17,311,17],[392,6,312,4],[393,6,313,4],[394,0,314,0],[395,0,315,0],[396,0,316,0],[397,0,317,0],[398,4,313,4],[399,6,313,4,"key"],[399,9,313,4],[400,6,313,4,"value"],[400,11,313,4],[400,13,318,4],[400,22,318,4,"emitNotTerminatedNamedEntity"],[400,50,318,32,"emitNotTerminatedNamedEntity"],[400,51,318,32],[400,53,318,35],[401,8,319,8],[401,12,319,12,"_a"],[401,14,319,14],[402,8,320,8],[402,12,320,16,"result"],[402,18,320,22],[402,21,320,39],[402,25,320,43],[402,26,320,16,"result"],[402,32,320,22],[403,10,320,24,"decodeTree"],[403,20,320,34],[403,23,320,39],[403,27,320,43],[403,28,320,24,"decodeTree"],[403,38,320,34],[404,8,321,8],[404,12,321,14,"valueLength"],[404,23,321,25],[404,26,321,28],[404,27,321,29,"decodeTree"],[404,37,321,39],[404,38,321,40,"result"],[404,44,321,46],[404,45,321,47],[404,48,321,50,"BinTrieFlags"],[404,60,321,62],[404,61,321,63,"VALUE_LENGTH"],[404,73,321,75],[404,78,321,80],[404,80,321,82],[405,8,322,8],[405,12,322,12],[405,13,322,13,"emitNamedEntityData"],[405,32,322,32],[405,33,322,33,"result"],[405,39,322,39],[405,41,322,41,"valueLength"],[405,52,322,52],[405,54,322,54],[405,58,322,58],[405,59,322,59,"consumed"],[405,67,322,67],[405,68,322,68],[406,8,323,8],[406,9,323,9,"_a"],[406,11,323,11],[406,14,323,14],[406,18,323,18],[406,19,323,19,"errors"],[406,25,323,25],[406,31,323,31],[406,35,323,35],[406,39,323,39,"_a"],[406,41,323,41],[406,46,323,46],[406,51,323,51],[406,52,323,52],[406,55,323,55],[406,60,323,60],[406,61,323,61],[406,64,323,64,"_a"],[406,66,323,66],[406,67,323,67,"missingSemicolonAfterCharacterReference"],[406,106,323,106],[406,107,323,107],[406,108,323,108],[407,8,324,8],[407,15,324,15],[407,19,324,19],[407,20,324,20,"consumed"],[407,28,324,28],[408,6,325,4],[409,6,326,4],[410,0,327,0],[411,0,328,0],[412,0,329,0],[413,0,330,0],[414,0,331,0],[415,0,332,0],[416,0,333,0],[417,0,334,0],[418,4,326,4],[419,6,326,4,"key"],[419,9,326,4],[420,6,326,4,"value"],[420,11,326,4],[420,13,335,4],[420,22,335,4,"emitNamedEntityData"],[420,41,335,23,"emitNamedEntityData"],[420,42,335,24,"result"],[420,48,335,30],[420,50,335,32,"valueLength"],[420,61,335,43],[420,63,335,45,"consumed"],[420,71,335,53],[420,73,335,55],[421,8,336,8],[421,12,336,16,"decodeTree"],[421,22,336,26],[421,25,336,31],[421,29,336,35],[421,30,336,16,"decodeTree"],[421,40,336,26],[422,8,337,8],[422,12,337,12],[422,13,337,13,"emitCodePoint"],[422,26,337,26],[422,27,337,27,"valueLength"],[422,38,337,38],[422,43,337,43],[422,44,337,44],[422,47,338,14,"decodeTree"],[422,57,338,24],[422,58,338,25,"result"],[422,64,338,31],[422,65,338,32],[422,68,338,35],[422,69,338,36,"BinTrieFlags"],[422,81,338,48],[422,82,338,49,"VALUE_LENGTH"],[422,94,338,61],[422,97,339,14,"decodeTree"],[422,107,339,24],[422,108,339,25,"result"],[422,114,339,31],[422,117,339,34],[422,118,339,35],[422,119,339,36],[422,121,339,38,"consumed"],[422,129,339,46],[422,130,339,47],[423,8,340,8],[423,12,340,12,"valueLength"],[423,23,340,23],[423,28,340,28],[423,29,340,29],[423,31,340,31],[424,10,341,12],[425,10,342,12],[425,14,342,16],[425,15,342,17,"emitCodePoint"],[425,28,342,30],[425,29,342,31,"decodeTree"],[425,39,342,41],[425,40,342,42,"result"],[425,46,342,48],[425,49,342,51],[425,50,342,52],[425,51,342,53],[425,53,342,55,"consumed"],[425,61,342,63],[425,62,342,64],[426,8,343,8],[427,8,344,8],[427,15,344,15,"consumed"],[427,23,344,23],[428,6,345,4],[429,6,346,4],[430,0,347,0],[431,0,348,0],[432,0,349,0],[433,0,350,0],[434,0,351,0],[435,0,352,0],[436,4,346,4],[437,6,346,4,"key"],[437,9,346,4],[438,6,346,4,"value"],[438,11,346,4],[438,13,353,4],[438,22,353,4,"end"],[438,25,353,7,"end"],[438,26,353,7],[438,28,353,10],[439,8,354,8],[439,12,354,12,"_a"],[439,14,354,14],[440,8,355,8],[440,16,355,16],[440,20,355,20],[440,21,355,21,"state"],[440,26,355,26],[441,10,356,12],[441,15,356,17,"EntityDecoderState"],[441,33,356,35],[441,34,356,36,"NamedEntity"],[441,45,356,47],[442,12,356,49],[443,14,357,16],[444,14,358,16],[444,21,358,23],[444,25,358,27],[444,26,358,28,"result"],[444,32,358,34],[444,37,358,39],[444,38,358,40],[444,43,359,21],[444,47,359,25],[444,48,359,26,"decodeMode"],[444,58,359,36],[444,63,359,41,"DecodingMode"],[444,75,359,53],[444,76,359,54,"Attribute"],[444,85,359,63],[444,89,360,24],[444,93,360,28],[444,94,360,29,"result"],[444,100,360,35],[444,105,360,40],[444,109,360,44],[444,110,360,45,"treeIndex"],[444,119,360,54],[444,120,360,55],[444,123,361,22],[444,127,361,26],[444,128,361,27,"emitNotTerminatedNamedEntity"],[444,156,361,55],[444,157,361,56],[444,158,361,57],[444,161,362,22],[444,162,362,23],[445,12,363,12],[446,10,364,12],[447,10,365,12],[447,15,365,17,"EntityDecoderState"],[447,33,365,35],[447,34,365,36,"NumericDecimal"],[447,48,365,50],[448,12,365,52],[449,14,366,16],[449,21,366,23],[449,25,366,27],[449,26,366,28,"emitNumericEntity"],[449,43,366,45],[449,44,366,46],[449,45,366,47],[449,47,366,49],[449,48,366,50],[449,49,366,51],[450,12,367,12],[451,10,368,12],[451,15,368,17,"EntityDecoderState"],[451,33,368,35],[451,34,368,36,"NumericHex"],[451,44,368,46],[452,12,368,48],[453,14,369,16],[453,21,369,23],[453,25,369,27],[453,26,369,28,"emitNumericEntity"],[453,43,369,45],[453,44,369,46],[453,45,369,47],[453,47,369,49],[453,48,369,50],[453,49,369,51],[454,12,370,12],[455,10,371,12],[455,15,371,17,"EntityDecoderState"],[455,33,371,35],[455,34,371,36,"NumericStart"],[455,46,371,48],[456,12,371,50],[457,14,372,16],[457,15,372,17,"_a"],[457,17,372,19],[457,20,372,22],[457,24,372,26],[457,25,372,27,"errors"],[457,31,372,33],[457,37,372,39],[457,41,372,43],[457,45,372,47,"_a"],[457,47,372,49],[457,52,372,54],[457,57,372,59],[457,58,372,60],[457,61,372,63],[457,66,372,68],[457,67,372,69],[457,70,372,72,"_a"],[457,72,372,74],[457,73,372,75,"absenceOfDigitsInNumericCharacterReference"],[457,115,372,117],[457,116,372,118],[457,120,372,122],[457,121,372,123,"consumed"],[457,129,372,131],[457,130,372,132],[458,14,373,16],[458,21,373,23],[458,22,373,24],[459,12,374,12],[460,10,375,12],[460,15,375,17,"EntityDecoderState"],[460,33,375,35],[460,34,375,36,"EntityStart"],[460,45,375,47],[461,12,375,49],[462,14,376,16],[463,14,377,16],[463,21,377,23],[463,22,377,24],[464,12,378,12],[465,8,379,8],[466,6,380,4],[467,4,380,5],[468,2,380,5],[469,2,382,0],[470,0,383,0],[471,0,384,0],[472,0,385,0],[473,0,386,0],[474,0,387,0],[475,2,388,0],[475,11,388,9,"getDecoder"],[475,21,388,19,"getDecoder"],[475,22,388,20,"decodeTree"],[475,32,388,30],[475,34,388,32],[476,4,389,4],[476,8,389,8,"ret"],[476,11,389,11],[476,14,389,14],[476,16,389,16],[477,4,390,4],[477,8,390,10,"decoder"],[477,15,390,17],[477,18,390,20],[477,22,390,24,"EntityDecoder"],[477,35,390,37],[477,36,390,38,"decodeTree"],[477,46,390,48],[477,48,390,51,"str"],[477,51,390,54],[477,55,390,60,"ret"],[477,58,390,63],[477,62,390,67],[477,66,390,67,"fromCodePoint"],[477,85,390,80],[477,86,390,80,"fromCodePoint"],[477,99,390,80],[477,101,390,81,"str"],[477,104,390,84],[477,105,390,86],[477,106,390,87],[478,4,391,4],[478,11,391,11],[478,20,391,20,"decodeWithTrie"],[478,34,391,34,"decodeWithTrie"],[478,35,391,35,"str"],[478,38,391,38],[478,40,391,40,"decodeMode"],[478,50,391,50],[478,52,391,52],[479,6,392,8],[479,10,392,12,"lastIndex"],[479,19,392,21],[479,22,392,24],[479,23,392,25],[480,6,393,8],[480,10,393,12,"offset"],[480,16,393,18],[480,19,393,21],[480,20,393,22],[481,6,394,8],[481,13,394,15],[481,14,394,16,"offset"],[481,20,394,22],[481,23,394,25,"str"],[481,26,394,28],[481,27,394,29,"indexOf"],[481,34,394,36],[481,35,394,37],[481,38,394,40],[481,40,394,42,"offset"],[481,46,394,48],[481,47,394,49],[481,52,394,54],[481,53,394,55],[481,55,394,57],[482,8,395,12,"ret"],[482,11,395,15],[482,15,395,19,"str"],[482,18,395,22],[482,19,395,23,"slice"],[482,24,395,28],[482,25,395,29,"lastIndex"],[482,34,395,38],[482,36,395,40,"offset"],[482,42,395,46],[482,43,395,47],[483,8,396,12,"decoder"],[483,15,396,19],[483,16,396,20,"startEntity"],[483,27,396,31],[483,28,396,32,"decodeMode"],[483,38,396,42],[483,39,396,43],[484,8,397,12],[484,12,397,18,"len"],[484,15,397,21],[484,18,397,24,"decoder"],[484,25,397,31],[484,26,397,32,"write"],[484,31,397,37],[484,32,397,38,"str"],[484,35,397,41],[485,8,398,12],[486,8,399,12,"offset"],[486,14,399,18],[486,17,399,21],[486,18,399,22],[486,19,399,23],[487,8,400,12],[487,12,400,16,"len"],[487,15,400,19],[487,18,400,22],[487,19,400,23],[487,21,400,25],[488,10,401,16,"lastIndex"],[488,19,401,25],[488,22,401,28,"offset"],[488,28,401,34],[488,31,401,37,"decoder"],[488,38,401,44],[488,39,401,45,"end"],[488,42,401,48],[488,43,401,49],[488,44,401,50],[489,10,402,16],[490,8,403,12],[491,8,404,12,"lastIndex"],[491,17,404,21],[491,20,404,24,"offset"],[491,26,404,30],[491,29,404,33,"len"],[491,32,404,36],[492,8,405,12],[493,8,406,12,"offset"],[493,14,406,18],[493,17,406,21,"len"],[493,20,406,24],[493,25,406,29],[493,26,406,30],[493,29,406,33,"lastIndex"],[493,38,406,42],[493,41,406,45],[493,42,406,46],[493,45,406,49,"lastIndex"],[493,54,406,58],[494,6,407,8],[495,6,408,8],[495,10,408,14,"result"],[495,16,408,20],[495,19,408,23,"ret"],[495,22,408,26],[495,25,408,29,"str"],[495,28,408,32],[495,29,408,33,"slice"],[495,34,408,38],[495,35,408,39,"lastIndex"],[495,44,408,48],[495,45,408,49],[496,6,409,8],[497,6,410,8,"ret"],[497,9,410,11],[497,12,410,14],[497,14,410,16],[498,6,411,8],[498,13,411,15,"result"],[498,19,411,21],[499,4,412,4],[499,5,412,5],[500,2,413,0],[501,2,414,0],[502,0,415,0],[503,0,416,0],[504,0,417,0],[505,0,418,0],[506,0,419,0],[507,0,420,0],[508,0,421,0],[509,0,422,0],[510,0,423,0],[511,2,424,7],[511,11,424,16,"determineBranch"],[511,26,424,31,"determineBranch"],[511,27,424,32,"decodeTree"],[511,37,424,42],[511,39,424,44,"current"],[511,46,424,51],[511,48,424,53,"nodeIdx"],[511,55,424,60],[511,57,424,62,"char"],[511,61,424,66],[511,63,424,68],[512,4,425,4],[512,8,425,10,"branchCount"],[512,19,425,21],[512,22,425,24],[512,23,425,25,"current"],[512,30,425,32],[512,33,425,35,"BinTrieFlags"],[512,45,425,47],[512,46,425,48,"BRANCH_LENGTH"],[512,59,425,61],[512,64,425,66],[512,65,425,67],[513,4,426,4],[513,8,426,10,"jumpOffset"],[513,18,426,20],[513,21,426,23,"current"],[513,28,426,30],[513,31,426,33,"BinTrieFlags"],[513,43,426,45],[513,44,426,46,"JUMP_TABLE"],[513,54,426,56],[514,4,427,4],[515,4,428,4],[515,8,428,8,"branchCount"],[515,19,428,19],[515,24,428,24],[515,25,428,25],[515,27,428,27],[516,6,429,8],[516,13,429,15,"jumpOffset"],[516,23,429,25],[516,28,429,30],[516,29,429,31],[516,33,429,35,"char"],[516,37,429,39],[516,42,429,44,"jumpOffset"],[516,52,429,54],[516,55,429,57,"nodeIdx"],[516,62,429,64],[516,65,429,67],[516,66,429,68],[516,67,429,69],[517,4,430,4],[518,4,431,4],[519,4,432,4],[519,8,432,8,"jumpOffset"],[519,18,432,18],[519,20,432,20],[520,6,433,8],[520,10,433,14,"value"],[520,15,433,19],[520,18,433,22,"char"],[520,22,433,26],[520,25,433,29,"jumpOffset"],[520,35,433,39],[521,6,434,8],[521,13,434,15,"value"],[521,18,434,20],[521,21,434,23],[521,22,434,24],[521,26,434,28,"value"],[521,31,434,33],[521,35,434,37,"branchCount"],[521,46,434,48],[521,49,435,14],[521,50,435,15],[521,51,435,16],[521,54,436,14,"decodeTree"],[521,64,436,24],[521,65,436,25,"nodeIdx"],[521,72,436,32],[521,75,436,35,"value"],[521,80,436,40],[521,81,436,41],[521,84,436,44],[521,85,436,45],[522,4,437,4],[523,4,438,4],[524,4,439,4],[525,4,440,4],[525,8,440,8,"lo"],[525,10,440,10],[525,13,440,13,"nodeIdx"],[525,20,440,20],[526,4,441,4],[526,8,441,8,"hi"],[526,10,441,10],[526,13,441,13,"lo"],[526,15,441,15],[526,18,441,18,"branchCount"],[526,29,441,29],[526,32,441,32],[526,33,441,33],[527,4,442,4],[527,11,442,11,"lo"],[527,13,442,13],[527,17,442,17,"hi"],[527,19,442,19],[527,21,442,21],[528,6,443,8],[528,10,443,14,"mid"],[528,13,443,17],[528,16,443,21,"lo"],[528,18,443,23],[528,21,443,26,"hi"],[528,23,443,28],[528,28,443,34],[528,29,443,35],[529,6,444,8],[529,10,444,14,"midVal"],[529,16,444,20],[529,19,444,23,"decodeTree"],[529,29,444,33],[529,30,444,34,"mid"],[529,33,444,37],[529,34,444,38],[530,6,445,8],[530,10,445,12,"midVal"],[530,16,445,18],[530,19,445,21,"char"],[530,23,445,25],[530,25,445,27],[531,8,446,12,"lo"],[531,10,446,14],[531,13,446,17,"mid"],[531,16,446,20],[531,19,446,23],[531,20,446,24],[532,6,447,8],[532,7,447,9],[532,13,448,13],[532,17,448,17,"midVal"],[532,23,448,23],[532,26,448,26,"char"],[532,30,448,30],[532,32,448,32],[533,8,449,12,"hi"],[533,10,449,14],[533,13,449,17,"mid"],[533,16,449,20],[533,19,449,23],[533,20,449,24],[534,6,450,8],[534,7,450,9],[534,13,451,13],[535,8,452,12],[535,15,452,19,"decodeTree"],[535,25,452,29],[535,26,452,30,"mid"],[535,29,452,33],[535,32,452,36,"branchCount"],[535,43,452,47],[535,44,452,48],[536,6,453,8],[537,4,454,4],[538,4,455,4],[538,11,455,11],[538,12,455,12],[538,13,455,13],[539,2,456,0],[540,2,457,0],[540,6,457,6,"htmlDecoder"],[540,17,457,17],[540,20,457,20,"getDecoder"],[540,30,457,30],[540,31,457,31,"htmlDecodeTree"],[540,45,457,45],[540,46,457,45,"default"],[540,53,457,45],[540,54,457,46],[541,2,458,0],[541,6,458,6,"xmlDecoder"],[541,16,458,16],[541,19,458,19,"getDecoder"],[541,29,458,29],[541,30,458,30,"xmlDecodeTree"],[541,43,458,43],[541,44,458,43,"default"],[541,51,458,43],[541,52,458,44],[542,2,459,0],[543,0,460,0],[544,0,461,0],[545,0,462,0],[546,0,463,0],[547,0,464,0],[548,0,465,0],[549,2,466,7],[549,11,466,16,"decodeHTML"],[549,21,466,26,"decodeHTML"],[549,22,466,27,"str"],[549,25,466,30],[549,27,466,60],[550,4,466,60],[550,8,466,32,"mode"],[550,12,466,36],[550,15,466,36,"arguments"],[550,24,466,36],[550,25,466,36,"length"],[550,31,466,36],[550,39,466,36,"arguments"],[550,48,466,36],[550,56,466,36,"undefined"],[550,65,466,36],[550,68,466,36,"arguments"],[550,77,466,36],[550,83,466,39,"DecodingMode"],[550,95,466,51],[550,96,466,52,"Legacy"],[550,102,466,58],[551,4,467,4],[551,11,467,11,"htmlDecoder"],[551,22,467,22],[551,23,467,23,"str"],[551,26,467,26],[551,28,467,28,"mode"],[551,32,467,32],[551,33,467,33],[552,2,468,0],[553,2,469,0],[554,0,470,0],[555,0,471,0],[556,0,472,0],[557,0,473,0],[558,0,474,0],[559,2,475,7],[559,11,475,16,"decodeHTMLAttribute"],[559,30,475,35,"decodeHTMLAttribute"],[559,31,475,36,"str"],[559,34,475,39],[559,36,475,41],[560,4,476,4],[560,11,476,11,"htmlDecoder"],[560,22,476,22],[560,23,476,23,"str"],[560,26,476,26],[560,28,476,28,"DecodingMode"],[560,40,476,40],[560,41,476,41,"Attribute"],[560,50,476,50],[560,51,476,51],[561,2,477,0],[562,2,478,0],[563,0,479,0],[564,0,480,0],[565,0,481,0],[566,0,482,0],[567,0,483,0],[568,2,484,7],[568,11,484,16,"decodeHTMLStrict"],[568,27,484,32,"decodeHTMLStrict"],[568,28,484,33,"str"],[568,31,484,36],[568,33,484,38],[569,4,485,4],[569,11,485,11,"htmlDecoder"],[569,22,485,22],[569,23,485,23,"str"],[569,26,485,26],[569,28,485,28,"DecodingMode"],[569,40,485,40],[569,41,485,41,"Strict"],[569,47,485,47],[569,48,485,48],[570,2,486,0],[571,2,487,0],[572,0,488,0],[573,0,489,0],[574,0,490,0],[575,0,491,0],[576,0,492,0],[577,2,493,7],[577,11,493,16,"decodeXML"],[577,20,493,25,"decodeXML"],[577,21,493,26,"str"],[577,24,493,29],[577,26,493,31],[578,4,494,4],[578,11,494,11,"xmlDecoder"],[578,21,494,21],[578,22,494,22,"str"],[578,25,494,25],[578,27,494,27,"DecodingMode"],[578,39,494,39],[578,40,494,40,"Strict"],[578,46,494,46],[578,47,494,47],[579,2,495,0],[580,0,495,1],[580,3]],"functionMap":{"names":["<global>","<anonymous>","isNumber","isHexadecimalCharacter","isAsciiAlphaNumeric","isEntityInAttributeInvalidEnd","EntityDecoder","EntityDecoder#constructor","EntityDecoder#startEntity","EntityDecoder#write","EntityDecoder#stateNumericStart","EntityDecoder#addToNumericResult","EntityDecoder#stateNumericHex","EntityDecoder#stateNumericDecimal","EntityDecoder#emitNumericEntity","EntityDecoder#stateNamedEntity","EntityDecoder#emitNotTerminatedNamedEntity","EntityDecoder#emitNamedEntityData","EntityDecoder#end","getDecoder","EntityDecoder$argument_1","decodeWithTrie","determineBranch","decodeHTML","decodeHTMLAttribute","decodeHTMLStrict","decodeXML"],"mappings":"AAA;CCO;CDa;CCI;CDI;AEC;CFE;AGC;CHG;AIC;CJI;AKO;CLE;CCE;CDM;CCE;CDO;OMI;ICC;KDmC;IEE;KFO;IGY;KHwB;IIU;KJW;IKC;KLQ;IMU;KNc;IOU;KPc;IQc;KRsB;ISU;KToC;IUM;KVO;IWU;KXU;IYQ;KZ2B;CNC;AmBO;kDCE,oCD;WEC;KFqB;CnBC;OsBW;CtBgC;OuBU;CvBE;OwBO;CxBE;OyBO;CzBE;O0BO;C1BE"},"hasCjsExports":false},"type":"js/module"}]}