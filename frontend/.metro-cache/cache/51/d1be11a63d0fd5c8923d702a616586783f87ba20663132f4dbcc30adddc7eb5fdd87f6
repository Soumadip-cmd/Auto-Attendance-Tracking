{"dependencies":[{"name":"./generated/encode-html.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"AbyChXI0bUIec9vrJ3VJKE7QZUU=","exportNames":["*"],"imports":1}},{"name":"./escape.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":56,"index":107}}],"key":"UH58AP7bAaTVvEXDEcnZ5I6tNHw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.encodeHTML = encodeHTML;\n  exports.encodeNonAsciiHTML = encodeNonAsciiHTML;\n  var _generatedEncodeHtmlJs = require(_dependencyMap[0], \"./generated/encode-html.js\");\n  var htmlTrie = _interopDefault(_generatedEncodeHtmlJs);\n  var _escapeJs = require(_dependencyMap[1], \"./escape.js\");\n  var htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n  /**\n   * Encodes all characters in the input using HTML entities. This includes\n   * characters that are valid ASCII characters in HTML documents, such as `#`.\n   *\n   * To get a more compact output, consider using the `encodeNonAsciiHTML`\n   * function, which will only encode characters that are not valid in HTML\n   * documents, as well as non-ASCII characters.\n   *\n   * If a character has no equivalent entity, a numeric hexadecimal reference\n   * (eg. `&#xfc;`) will be used.\n   */\n  function encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n  }\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in HTML\n   * documents using HTML entities. This function will not encode characters that\n   * are valid in HTML documents, such as `#`.\n   *\n   * If a character has no equivalent entity, a numeric hexadecimal reference\n   * (eg. `&#xfc;`) will be used.\n   */\n  function encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(_escapeJs.xmlReplacer, data);\n  }\n  function encodeHTMLTrieRe(regExp, str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = regExp.exec(str)) !== null) {\n      var i = match.index;\n      ret += str.substring(lastIdx, i);\n      var char = str.charCodeAt(i);\n      var next = htmlTrie.default.get(char);\n      if (typeof next === \"object\") {\n        // We are in a branch. Try to match the next char.\n        if (i + 1 < str.length) {\n          var nextChar = str.charCodeAt(i + 1);\n          var value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n          if (value !== undefined) {\n            ret += value;\n            lastIdx = regExp.lastIndex += 1;\n            continue;\n          }\n        }\n        next = next.v;\n      }\n      // We might have a tree node without a value; skip and use a numeric entity.\n      if (next !== undefined) {\n        ret += next;\n        lastIdx = i + 1;\n      } else {\n        var cp = (0, _escapeJs.getCodePoint)(str, i);\n        ret += `&#x${cp.toString(16)};`;\n        // Increase by 1 if we have a surrogate pair\n        lastIdx = regExp.lastIndex += Number(cp !== char);\n      }\n    }\n    return ret + str.substr(lastIdx);\n  }\n});","lineCount":78,"map":[[12,2,15,0,"exports"],[12,9,15,0],[12,10,15,0,"encodeHTML"],[12,20,15,0],[12,23,15,0,"encodeHTML"],[12,33,15,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"encodeNonAsciiHTML"],[13,28,26,0],[13,31,26,0,"encodeNonAsciiHTML"],[13,49,26,0],[14,2,1,0],[14,6,1,0,"_generatedEncodeHtmlJs"],[14,28,1,0],[14,31,1,0,"require"],[14,38,1,0],[14,39,1,0,"_dependencyMap"],[14,53,1,0],[15,2,1,0],[15,6,1,0,"htmlTrie"],[15,14,1,0],[15,17,1,0,"_interopDefault"],[15,32,1,0],[15,33,1,0,"_generatedEncodeHtmlJs"],[15,55,1,0],[16,2,2,0],[16,6,2,0,"_escapeJs"],[16,15,2,0],[16,18,2,0,"require"],[16,25,2,0],[16,26,2,0,"_dependencyMap"],[16,40,2,0],[17,2,3,0],[17,6,3,6,"htmlReplacer"],[17,18,3,18],[17,21,3,21],[17,58,3,58],[18,2,4,0],[19,0,5,0],[20,0,6,0],[21,0,7,0],[22,0,8,0],[23,0,9,0],[24,0,10,0],[25,0,11,0],[26,0,12,0],[27,0,13,0],[28,0,14,0],[29,2,15,7],[29,11,15,16,"encodeHTML"],[29,21,15,26,"encodeHTML"],[29,22,15,27,"data"],[29,26,15,31],[29,28,15,33],[30,4,16,4],[30,11,16,11,"encodeHTMLTrieRe"],[30,27,16,27],[30,28,16,28,"htmlReplacer"],[30,40,16,40],[30,42,16,42,"data"],[30,46,16,46],[30,47,16,47],[31,2,17,0],[32,2,18,0],[33,0,19,0],[34,0,20,0],[35,0,21,0],[36,0,22,0],[37,0,23,0],[38,0,24,0],[39,0,25,0],[40,2,26,7],[40,11,26,16,"encodeNonAsciiHTML"],[40,29,26,34,"encodeNonAsciiHTML"],[40,30,26,35,"data"],[40,34,26,39],[40,36,26,41],[41,4,27,4],[41,11,27,11,"encodeHTMLTrieRe"],[41,27,27,27],[41,28,27,28,"xmlReplacer"],[41,37,27,39],[41,38,27,39,"xmlReplacer"],[41,49,27,39],[41,51,27,41,"data"],[41,55,27,45],[41,56,27,46],[42,2,28,0],[43,2,29,0],[43,11,29,9,"encodeHTMLTrieRe"],[43,27,29,25,"encodeHTMLTrieRe"],[43,28,29,26,"regExp"],[43,34,29,32],[43,36,29,34,"str"],[43,39,29,37],[43,41,29,39],[44,4,30,4],[44,8,30,8,"ret"],[44,11,30,11],[44,14,30,14],[44,16,30,16],[45,4,31,4],[45,8,31,8,"lastIdx"],[45,15,31,15],[45,18,31,18],[45,19,31,19],[46,4,32,4],[46,8,32,8,"match"],[46,13,32,13],[47,4,33,4],[47,11,33,11],[47,12,33,12,"match"],[47,17,33,17],[47,20,33,20,"regExp"],[47,26,33,26],[47,27,33,27,"exec"],[47,31,33,31],[47,32,33,32,"str"],[47,35,33,35],[47,36,33,36],[47,42,33,42],[47,46,33,46],[47,48,33,48],[48,6,34,8],[48,10,34,14,"i"],[48,11,34,15],[48,14,34,18,"match"],[48,19,34,23],[48,20,34,24,"index"],[48,25,34,29],[49,6,35,8,"ret"],[49,9,35,11],[49,13,35,15,"str"],[49,16,35,18],[49,17,35,19,"substring"],[49,26,35,28],[49,27,35,29,"lastIdx"],[49,34,35,36],[49,36,35,38,"i"],[49,37,35,39],[49,38,35,40],[50,6,36,8],[50,10,36,14,"char"],[50,14,36,18],[50,17,36,21,"str"],[50,20,36,24],[50,21,36,25,"charCodeAt"],[50,31,36,35],[50,32,36,36,"i"],[50,33,36,37],[50,34,36,38],[51,6,37,8],[51,10,37,12,"next"],[51,14,37,16],[51,17,37,19,"htmlTrie"],[51,25,37,27],[51,26,37,27,"default"],[51,33,37,27],[51,34,37,28,"get"],[51,37,37,31],[51,38,37,32,"char"],[51,42,37,36],[51,43,37,37],[52,6,38,8],[52,10,38,12],[52,17,38,19,"next"],[52,21,38,23],[52,26,38,28],[52,34,38,36],[52,36,38,38],[53,8,39,12],[54,8,40,12],[54,12,40,16,"i"],[54,13,40,17],[54,16,40,20],[54,17,40,21],[54,20,40,24,"str"],[54,23,40,27],[54,24,40,28,"length"],[54,30,40,34],[54,32,40,36],[55,10,41,16],[55,14,41,22,"nextChar"],[55,22,41,30],[55,25,41,33,"str"],[55,28,41,36],[55,29,41,37,"charCodeAt"],[55,39,41,47],[55,40,41,48,"i"],[55,41,41,49],[55,44,41,52],[55,45,41,53],[55,46,41,54],[56,10,42,16],[56,14,42,22,"value"],[56,19,42,27],[56,22,42,30],[56,29,42,37,"next"],[56,33,42,41],[56,34,42,42,"n"],[56,35,42,43],[56,40,42,48],[56,48,42,56],[56,51,43,22,"next"],[56,55,43,26],[56,56,43,27,"n"],[56,57,43,28],[56,62,43,33,"nextChar"],[56,70,43,41],[56,73,44,26,"next"],[56,77,44,30],[56,78,44,31,"o"],[56,79,44,32],[56,82,45,26,"undefined"],[56,91,45,35],[56,94,46,22,"next"],[56,98,46,26],[56,99,46,27,"n"],[56,100,46,28],[56,101,46,29,"get"],[56,104,46,32],[56,105,46,33,"nextChar"],[56,113,46,41],[56,114,46,42],[57,10,47,16],[57,14,47,20,"value"],[57,19,47,25],[57,24,47,30,"undefined"],[57,33,47,39],[57,35,47,41],[58,12,48,20,"ret"],[58,15,48,23],[58,19,48,27,"value"],[58,24,48,32],[59,12,49,20,"lastIdx"],[59,19,49,27],[59,22,49,30,"regExp"],[59,28,49,36],[59,29,49,37,"lastIndex"],[59,38,49,46],[59,42,49,50],[59,43,49,51],[60,12,50,20],[61,10,51,16],[62,8,52,12],[63,8,53,12,"next"],[63,12,53,16],[63,15,53,19,"next"],[63,19,53,23],[63,20,53,24,"v"],[63,21,53,25],[64,6,54,8],[65,6,55,8],[66,6,56,8],[66,10,56,12,"next"],[66,14,56,16],[66,19,56,21,"undefined"],[66,28,56,30],[66,30,56,32],[67,8,57,12,"ret"],[67,11,57,15],[67,15,57,19,"next"],[67,19,57,23],[68,8,58,12,"lastIdx"],[68,15,58,19],[68,18,58,22,"i"],[68,19,58,23],[68,22,58,26],[68,23,58,27],[69,6,59,8],[69,7,59,9],[69,13,60,13],[70,8,61,12],[70,12,61,18,"cp"],[70,14,61,20],[70,17,61,23],[70,21,61,23,"getCodePoint"],[70,30,61,35],[70,31,61,35,"getCodePoint"],[70,43,61,35],[70,45,61,36,"str"],[70,48,61,39],[70,50,61,41,"i"],[70,51,61,42],[70,52,61,43],[71,8,62,12,"ret"],[71,11,62,15],[71,15,62,19],[71,21,62,25,"cp"],[71,23,62,27],[71,24,62,28,"toString"],[71,32,62,36],[71,33,62,37],[71,35,62,39],[71,36,62,40],[71,39,62,43],[72,8,63,12],[73,8,64,12,"lastIdx"],[73,15,64,19],[73,18,64,22,"regExp"],[73,24,64,28],[73,25,64,29,"lastIndex"],[73,34,64,38],[73,38,64,42,"Number"],[73,44,64,48],[73,45,64,49,"cp"],[73,47,64,51],[73,52,64,56,"char"],[73,56,64,60],[73,57,64,61],[74,6,65,8],[75,4,66,4],[76,4,67,4],[76,11,67,11,"ret"],[76,14,67,14],[76,17,67,17,"str"],[76,20,67,20],[76,21,67,21,"substr"],[76,27,67,27],[76,28,67,28,"lastIdx"],[76,35,67,35],[76,36,67,36],[77,2,68,0],[78,0,68,1],[78,3]],"functionMap":{"names":["<global>","encodeHTML","encodeNonAsciiHTML","encodeHTMLTrieRe"],"mappings":"AAA;OCc;CDE;OES;CFE;AGC;CHuC"},"hasCjsExports":false},"type":"js/module"}]}