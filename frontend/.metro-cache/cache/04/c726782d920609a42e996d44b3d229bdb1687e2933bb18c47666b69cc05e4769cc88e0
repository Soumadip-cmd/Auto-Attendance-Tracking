{"dependencies":[{"name":"../common/TokenStream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":50,"index":50}}],"key":"vGDH+tOFOSMdeulZRr3iYmyZGhY=","exportNames":["*"],"imports":1}},{"name":"../common/adopt-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":70},"end":{"line":2,"column":51,"index":103}}],"key":"9zv+x4PheedFhp1g6FLc84wbcIY=","exportNames":["*"],"imports":1}},{"name":"./const","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":122},"end":{"line":4,"column":34,"index":140}}],"key":"hBChfLBmOLDPH08/J2hw0EUOhjM=","exportNames":["*"],"imports":1}},{"name":"./char-code-definitions","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":26,"index":196},"end":{"line":7,"column":60,"index":230}}],"key":"x4MUsEEQZGnEfli5zpshTBk5nHM=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":12,"index":606},"end":{"line":16,"column":30,"index":624}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TokenStream = require(_dependencyMap[0], \"../common/TokenStream\");\n  var adoptBuffer = require(_dependencyMap[1], \"../common/adopt-buffer\");\n  var constants = require(_dependencyMap[2], \"./const\");\n  var TYPE = constants.TYPE;\n  var charCodeDefinitions = require(_dependencyMap[3], \"./char-code-definitions\");\n  var isNewline = charCodeDefinitions.isNewline;\n  var isName = charCodeDefinitions.isName;\n  var isValidEscape = charCodeDefinitions.isValidEscape;\n  var isNumberStart = charCodeDefinitions.isNumberStart;\n  var isIdentifierStart = charCodeDefinitions.isIdentifierStart;\n  var charCodeCategory = charCodeDefinitions.charCodeCategory;\n  var isBOM = charCodeDefinitions.isBOM;\n  var utils = require(_dependencyMap[4], \"./utils\");\n  var cmpStr = utils.cmpStr;\n  var getNewlineLength = utils.getNewlineLength;\n  var findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\n  var consumeEscaped = utils.consumeEscaped;\n  var consumeName = utils.consumeName;\n  var consumeNumber = utils.consumeNumber;\n  var consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\n  var OFFSET_MASK = 0x00FFFFFF;\n  var TYPE_SHIFT = 24;\n  function tokenize(source, stream) {\n    function getCharCode(offset) {\n      return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // § 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n      // Consume a number and let number be the result.\n      offset = consumeNumber(source, offset);\n\n      // If the next 3 input code points would start an identifier, then:\n      if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n        // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n        // Consume a name. Set the <dimension-token>’s unit to the returned value.\n        // Return the <dimension-token>.\n        type = TYPE.Dimension;\n        offset = consumeName(source, offset);\n        return;\n      }\n\n      // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n      if (getCharCode(offset) === 0x0025) {\n        // Create a <percentage-token> with the same value as number, and return it.\n        type = TYPE.Percentage;\n        offset++;\n        return;\n      }\n\n      // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n      type = TYPE.Number;\n    }\n\n    // § 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n      var nameStartOffset = offset;\n\n      // Consume a name, and let string be the result.\n      offset = consumeName(source, offset);\n\n      // If string’s value is an ASCII case-insensitive match for \"url\",\n      // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n      if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n        // While the next two input code points are whitespace, consume the next input code point.\n        offset = findWhiteSpaceEnd(source, offset + 1);\n\n        // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n        // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n        // then create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0022 || getCharCode(offset) === 0x0027) {\n          type = TYPE.Function;\n          offset = nameStartOffset + 4;\n          return;\n        }\n\n        // Otherwise, consume a url token, and return it.\n        consumeUrlToken();\n        return;\n      }\n\n      // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n      // Create a <function-token> with its value set to string and return it.\n      if (getCharCode(offset) === 0x0028) {\n        type = TYPE.Function;\n        offset++;\n        return;\n      }\n\n      // Otherwise, create an <ident-token> with its value set to string and return it.\n      type = TYPE.Ident;\n    }\n\n    // § 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n      // This algorithm may be called with an ending code point, which denotes the code point\n      // that ends the string. If an ending code point is not specified,\n      // the current input code point is used.\n      if (!endingCodePoint) {\n        endingCodePoint = getCharCode(offset++);\n      }\n\n      // Initially create a <string-token> with its value set to the empty string.\n      type = TYPE.String;\n\n      // Repeatedly consume the next input code point from the stream:\n      for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n        switch (charCodeCategory(code)) {\n          // ending code point\n          case endingCodePoint:\n            // Return the <string-token>.\n            offset++;\n            return;\n\n          // EOF\n          case charCodeCategory.Eof:\n            // This is a parse error. Return the <string-token>.\n            return;\n\n          // newline\n          case charCodeCategory.WhiteSpace:\n            if (isNewline(code)) {\n              // This is a parse error. Reconsume the current input code point,\n              // create a <bad-string-token>, and return it.\n              offset += getNewlineLength(source, offset, code);\n              type = TYPE.BadString;\n              return;\n            }\n            break;\n\n          // U+005C REVERSE SOLIDUS (\\)\n          case 0x005C:\n            // If the next input code point is EOF, do nothing.\n            if (offset === source.length - 1) {\n              break;\n            }\n            var nextCode = getCharCode(offset + 1);\n\n            // Otherwise, if the next input code point is a newline, consume it.\n            if (isNewline(nextCode)) {\n              offset += getNewlineLength(source, offset + 1, nextCode);\n            } else if (isValidEscape(code, nextCode)) {\n              // Otherwise, (the stream starts with a valid escape) consume\n              // an escaped code point and append the returned code point to\n              // the <string-token>’s value.\n              offset = consumeEscaped(source, offset) - 1;\n            }\n            break;\n\n          // anything else\n          // Append the current input code point to the <string-token>’s value.\n        }\n      }\n    }\n\n    // § 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n    // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n    // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n    function consumeUrlToken() {\n      // Initially create a <url-token> with its value set to the empty string.\n      type = TYPE.Url;\n\n      // Consume as much whitespace as possible.\n      offset = findWhiteSpaceEnd(source, offset);\n\n      // Repeatedly consume the next input code point from the stream:\n      for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n        switch (charCodeCategory(code)) {\n          // U+0029 RIGHT PARENTHESIS ())\n          case 0x0029:\n            // Return the <url-token>.\n            offset++;\n            return;\n\n          // EOF\n          case charCodeCategory.Eof:\n            // This is a parse error. Return the <url-token>.\n            return;\n\n          // whitespace\n          case charCodeCategory.WhiteSpace:\n            // Consume as much whitespace as possible.\n            offset = findWhiteSpaceEnd(source, offset);\n\n            // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n            // consume it and return the <url-token>\n            // (if EOF was encountered, this is a parse error);\n            if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n              if (offset < source.length) {\n                offset++;\n              }\n              return;\n            }\n\n            // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n            // and return it.\n            offset = consumeBadUrlRemnants(source, offset);\n            type = TYPE.BadUrl;\n            return;\n\n          // U+0022 QUOTATION MARK (\")\n          // U+0027 APOSTROPHE (')\n          // U+0028 LEFT PARENTHESIS (()\n          // non-printable code point\n          case 0x0022:\n          case 0x0027:\n          case 0x0028:\n          case charCodeCategory.NonPrintable:\n            // This is a parse error. Consume the remnants of a bad url,\n            // create a <bad-url-token>, and return it.\n            offset = consumeBadUrlRemnants(source, offset);\n            type = TYPE.BadUrl;\n            return;\n\n          // U+005C REVERSE SOLIDUS (\\)\n          case 0x005C:\n            // If the stream starts with a valid escape, consume an escaped code point and\n            // append the returned code point to the <url-token>’s value.\n            if (isValidEscape(code, getCharCode(offset + 1))) {\n              offset = consumeEscaped(source, offset) - 1;\n              break;\n            }\n\n            // Otherwise, this is a parse error. Consume the remnants of a bad url,\n            // create a <bad-url-token>, and return it.\n            offset = consumeBadUrlRemnants(source, offset);\n            type = TYPE.BadUrl;\n            return;\n\n          // anything else\n          // Append the current input code point to the <url-token>’s value.\n        }\n      }\n    }\n    if (!stream) {\n      stream = new TokenStream();\n    }\n\n    // ensure source is a string\n    source = String(source || '');\n    var sourceLength = source.length;\n    var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n    var balance = adoptBuffer(stream.balance, sourceLength + 1);\n    var tokenCount = 0;\n    var start = isBOM(getCharCode(0));\n    var offset = start;\n    var balanceCloseType = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // § 4.3.1. Consume a token\n    while (offset < sourceLength) {\n      var code = source.charCodeAt(offset);\n      var type = 0;\n      balance[tokenCount] = sourceLength;\n      switch (charCodeCategory(code)) {\n        // whitespace\n        case charCodeCategory.WhiteSpace:\n          // Consume as much whitespace as possible. Return a <whitespace-token>.\n          type = TYPE.WhiteSpace;\n          offset = findWhiteSpaceEnd(source, offset + 1);\n          break;\n\n        // U+0022 QUOTATION MARK (\")\n        case 0x0022:\n          // Consume a string token and return it.\n          consumeStringToken();\n          break;\n\n        // U+0023 NUMBER SIGN (#)\n        case 0x0023:\n          // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n          if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <hash-token>.\n            type = TYPE.Hash;\n\n            // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n            // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n            //     // TODO: set id flag\n            // }\n\n            // Consume a name, and set the <hash-token>’s value to the returned string.\n            offset = consumeName(source, offset + 1);\n\n            // Return the <hash-token>.\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+0027 APOSTROPHE (')\n        case 0x0027:\n          // Consume a string token and return it.\n          consumeStringToken();\n          break;\n\n        // U+0028 LEFT PARENTHESIS (()\n        case 0x0028:\n          // Return a <(-token>.\n          type = TYPE.LeftParenthesis;\n          offset++;\n          break;\n\n        // U+0029 RIGHT PARENTHESIS ())\n        case 0x0029:\n          // Return a <)-token>.\n          type = TYPE.RightParenthesis;\n          offset++;\n          break;\n\n        // U+002B PLUS SIGN (+)\n        case 0x002B:\n          // If the input stream starts with a number, ...\n          if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // ... reconsume the current input code point, consume a numeric token, and return it.\n            consumeNumericToken();\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+002C COMMA (,)\n        case 0x002C:\n          // Return a <comma-token>.\n          type = TYPE.Comma;\n          offset++;\n          break;\n\n        // U+002D HYPHEN-MINUS (-)\n        case 0x002D:\n          // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n          if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            consumeNumericToken();\n          } else {\n            // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n            if (getCharCode(offset + 1) === 0x002D && getCharCode(offset + 2) === 0x003E) {\n              type = TYPE.CDC;\n              offset = offset + 3;\n            } else {\n              // Otherwise, if the input stream starts with an identifier, ...\n              if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                // ... reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n              } else {\n                // Otherwise, return a <delim-token> with its value set to the current input code point.\n                type = TYPE.Delim;\n                offset++;\n              }\n            }\n          }\n          break;\n\n        // U+002E FULL STOP (.)\n        case 0x002E:\n          // If the input stream starts with a number, ...\n          if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // ... reconsume the current input code point, consume a numeric token, and return it.\n            consumeNumericToken();\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+002F SOLIDUS (/)\n        case 0x002F:\n          // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n          if (getCharCode(offset + 1) === 0x002A) {\n            // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n            // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n            type = TYPE.Comment;\n            offset = source.indexOf('*/', offset + 2) + 2;\n            if (offset === 1) {\n              offset = source.length;\n            }\n          } else {\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+003A COLON (:)\n        case 0x003A:\n          // Return a <colon-token>.\n          type = TYPE.Colon;\n          offset++;\n          break;\n\n        // U+003B SEMICOLON (;)\n        case 0x003B:\n          // Return a <semicolon-token>.\n          type = TYPE.Semicolon;\n          offset++;\n          break;\n\n        // U+003C LESS-THAN SIGN (<)\n        case 0x003C:\n          // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n          if (getCharCode(offset + 1) === 0x0021 && getCharCode(offset + 2) === 0x002D && getCharCode(offset + 3) === 0x002D) {\n            // ... consume them and return a <CDO-token>.\n            type = TYPE.CDO;\n            offset = offset + 4;\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+0040 COMMERCIAL AT (@)\n        case 0x0040:\n          // If the next 3 input code points would start an identifier, ...\n          if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n            // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n            type = TYPE.AtKeyword;\n            offset = consumeName(source, offset + 1);\n          } else {\n            // Otherwise, return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+005B LEFT SQUARE BRACKET ([)\n        case 0x005B:\n          // Return a <[-token>.\n          type = TYPE.LeftSquareBracket;\n          offset++;\n          break;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the input stream starts with a valid escape, ...\n          if (isValidEscape(code, getCharCode(offset + 1))) {\n            // ... reconsume the current input code point, consume an ident-like token, and return it.\n            consumeIdentLikeToken();\n          } else {\n            // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n            type = TYPE.Delim;\n            offset++;\n          }\n          break;\n\n        // U+005D RIGHT SQUARE BRACKET (])\n        case 0x005D:\n          // Return a <]-token>.\n          type = TYPE.RightSquareBracket;\n          offset++;\n          break;\n\n        // U+007B LEFT CURLY BRACKET ({)\n        case 0x007B:\n          // Return a <{-token>.\n          type = TYPE.LeftCurlyBracket;\n          offset++;\n          break;\n\n        // U+007D RIGHT CURLY BRACKET (})\n        case 0x007D:\n          // Return a <}-token>.\n          type = TYPE.RightCurlyBracket;\n          offset++;\n          break;\n\n        // digit\n        case charCodeCategory.Digit:\n          // Reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n          break;\n\n        // name-start code point\n        case charCodeCategory.NameStart:\n          // Reconsume the current input code point, consume an ident-like token, and return it.\n          consumeIdentLikeToken();\n          break;\n\n        // EOF\n        case charCodeCategory.Eof:\n          // Return an <EOF-token>.\n          break;\n\n        // anything else\n        default:\n          // Return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n      }\n      switch (type) {\n        case balanceCloseType:\n          balancePrev = balanceStart & OFFSET_MASK;\n          balanceStart = balance[balancePrev];\n          balanceCloseType = balanceStart >> TYPE_SHIFT;\n          balance[tokenCount] = balancePrev;\n          balance[balancePrev++] = tokenCount;\n          for (; balancePrev < tokenCount; balancePrev++) {\n            if (balance[balancePrev] === sourceLength) {\n              balance[balancePrev] = tokenCount;\n            }\n          }\n          break;\n        case TYPE.LeftParenthesis:\n        case TYPE.Function:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = TYPE.RightParenthesis;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n        case TYPE.LeftSquareBracket:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = TYPE.RightSquareBracket;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n        case TYPE.LeftCurlyBracket:\n          balance[tokenCount] = balanceStart;\n          balanceCloseType = TYPE.RightCurlyBracket;\n          balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n          break;\n      }\n      offsetAndType[tokenCount++] = type << TYPE_SHIFT | offset;\n    }\n\n    // finalize buffers\n    offsetAndType[tokenCount] = TYPE.EOF << TYPE_SHIFT | offset; // <EOF-token>\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n      balancePrev = balanceStart & OFFSET_MASK;\n      balanceStart = balance[balancePrev];\n      balance[balancePrev] = sourceLength;\n    }\n\n    // update stream\n    stream.source = source;\n    stream.firstCharOffset = start;\n    stream.offsetAndType = offsetAndType;\n    stream.tokenCount = tokenCount;\n    stream.balance = balance;\n    stream.reset();\n    stream.next();\n    return stream;\n  }\n\n  // extend tokenizer with constants\n  Object.keys(constants).forEach(function (key) {\n    tokenize[key] = constants[key];\n  });\n\n  // extend tokenizer with static methods from utils\n  Object.keys(charCodeDefinitions).forEach(function (key) {\n    tokenize[key] = charCodeDefinitions[key];\n  });\n  Object.keys(utils).forEach(function (key) {\n    tokenize[key] = utils[key];\n  });\n  module.exports = tokenize;\n});","lineCount":566,"map":[[2,2,1,0],[2,6,1,4,"TokenStream"],[2,17,1,15],[2,20,1,18,"require"],[2,27,1,25],[2,28,1,25,"_dependencyMap"],[2,42,1,25],[2,70,1,49],[2,71,1,50],[3,2,2,0],[3,6,2,4,"adoptBuffer"],[3,17,2,15],[3,20,2,18,"require"],[3,27,2,25],[3,28,2,25,"_dependencyMap"],[3,42,2,25],[3,71,2,50],[3,72,2,51],[4,2,4,0],[4,6,4,4,"constants"],[4,15,4,13],[4,18,4,16,"require"],[4,25,4,23],[4,26,4,23,"_dependencyMap"],[4,40,4,23],[4,54,4,33],[4,55,4,34],[5,2,5,0],[5,6,5,4,"TYPE"],[5,10,5,8],[5,13,5,11,"constants"],[5,22,5,20],[5,23,5,21,"TYPE"],[5,27,5,25],[6,2,7,0],[6,6,7,4,"charCodeDefinitions"],[6,25,7,23],[6,28,7,26,"require"],[6,35,7,33],[6,36,7,33,"_dependencyMap"],[6,50,7,33],[6,80,7,59],[6,81,7,60],[7,2,8,0],[7,6,8,4,"isNewline"],[7,15,8,13],[7,18,8,16,"charCodeDefinitions"],[7,37,8,35],[7,38,8,36,"isNewline"],[7,47,8,45],[8,2,9,0],[8,6,9,4,"isName"],[8,12,9,10],[8,15,9,13,"charCodeDefinitions"],[8,34,9,32],[8,35,9,33,"isName"],[8,41,9,39],[9,2,10,0],[9,6,10,4,"isValidEscape"],[9,19,10,17],[9,22,10,20,"charCodeDefinitions"],[9,41,10,39],[9,42,10,40,"isValidEscape"],[9,55,10,53],[10,2,11,0],[10,6,11,4,"isNumberStart"],[10,19,11,17],[10,22,11,20,"charCodeDefinitions"],[10,41,11,39],[10,42,11,40,"isNumberStart"],[10,55,11,53],[11,2,12,0],[11,6,12,4,"isIdentifierStart"],[11,23,12,21],[11,26,12,24,"charCodeDefinitions"],[11,45,12,43],[11,46,12,44,"isIdentifierStart"],[11,63,12,61],[12,2,13,0],[12,6,13,4,"charCodeCategory"],[12,22,13,20],[12,25,13,23,"charCodeDefinitions"],[12,44,13,42],[12,45,13,43,"charCodeCategory"],[12,61,13,59],[13,2,14,0],[13,6,14,4,"isBOM"],[13,11,14,9],[13,14,14,12,"charCodeDefinitions"],[13,33,14,31],[13,34,14,32,"isBOM"],[13,39,14,37],[14,2,16,0],[14,6,16,4,"utils"],[14,11,16,9],[14,14,16,12,"require"],[14,21,16,19],[14,22,16,19,"_dependencyMap"],[14,36,16,19],[14,50,16,29],[14,51,16,30],[15,2,17,0],[15,6,17,4,"cmpStr"],[15,12,17,10],[15,15,17,13,"utils"],[15,20,17,18],[15,21,17,19,"cmpStr"],[15,27,17,25],[16,2,18,0],[16,6,18,4,"getNewlineLength"],[16,22,18,20],[16,25,18,23,"utils"],[16,30,18,28],[16,31,18,29,"getNewlineLength"],[16,47,18,45],[17,2,19,0],[17,6,19,4,"findWhiteSpaceEnd"],[17,23,19,21],[17,26,19,24,"utils"],[17,31,19,29],[17,32,19,30,"findWhiteSpaceEnd"],[17,49,19,47],[18,2,20,0],[18,6,20,4,"consumeEscaped"],[18,20,20,18],[18,23,20,21,"utils"],[18,28,20,26],[18,29,20,27,"consumeEscaped"],[18,43,20,41],[19,2,21,0],[19,6,21,4,"consumeName"],[19,17,21,15],[19,20,21,18,"utils"],[19,25,21,23],[19,26,21,24,"consumeName"],[19,37,21,35],[20,2,22,0],[20,6,22,4,"consumeNumber"],[20,19,22,17],[20,22,22,20,"utils"],[20,27,22,25],[20,28,22,26,"consumeNumber"],[20,41,22,39],[21,2,23,0],[21,6,23,4,"consumeBadUrlRemnants"],[21,27,23,25],[21,30,23,28,"utils"],[21,35,23,33],[21,36,23,34,"consumeBadUrlRemnants"],[21,57,23,55],[22,2,25,0],[22,6,25,4,"OFFSET_MASK"],[22,17,25,15],[22,20,25,18],[22,30,25,28],[23,2,26,0],[23,6,26,4,"TYPE_SHIFT"],[23,16,26,14],[23,19,26,17],[23,21,26,19],[24,2,28,0],[24,11,28,9,"tokenize"],[24,19,28,17,"tokenize"],[24,20,28,18,"source"],[24,26,28,24],[24,28,28,26,"stream"],[24,34,28,32],[24,36,28,34],[25,4,29,4],[25,13,29,13,"getCharCode"],[25,24,29,24,"getCharCode"],[25,25,29,25,"offset"],[25,31,29,31],[25,33,29,33],[26,6,30,8],[26,13,30,15,"offset"],[26,19,30,21],[26,22,30,24,"sourceLength"],[26,34,30,36],[26,37,30,39,"source"],[26,43,30,45],[26,44,30,46,"charCodeAt"],[26,54,30,56],[26,55,30,57,"offset"],[26,61,30,63],[26,62,30,64],[26,65,30,67],[26,66,30,68],[27,4,31,4],[29,4,33,4],[30,4,34,4],[30,13,34,13,"consumeNumericToken"],[30,32,34,32,"consumeNumericToken"],[30,33,34,32],[30,35,34,35],[31,6,35,8],[32,6,36,8,"offset"],[32,12,36,14],[32,15,36,17,"consumeNumber"],[32,28,36,30],[32,29,36,31,"source"],[32,35,36,37],[32,37,36,39,"offset"],[32,43,36,45],[32,44,36,46],[34,6,38,8],[35,6,39,8],[35,10,39,12,"isIdentifierStart"],[35,27,39,29],[35,28,39,30,"getCharCode"],[35,39,39,41],[35,40,39,42,"offset"],[35,46,39,48],[35,47,39,49],[35,49,39,51,"getCharCode"],[35,60,39,62],[35,61,39,63,"offset"],[35,67,39,69],[35,70,39,72],[35,71,39,73],[35,72,39,74],[35,74,39,76,"getCharCode"],[35,85,39,87],[35,86,39,88,"offset"],[35,92,39,94],[35,95,39,97],[35,96,39,98],[35,97,39,99],[35,98,39,100],[35,100,39,102],[36,8,40,12],[37,8,41,12],[38,8,42,12],[39,8,43,12,"type"],[39,12,43,16],[39,15,43,19,"TYPE"],[39,19,43,23],[39,20,43,24,"Dimension"],[39,29,43,33],[40,8,44,12,"offset"],[40,14,44,18],[40,17,44,21,"consumeName"],[40,28,44,32],[40,29,44,33,"source"],[40,35,44,39],[40,37,44,41,"offset"],[40,43,44,47],[40,44,44,48],[41,8,45,12],[42,6,46,8],[44,6,48,8],[45,6,49,8],[45,10,49,12,"getCharCode"],[45,21,49,23],[45,22,49,24,"offset"],[45,28,49,30],[45,29,49,31],[45,34,49,36],[45,40,49,42],[45,42,49,44],[46,8,50,12],[47,8,51,12,"type"],[47,12,51,16],[47,15,51,19,"TYPE"],[47,19,51,23],[47,20,51,24,"Percentage"],[47,30,51,34],[48,8,52,12,"offset"],[48,14,52,18],[48,16,52,20],[49,8,53,12],[50,6,54,8],[52,6,56,8],[53,6,57,8,"type"],[53,10,57,12],[53,13,57,15,"TYPE"],[53,17,57,19],[53,18,57,20,"Number"],[53,24,57,26],[54,4,58,4],[56,4,60,4],[57,4,61,4],[57,13,61,13,"consumeIdentLikeToken"],[57,34,61,34,"consumeIdentLikeToken"],[57,35,61,34],[57,37,61,37],[58,6,62,8],[58,10,62,14,"nameStartOffset"],[58,25,62,29],[58,28,62,32,"offset"],[58,34,62,38],[60,6,64,8],[61,6,65,8,"offset"],[61,12,65,14],[61,15,65,17,"consumeName"],[61,26,65,28],[61,27,65,29,"source"],[61,33,65,35],[61,35,65,37,"offset"],[61,41,65,43],[61,42,65,44],[63,6,67,8],[64,6,68,8],[65,6,69,8],[65,10,69,12,"cmpStr"],[65,16,69,18],[65,17,69,19,"source"],[65,23,69,25],[65,25,69,27,"nameStartOffset"],[65,40,69,42],[65,42,69,44,"offset"],[65,48,69,50],[65,50,69,52],[65,55,69,57],[65,56,69,58],[65,60,69,62,"getCharCode"],[65,71,69,73],[65,72,69,74,"offset"],[65,78,69,80],[65,79,69,81],[65,84,69,86],[65,90,69,92],[65,92,69,94],[66,8,70,12],[67,8,71,12,"offset"],[67,14,71,18],[67,17,71,21,"findWhiteSpaceEnd"],[67,34,71,38],[67,35,71,39,"source"],[67,41,71,45],[67,43,71,47,"offset"],[67,49,71,53],[67,52,71,56],[67,53,71,57],[67,54,71,58],[69,8,73,12],[70,8,74,12],[71,8,75,12],[72,8,76,12],[72,12,76,16,"getCharCode"],[72,23,76,27],[72,24,76,28,"offset"],[72,30,76,34],[72,31,76,35],[72,36,76,40],[72,42,76,46],[72,46,77,16,"getCharCode"],[72,57,77,27],[72,58,77,28,"offset"],[72,64,77,34],[72,65,77,35],[72,70,77,40],[72,76,77,46],[72,78,77,48],[73,10,78,16,"type"],[73,14,78,20],[73,17,78,23,"TYPE"],[73,21,78,27],[73,22,78,28,"Function"],[73,30,78,36],[74,10,79,16,"offset"],[74,16,79,22],[74,19,79,25,"nameStartOffset"],[74,34,79,40],[74,37,79,43],[74,38,79,44],[75,10,80,16],[76,8,81,12],[78,8,83,12],[79,8,84,12,"consumeUrlToken"],[79,23,84,27],[79,24,84,28],[79,25,84,29],[80,8,85,12],[81,6,86,8],[83,6,88,8],[84,6,89,8],[85,6,90,8],[85,10,90,12,"getCharCode"],[85,21,90,23],[85,22,90,24,"offset"],[85,28,90,30],[85,29,90,31],[85,34,90,36],[85,40,90,42],[85,42,90,44],[86,8,91,12,"type"],[86,12,91,16],[86,15,91,19,"TYPE"],[86,19,91,23],[86,20,91,24,"Function"],[86,28,91,32],[87,8,92,12,"offset"],[87,14,92,18],[87,16,92,20],[88,8,93,12],[89,6,94,8],[91,6,96,8],[92,6,97,8,"type"],[92,10,97,12],[92,13,97,15,"TYPE"],[92,17,97,19],[92,18,97,20,"Ident"],[92,23,97,25],[93,4,98,4],[95,4,100,4],[96,4,101,4],[96,13,101,13,"consumeStringToken"],[96,31,101,31,"consumeStringToken"],[96,32,101,32,"endingCodePoint"],[96,47,101,47],[96,49,101,49],[97,6,102,8],[98,6,103,8],[99,6,104,8],[100,6,105,8],[100,10,105,12],[100,11,105,13,"endingCodePoint"],[100,26,105,28],[100,28,105,30],[101,8,106,12,"endingCodePoint"],[101,23,106,27],[101,26,106,30,"getCharCode"],[101,37,106,41],[101,38,106,42,"offset"],[101,44,106,48],[101,46,106,50],[101,47,106,51],[102,6,107,8],[104,6,109,8],[105,6,110,8,"type"],[105,10,110,12],[105,13,110,15,"TYPE"],[105,17,110,19],[105,18,110,20,"String"],[105,24,110,26],[107,6,112,8],[108,6,113,8],[108,13,113,15,"offset"],[108,19,113,21],[108,22,113,24,"source"],[108,28,113,30],[108,29,113,31,"length"],[108,35,113,37],[108,37,113,39,"offset"],[108,43,113,45],[108,45,113,47],[108,47,113,49],[109,8,114,12],[109,12,114,16,"code"],[109,16,114,20],[109,19,114,23,"source"],[109,25,114,29],[109,26,114,30,"charCodeAt"],[109,36,114,40],[109,37,114,41,"offset"],[109,43,114,47],[109,44,114,48],[110,8,116,12],[110,16,116,20,"charCodeCategory"],[110,32,116,36],[110,33,116,37,"code"],[110,37,116,41],[110,38,116,42],[111,10,117,16],[112,10,118,16],[112,15,118,21,"endingCodePoint"],[112,30,118,36],[113,12,119,20],[114,12,120,20,"offset"],[114,18,120,26],[114,20,120,28],[115,12,121,20],[117,10,123,16],[118,10,124,16],[118,15,124,21,"charCodeCategory"],[118,31,124,37],[118,32,124,38,"Eof"],[118,35,124,41],[119,12,125,20],[120,12,126,20],[122,10,128,16],[123,10,129,16],[123,15,129,21,"charCodeCategory"],[123,31,129,37],[123,32,129,38,"WhiteSpace"],[123,42,129,48],[124,12,130,20],[124,16,130,24,"isNewline"],[124,25,130,33],[124,26,130,34,"code"],[124,30,130,38],[124,31,130,39],[124,33,130,41],[125,14,131,24],[126,14,132,24],[127,14,133,24,"offset"],[127,20,133,30],[127,24,133,34,"getNewlineLength"],[127,40,133,50],[127,41,133,51,"source"],[127,47,133,57],[127,49,133,59,"offset"],[127,55,133,65],[127,57,133,67,"code"],[127,61,133,71],[127,62,133,72],[128,14,134,24,"type"],[128,18,134,28],[128,21,134,31,"TYPE"],[128,25,134,35],[128,26,134,36,"BadString"],[128,35,134,45],[129,14,135,24],[130,12,136,20],[131,12,137,20],[133,10,139,16],[134,10,140,16],[134,15,140,21],[134,21,140,27],[135,12,141,20],[136,12,142,20],[136,16,142,24,"offset"],[136,22,142,30],[136,27,142,35,"source"],[136,33,142,41],[136,34,142,42,"length"],[136,40,142,48],[136,43,142,51],[136,44,142,52],[136,46,142,54],[137,14,143,24],[138,12,144,20],[139,12,146,20],[139,16,146,24,"nextCode"],[139,24,146,32],[139,27,146,35,"getCharCode"],[139,38,146,46],[139,39,146,47,"offset"],[139,45,146,53],[139,48,146,56],[139,49,146,57],[139,50,146,58],[141,12,148,20],[142,12,149,20],[142,16,149,24,"isNewline"],[142,25,149,33],[142,26,149,34,"nextCode"],[142,34,149,42],[142,35,149,43],[142,37,149,45],[143,14,150,24,"offset"],[143,20,150,30],[143,24,150,34,"getNewlineLength"],[143,40,150,50],[143,41,150,51,"source"],[143,47,150,57],[143,49,150,59,"offset"],[143,55,150,65],[143,58,150,68],[143,59,150,69],[143,61,150,71,"nextCode"],[143,69,150,79],[143,70,150,80],[144,12,151,20],[144,13,151,21],[144,19,151,27],[144,23,151,31,"isValidEscape"],[144,36,151,44],[144,37,151,45,"code"],[144,41,151,49],[144,43,151,51,"nextCode"],[144,51,151,59],[144,52,151,60],[144,54,151,62],[145,14,152,24],[146,14,153,24],[147,14,154,24],[148,14,155,24,"offset"],[148,20,155,30],[148,23,155,33,"consumeEscaped"],[148,37,155,47],[148,38,155,48,"source"],[148,44,155,54],[148,46,155,56,"offset"],[148,52,155,62],[148,53,155,63],[148,56,155,66],[148,57,155,67],[149,12,156,20],[150,12,157,20],[152,10,159,16],[153,10,160,16],[154,8,161,12],[155,6,162,8],[156,4,163,4],[158,4,165,4],[159,4,166,4],[160,4,167,4],[161,4,168,4],[162,4,169,4],[163,4,170,4],[163,13,170,13,"consumeUrlToken"],[163,28,170,28,"consumeUrlToken"],[163,29,170,28],[163,31,170,31],[164,6,171,8],[165,6,172,8,"type"],[165,10,172,12],[165,13,172,15,"TYPE"],[165,17,172,19],[165,18,172,20,"Url"],[165,21,172,23],[167,6,174,8],[168,6,175,8,"offset"],[168,12,175,14],[168,15,175,17,"findWhiteSpaceEnd"],[168,32,175,34],[168,33,175,35,"source"],[168,39,175,41],[168,41,175,43,"offset"],[168,47,175,49],[168,48,175,50],[170,6,177,8],[171,6,178,8],[171,13,178,15,"offset"],[171,19,178,21],[171,22,178,24,"source"],[171,28,178,30],[171,29,178,31,"length"],[171,35,178,37],[171,37,178,39,"offset"],[171,43,178,45],[171,45,178,47],[171,47,178,49],[172,8,179,12],[172,12,179,16,"code"],[172,16,179,20],[172,19,179,23,"source"],[172,25,179,29],[172,26,179,30,"charCodeAt"],[172,36,179,40],[172,37,179,41,"offset"],[172,43,179,47],[172,44,179,48],[173,8,181,12],[173,16,181,20,"charCodeCategory"],[173,32,181,36],[173,33,181,37,"code"],[173,37,181,41],[173,38,181,42],[174,10,182,16],[175,10,183,16],[175,15,183,21],[175,21,183,27],[176,12,184,20],[177,12,185,20,"offset"],[177,18,185,26],[177,20,185,28],[178,12,186,20],[180,10,188,16],[181,10,189,16],[181,15,189,21,"charCodeCategory"],[181,31,189,37],[181,32,189,38,"Eof"],[181,35,189,41],[182,12,190,20],[183,12,191,20],[185,10,193,16],[186,10,194,16],[186,15,194,21,"charCodeCategory"],[186,31,194,37],[186,32,194,38,"WhiteSpace"],[186,42,194,48],[187,12,195,20],[188,12,196,20,"offset"],[188,18,196,26],[188,21,196,29,"findWhiteSpaceEnd"],[188,38,196,46],[188,39,196,47,"source"],[188,45,196,53],[188,47,196,55,"offset"],[188,53,196,61],[188,54,196,62],[190,12,198,20],[191,12,199,20],[192,12,200,20],[193,12,201,20],[193,16,201,24,"getCharCode"],[193,27,201,35],[193,28,201,36,"offset"],[193,34,201,42],[193,35,201,43],[193,40,201,48],[193,46,201,54],[193,50,201,58,"offset"],[193,56,201,64],[193,60,201,68,"source"],[193,66,201,74],[193,67,201,75,"length"],[193,73,201,81],[193,75,201,83],[194,14,202,24],[194,18,202,28,"offset"],[194,24,202,34],[194,27,202,37,"source"],[194,33,202,43],[194,34,202,44,"length"],[194,40,202,50],[194,42,202,52],[195,16,203,28,"offset"],[195,22,203,34],[195,24,203,36],[196,14,204,24],[197,14,205,24],[198,12,206,20],[200,12,208,20],[201,12,209,20],[202,12,210,20,"offset"],[202,18,210,26],[202,21,210,29,"consumeBadUrlRemnants"],[202,42,210,50],[202,43,210,51,"source"],[202,49,210,57],[202,51,210,59,"offset"],[202,57,210,65],[202,58,210,66],[203,12,211,20,"type"],[203,16,211,24],[203,19,211,27,"TYPE"],[203,23,211,31],[203,24,211,32,"BadUrl"],[203,30,211,38],[204,12,212,20],[206,10,214,16],[207,10,215,16],[208,10,216,16],[209,10,217,16],[210,10,218,16],[210,15,218,21],[210,21,218,27],[211,10,219,16],[211,15,219,21],[211,21,219,27],[212,10,220,16],[212,15,220,21],[212,21,220,27],[213,10,221,16],[213,15,221,21,"charCodeCategory"],[213,31,221,37],[213,32,221,38,"NonPrintable"],[213,44,221,50],[214,12,222,20],[215,12,223,20],[216,12,224,20,"offset"],[216,18,224,26],[216,21,224,29,"consumeBadUrlRemnants"],[216,42,224,50],[216,43,224,51,"source"],[216,49,224,57],[216,51,224,59,"offset"],[216,57,224,65],[216,58,224,66],[217,12,225,20,"type"],[217,16,225,24],[217,19,225,27,"TYPE"],[217,23,225,31],[217,24,225,32,"BadUrl"],[217,30,225,38],[218,12,226,20],[220,10,228,16],[221,10,229,16],[221,15,229,21],[221,21,229,27],[222,12,230,20],[223,12,231,20],[224,12,232,20],[224,16,232,24,"isValidEscape"],[224,29,232,37],[224,30,232,38,"code"],[224,34,232,42],[224,36,232,44,"getCharCode"],[224,47,232,55],[224,48,232,56,"offset"],[224,54,232,62],[224,57,232,65],[224,58,232,66],[224,59,232,67],[224,60,232,68],[224,62,232,70],[225,14,233,24,"offset"],[225,20,233,30],[225,23,233,33,"consumeEscaped"],[225,37,233,47],[225,38,233,48,"source"],[225,44,233,54],[225,46,233,56,"offset"],[225,52,233,62],[225,53,233,63],[225,56,233,66],[225,57,233,67],[226,14,234,24],[227,12,235,20],[229,12,237,20],[230,12,238,20],[231,12,239,20,"offset"],[231,18,239,26],[231,21,239,29,"consumeBadUrlRemnants"],[231,42,239,50],[231,43,239,51,"source"],[231,49,239,57],[231,51,239,59,"offset"],[231,57,239,65],[231,58,239,66],[232,12,240,20,"type"],[232,16,240,24],[232,19,240,27,"TYPE"],[232,23,240,31],[232,24,240,32,"BadUrl"],[232,30,240,38],[233,12,241,20],[235,10,243,16],[236,10,244,16],[237,8,245,12],[238,6,246,8],[239,4,247,4],[240,4,249,4],[240,8,249,8],[240,9,249,9,"stream"],[240,15,249,15],[240,17,249,17],[241,6,250,8,"stream"],[241,12,250,14],[241,15,250,17],[241,19,250,21,"TokenStream"],[241,30,250,32],[241,31,250,33],[241,32,250,34],[242,4,251,4],[244,4,253,4],[245,4,254,4,"source"],[245,10,254,10],[245,13,254,13,"String"],[245,19,254,19],[245,20,254,20,"source"],[245,26,254,26],[245,30,254,30],[245,32,254,32],[245,33,254,33],[246,4,256,4],[246,8,256,8,"sourceLength"],[246,20,256,20],[246,23,256,23,"source"],[246,29,256,29],[246,30,256,30,"length"],[246,36,256,36],[247,4,257,4],[247,8,257,8,"offsetAndType"],[247,21,257,21],[247,24,257,24,"adoptBuffer"],[247,35,257,35],[247,36,257,36,"stream"],[247,42,257,42],[247,43,257,43,"offsetAndType"],[247,56,257,56],[247,58,257,58,"sourceLength"],[247,70,257,70],[247,73,257,73],[247,74,257,74],[247,75,257,75],[247,76,257,76],[247,77,257,77],[248,4,258,4],[248,8,258,8,"balance"],[248,15,258,15],[248,18,258,18,"adoptBuffer"],[248,29,258,29],[248,30,258,30,"stream"],[248,36,258,36],[248,37,258,37,"balance"],[248,44,258,44],[248,46,258,46,"sourceLength"],[248,58,258,58],[248,61,258,61],[248,62,258,62],[248,63,258,63],[249,4,259,4],[249,8,259,8,"tokenCount"],[249,18,259,18],[249,21,259,21],[249,22,259,22],[250,4,260,4],[250,8,260,8,"start"],[250,13,260,13],[250,16,260,16,"isBOM"],[250,21,260,21],[250,22,260,22,"getCharCode"],[250,33,260,33],[250,34,260,34],[250,35,260,35],[250,36,260,36],[250,37,260,37],[251,4,261,4],[251,8,261,8,"offset"],[251,14,261,14],[251,17,261,17,"start"],[251,22,261,22],[252,4,262,4],[252,8,262,8,"balanceCloseType"],[252,24,262,24],[252,27,262,27],[252,28,262,28],[253,4,263,4],[253,8,263,8,"balanceStart"],[253,20,263,20],[253,23,263,23],[253,24,263,24],[254,4,264,4],[254,8,264,8,"balancePrev"],[254,19,264,19],[254,22,264,22],[254,23,264,23],[256,4,266,4],[257,4,267,4],[258,4,268,4],[258,11,268,11,"offset"],[258,17,268,17],[258,20,268,20,"sourceLength"],[258,32,268,32],[258,34,268,34],[259,6,269,8],[259,10,269,12,"code"],[259,14,269,16],[259,17,269,19,"source"],[259,23,269,25],[259,24,269,26,"charCodeAt"],[259,34,269,36],[259,35,269,37,"offset"],[259,41,269,43],[259,42,269,44],[260,6,270,8],[260,10,270,12,"type"],[260,14,270,16],[260,17,270,19],[260,18,270,20],[261,6,272,8,"balance"],[261,13,272,15],[261,14,272,16,"tokenCount"],[261,24,272,26],[261,25,272,27],[261,28,272,30,"sourceLength"],[261,40,272,42],[262,6,274,8],[262,14,274,16,"charCodeCategory"],[262,30,274,32],[262,31,274,33,"code"],[262,35,274,37],[262,36,274,38],[263,8,275,12],[264,8,276,12],[264,13,276,17,"charCodeCategory"],[264,29,276,33],[264,30,276,34,"WhiteSpace"],[264,40,276,44],[265,10,277,16],[266,10,278,16,"type"],[266,14,278,20],[266,17,278,23,"TYPE"],[266,21,278,27],[266,22,278,28,"WhiteSpace"],[266,32,278,38],[267,10,279,16,"offset"],[267,16,279,22],[267,19,279,25,"findWhiteSpaceEnd"],[267,36,279,42],[267,37,279,43,"source"],[267,43,279,49],[267,45,279,51,"offset"],[267,51,279,57],[267,54,279,60],[267,55,279,61],[267,56,279,62],[268,10,280,16],[270,8,282,12],[271,8,283,12],[271,13,283,17],[271,19,283,23],[272,10,284,16],[273,10,285,16,"consumeStringToken"],[273,28,285,34],[273,29,285,35],[273,30,285,36],[274,10,286,16],[276,8,288,12],[277,8,289,12],[277,13,289,17],[277,19,289,23],[278,10,290,16],[279,10,291,16],[279,14,291,20,"isName"],[279,20,291,26],[279,21,291,27,"getCharCode"],[279,32,291,38],[279,33,291,39,"offset"],[279,39,291,45],[279,42,291,48],[279,43,291,49],[279,44,291,50],[279,45,291,51],[279,49,291,55,"isValidEscape"],[279,62,291,68],[279,63,291,69,"getCharCode"],[279,74,291,80],[279,75,291,81,"offset"],[279,81,291,87],[279,84,291,90],[279,85,291,91],[279,86,291,92],[279,88,291,94,"getCharCode"],[279,99,291,105],[279,100,291,106,"offset"],[279,106,291,112],[279,109,291,115],[279,110,291,116],[279,111,291,117],[279,112,291,118],[279,114,291,120],[280,12,292,20],[281,12,293,20,"type"],[281,16,293,24],[281,19,293,27,"TYPE"],[281,23,293,31],[281,24,293,32,"Hash"],[281,28,293,36],[283,12,295,20],[284,12,296,20],[285,12,297,20],[286,12,298,20],[288,12,300,20],[289,12,301,20,"offset"],[289,18,301,26],[289,21,301,29,"consumeName"],[289,32,301,40],[289,33,301,41,"source"],[289,39,301,47],[289,41,301,49,"offset"],[289,47,301,55],[289,50,301,58],[289,51,301,59],[289,52,301,60],[291,12,303,20],[292,10,304,16],[292,11,304,17],[292,17,304,23],[293,12,305,20],[294,12,306,20,"type"],[294,16,306,24],[294,19,306,27,"TYPE"],[294,23,306,31],[294,24,306,32,"Delim"],[294,29,306,37],[295,12,307,20,"offset"],[295,18,307,26],[295,20,307,28],[296,10,308,16],[297,10,310,16],[299,8,312,12],[300,8,313,12],[300,13,313,17],[300,19,313,23],[301,10,314,16],[302,10,315,16,"consumeStringToken"],[302,28,315,34],[302,29,315,35],[302,30,315,36],[303,10,316,16],[305,8,318,12],[306,8,319,12],[306,13,319,17],[306,19,319,23],[307,10,320,16],[308,10,321,16,"type"],[308,14,321,20],[308,17,321,23,"TYPE"],[308,21,321,27],[308,22,321,28,"LeftParenthesis"],[308,37,321,43],[309,10,322,16,"offset"],[309,16,322,22],[309,18,322,24],[310,10,323,16],[312,8,325,12],[313,8,326,12],[313,13,326,17],[313,19,326,23],[314,10,327,16],[315,10,328,16,"type"],[315,14,328,20],[315,17,328,23,"TYPE"],[315,21,328,27],[315,22,328,28,"RightParenthesis"],[315,38,328,44],[316,10,329,16,"offset"],[316,16,329,22],[316,18,329,24],[317,10,330,16],[319,8,332,12],[320,8,333,12],[320,13,333,17],[320,19,333,23],[321,10,334,16],[322,10,335,16],[322,14,335,20,"isNumberStart"],[322,27,335,33],[322,28,335,34,"code"],[322,32,335,38],[322,34,335,40,"getCharCode"],[322,45,335,51],[322,46,335,52,"offset"],[322,52,335,58],[322,55,335,61],[322,56,335,62],[322,57,335,63],[322,59,335,65,"getCharCode"],[322,70,335,76],[322,71,335,77,"offset"],[322,77,335,83],[322,80,335,86],[322,81,335,87],[322,82,335,88],[322,83,335,89],[322,85,335,91],[323,12,336,20],[324,12,337,20,"consumeNumericToken"],[324,31,337,39],[324,32,337,40],[324,33,337,41],[325,10,338,16],[325,11,338,17],[325,17,338,23],[326,12,339,20],[327,12,340,20,"type"],[327,16,340,24],[327,19,340,27,"TYPE"],[327,23,340,31],[327,24,340,32,"Delim"],[327,29,340,37],[328,12,341,20,"offset"],[328,18,341,26],[328,20,341,28],[329,10,342,16],[330,10,343,16],[332,8,345,12],[333,8,346,12],[333,13,346,17],[333,19,346,23],[334,10,347,16],[335,10,348,16,"type"],[335,14,348,20],[335,17,348,23,"TYPE"],[335,21,348,27],[335,22,348,28,"Comma"],[335,27,348,33],[336,10,349,16,"offset"],[336,16,349,22],[336,18,349,24],[337,10,350,16],[339,8,352,12],[340,8,353,12],[340,13,353,17],[340,19,353,23],[341,10,354,16],[342,10,355,16],[342,14,355,20,"isNumberStart"],[342,27,355,33],[342,28,355,34,"code"],[342,32,355,38],[342,34,355,40,"getCharCode"],[342,45,355,51],[342,46,355,52,"offset"],[342,52,355,58],[342,55,355,61],[342,56,355,62],[342,57,355,63],[342,59,355,65,"getCharCode"],[342,70,355,76],[342,71,355,77,"offset"],[342,77,355,83],[342,80,355,86],[342,81,355,87],[342,82,355,88],[342,83,355,89],[342,85,355,91],[343,12,356,20,"consumeNumericToken"],[343,31,356,39],[343,32,356,40],[343,33,356,41],[344,10,357,16],[344,11,357,17],[344,17,357,23],[345,12,358,20],[346,12,359,20],[346,16,359,24,"getCharCode"],[346,27,359,35],[346,28,359,36,"offset"],[346,34,359,42],[346,37,359,45],[346,38,359,46],[346,39,359,47],[346,44,359,52],[346,50,359,58],[346,54,360,24,"getCharCode"],[346,65,360,35],[346,66,360,36,"offset"],[346,72,360,42],[346,75,360,45],[346,76,360,46],[346,77,360,47],[346,82,360,52],[346,88,360,58],[346,90,360,60],[347,14,361,24,"type"],[347,18,361,28],[347,21,361,31,"TYPE"],[347,25,361,35],[347,26,361,36,"CDC"],[347,29,361,39],[348,14,362,24,"offset"],[348,20,362,30],[348,23,362,33,"offset"],[348,29,362,39],[348,32,362,42],[348,33,362,43],[349,12,363,20],[349,13,363,21],[349,19,363,27],[350,14,364,24],[351,14,365,24],[351,18,365,28,"isIdentifierStart"],[351,35,365,45],[351,36,365,46,"code"],[351,40,365,50],[351,42,365,52,"getCharCode"],[351,53,365,63],[351,54,365,64,"offset"],[351,60,365,70],[351,63,365,73],[351,64,365,74],[351,65,365,75],[351,67,365,77,"getCharCode"],[351,78,365,88],[351,79,365,89,"offset"],[351,85,365,95],[351,88,365,98],[351,89,365,99],[351,90,365,100],[351,91,365,101],[351,93,365,103],[352,16,366,28],[353,16,367,28,"consumeIdentLikeToken"],[353,37,367,49],[353,38,367,50],[353,39,367,51],[354,14,368,24],[354,15,368,25],[354,21,368,31],[355,16,369,28],[356,16,370,28,"type"],[356,20,370,32],[356,23,370,35,"TYPE"],[356,27,370,39],[356,28,370,40,"Delim"],[356,33,370,45],[357,16,371,28,"offset"],[357,22,371,34],[357,24,371,36],[358,14,372,24],[359,12,373,20],[360,10,374,16],[361,10,375,16],[363,8,377,12],[364,8,378,12],[364,13,378,17],[364,19,378,23],[365,10,379,16],[366,10,380,16],[366,14,380,20,"isNumberStart"],[366,27,380,33],[366,28,380,34,"code"],[366,32,380,38],[366,34,380,40,"getCharCode"],[366,45,380,51],[366,46,380,52,"offset"],[366,52,380,58],[366,55,380,61],[366,56,380,62],[366,57,380,63],[366,59,380,65,"getCharCode"],[366,70,380,76],[366,71,380,77,"offset"],[366,77,380,83],[366,80,380,86],[366,81,380,87],[366,82,380,88],[366,83,380,89],[366,85,380,91],[367,12,381,20],[368,12,382,20,"consumeNumericToken"],[368,31,382,39],[368,32,382,40],[368,33,382,41],[369,10,383,16],[369,11,383,17],[369,17,383,23],[370,12,384,20],[371,12,385,20,"type"],[371,16,385,24],[371,19,385,27,"TYPE"],[371,23,385,31],[371,24,385,32,"Delim"],[371,29,385,37],[372,12,386,20,"offset"],[372,18,386,26],[372,20,386,28],[373,10,387,16],[374,10,389,16],[376,8,391,12],[377,8,392,12],[377,13,392,17],[377,19,392,23],[378,10,393,16],[379,10,394,16],[379,14,394,20,"getCharCode"],[379,25,394,31],[379,26,394,32,"offset"],[379,32,394,38],[379,35,394,41],[379,36,394,42],[379,37,394,43],[379,42,394,48],[379,48,394,54],[379,50,394,56],[380,12,395,20],[381,12,396,20],[382,12,397,20,"type"],[382,16,397,24],[382,19,397,27,"TYPE"],[382,23,397,31],[382,24,397,32,"Comment"],[382,31,397,39],[383,12,398,20,"offset"],[383,18,398,26],[383,21,398,29,"source"],[383,27,398,35],[383,28,398,36,"indexOf"],[383,35,398,43],[383,36,398,44],[383,40,398,48],[383,42,398,50,"offset"],[383,48,398,56],[383,51,398,59],[383,52,398,60],[383,53,398,61],[383,56,398,64],[383,57,398,65],[384,12,399,20],[384,16,399,24,"offset"],[384,22,399,30],[384,27,399,35],[384,28,399,36],[384,30,399,38],[385,14,400,24,"offset"],[385,20,400,30],[385,23,400,33,"source"],[385,29,400,39],[385,30,400,40,"length"],[385,36,400,46],[386,12,401,20],[387,10,402,16],[387,11,402,17],[387,17,402,23],[388,12,403,20,"type"],[388,16,403,24],[388,19,403,27,"TYPE"],[388,23,403,31],[388,24,403,32,"Delim"],[388,29,403,37],[389,12,404,20,"offset"],[389,18,404,26],[389,20,404,28],[390,10,405,16],[391,10,406,16],[393,8,408,12],[394,8,409,12],[394,13,409,17],[394,19,409,23],[395,10,410,16],[396,10,411,16,"type"],[396,14,411,20],[396,17,411,23,"TYPE"],[396,21,411,27],[396,22,411,28,"Colon"],[396,27,411,33],[397,10,412,16,"offset"],[397,16,412,22],[397,18,412,24],[398,10,413,16],[400,8,415,12],[401,8,416,12],[401,13,416,17],[401,19,416,23],[402,10,417,16],[403,10,418,16,"type"],[403,14,418,20],[403,17,418,23,"TYPE"],[403,21,418,27],[403,22,418,28,"Semicolon"],[403,31,418,37],[404,10,419,16,"offset"],[404,16,419,22],[404,18,419,24],[405,10,420,16],[407,8,422,12],[408,8,423,12],[408,13,423,17],[408,19,423,23],[409,10,424,16],[410,10,425,16],[410,14,425,20,"getCharCode"],[410,25,425,31],[410,26,425,32,"offset"],[410,32,425,38],[410,35,425,41],[410,36,425,42],[410,37,425,43],[410,42,425,48],[410,48,425,54],[410,52,426,20,"getCharCode"],[410,63,426,31],[410,64,426,32,"offset"],[410,70,426,38],[410,73,426,41],[410,74,426,42],[410,75,426,43],[410,80,426,48],[410,86,426,54],[410,90,427,20,"getCharCode"],[410,101,427,31],[410,102,427,32,"offset"],[410,108,427,38],[410,111,427,41],[410,112,427,42],[410,113,427,43],[410,118,427,48],[410,124,427,54],[410,126,427,56],[411,12,428,20],[412,12,429,20,"type"],[412,16,429,24],[412,19,429,27,"TYPE"],[412,23,429,31],[412,24,429,32,"CDO"],[412,27,429,35],[413,12,430,20,"offset"],[413,18,430,26],[413,21,430,29,"offset"],[413,27,430,35],[413,30,430,38],[413,31,430,39],[414,10,431,16],[414,11,431,17],[414,17,431,23],[415,12,432,20],[416,12,433,20,"type"],[416,16,433,24],[416,19,433,27,"TYPE"],[416,23,433,31],[416,24,433,32,"Delim"],[416,29,433,37],[417,12,434,20,"offset"],[417,18,434,26],[417,20,434,28],[418,10,435,16],[419,10,437,16],[421,8,439,12],[422,8,440,12],[422,13,440,17],[422,19,440,23],[423,10,441,16],[424,10,442,16],[424,14,442,20,"isIdentifierStart"],[424,31,442,37],[424,32,442,38,"getCharCode"],[424,43,442,49],[424,44,442,50,"offset"],[424,50,442,56],[424,53,442,59],[424,54,442,60],[424,55,442,61],[424,57,442,63,"getCharCode"],[424,68,442,74],[424,69,442,75,"offset"],[424,75,442,81],[424,78,442,84],[424,79,442,85],[424,80,442,86],[424,82,442,88,"getCharCode"],[424,93,442,99],[424,94,442,100,"offset"],[424,100,442,106],[424,103,442,109],[424,104,442,110],[424,105,442,111],[424,106,442,112],[424,108,442,114],[425,12,443,20],[426,12,444,20,"type"],[426,16,444,24],[426,19,444,27,"TYPE"],[426,23,444,31],[426,24,444,32,"AtKeyword"],[426,33,444,41],[427,12,445,20,"offset"],[427,18,445,26],[427,21,445,29,"consumeName"],[427,32,445,40],[427,33,445,41,"source"],[427,39,445,47],[427,41,445,49,"offset"],[427,47,445,55],[427,50,445,58],[427,51,445,59],[427,52,445,60],[428,10,446,16],[428,11,446,17],[428,17,446,23],[429,12,447,20],[430,12,448,20,"type"],[430,16,448,24],[430,19,448,27,"TYPE"],[430,23,448,31],[430,24,448,32,"Delim"],[430,29,448,37],[431,12,449,20,"offset"],[431,18,449,26],[431,20,449,28],[432,10,450,16],[433,10,452,16],[435,8,454,12],[436,8,455,12],[436,13,455,17],[436,19,455,23],[437,10,456,16],[438,10,457,16,"type"],[438,14,457,20],[438,17,457,23,"TYPE"],[438,21,457,27],[438,22,457,28,"LeftSquareBracket"],[438,39,457,45],[439,10,458,16,"offset"],[439,16,458,22],[439,18,458,24],[440,10,459,16],[442,8,461,12],[443,8,462,12],[443,13,462,17],[443,19,462,23],[444,10,463,16],[445,10,464,16],[445,14,464,20,"isValidEscape"],[445,27,464,33],[445,28,464,34,"code"],[445,32,464,38],[445,34,464,40,"getCharCode"],[445,45,464,51],[445,46,464,52,"offset"],[445,52,464,58],[445,55,464,61],[445,56,464,62],[445,57,464,63],[445,58,464,64],[445,60,464,66],[446,12,465,20],[447,12,466,20,"consumeIdentLikeToken"],[447,33,466,41],[447,34,466,42],[447,35,466,43],[448,10,467,16],[448,11,467,17],[448,17,467,23],[449,12,468,20],[450,12,469,20,"type"],[450,16,469,24],[450,19,469,27,"TYPE"],[450,23,469,31],[450,24,469,32,"Delim"],[450,29,469,37],[451,12,470,20,"offset"],[451,18,470,26],[451,20,470,28],[452,10,471,16],[453,10,472,16],[455,8,474,12],[456,8,475,12],[456,13,475,17],[456,19,475,23],[457,10,476,16],[458,10,477,16,"type"],[458,14,477,20],[458,17,477,23,"TYPE"],[458,21,477,27],[458,22,477,28,"RightSquareBracket"],[458,40,477,46],[459,10,478,16,"offset"],[459,16,478,22],[459,18,478,24],[460,10,479,16],[462,8,481,12],[463,8,482,12],[463,13,482,17],[463,19,482,23],[464,10,483,16],[465,10,484,16,"type"],[465,14,484,20],[465,17,484,23,"TYPE"],[465,21,484,27],[465,22,484,28,"LeftCurlyBracket"],[465,38,484,44],[466,10,485,16,"offset"],[466,16,485,22],[466,18,485,24],[467,10,486,16],[469,8,488,12],[470,8,489,12],[470,13,489,17],[470,19,489,23],[471,10,490,16],[472,10,491,16,"type"],[472,14,491,20],[472,17,491,23,"TYPE"],[472,21,491,27],[472,22,491,28,"RightCurlyBracket"],[472,39,491,45],[473,10,492,16,"offset"],[473,16,492,22],[473,18,492,24],[474,10,493,16],[476,8,495,12],[477,8,496,12],[477,13,496,17,"charCodeCategory"],[477,29,496,33],[477,30,496,34,"Digit"],[477,35,496,39],[478,10,497,16],[479,10,498,16,"consumeNumericToken"],[479,29,498,35],[479,30,498,36],[479,31,498,37],[480,10,499,16],[482,8,501,12],[483,8,502,12],[483,13,502,17,"charCodeCategory"],[483,29,502,33],[483,30,502,34,"NameStart"],[483,39,502,43],[484,10,503,16],[485,10,504,16,"consumeIdentLikeToken"],[485,31,504,37],[485,32,504,38],[485,33,504,39],[486,10,505,16],[488,8,507,12],[489,8,508,12],[489,13,508,17,"charCodeCategory"],[489,29,508,33],[489,30,508,34,"Eof"],[489,33,508,37],[490,10,509,16],[491,10,510,16],[493,8,512,12],[494,8,513,12],[495,10,514,16],[496,10,515,16,"type"],[496,14,515,20],[496,17,515,23,"TYPE"],[496,21,515,27],[496,22,515,28,"Delim"],[496,27,515,33],[497,10,516,16,"offset"],[497,16,516,22],[497,18,516,24],[498,6,517,8],[499,6,519,8],[499,14,519,16,"type"],[499,18,519,20],[500,8,520,12],[500,13,520,17,"balanceCloseType"],[500,29,520,33],[501,10,521,16,"balancePrev"],[501,21,521,27],[501,24,521,30,"balanceStart"],[501,36,521,42],[501,39,521,45,"OFFSET_MASK"],[501,50,521,56],[502,10,522,16,"balanceStart"],[502,22,522,28],[502,25,522,31,"balance"],[502,32,522,38],[502,33,522,39,"balancePrev"],[502,44,522,50],[502,45,522,51],[503,10,523,16,"balanceCloseType"],[503,26,523,32],[503,29,523,35,"balanceStart"],[503,41,523,47],[503,45,523,51,"TYPE_SHIFT"],[503,55,523,61],[504,10,524,16,"balance"],[504,17,524,23],[504,18,524,24,"tokenCount"],[504,28,524,34],[504,29,524,35],[504,32,524,38,"balancePrev"],[504,43,524,49],[505,10,525,16,"balance"],[505,17,525,23],[505,18,525,24,"balancePrev"],[505,29,525,35],[505,31,525,37],[505,32,525,38],[505,35,525,41,"tokenCount"],[505,45,525,51],[506,10,526,16],[506,17,526,23,"balancePrev"],[506,28,526,34],[506,31,526,37,"tokenCount"],[506,41,526,47],[506,43,526,49,"balancePrev"],[506,54,526,60],[506,56,526,62],[506,58,526,64],[507,12,527,20],[507,16,527,24,"balance"],[507,23,527,31],[507,24,527,32,"balancePrev"],[507,35,527,43],[507,36,527,44],[507,41,527,49,"sourceLength"],[507,53,527,61],[507,55,527,63],[508,14,528,24,"balance"],[508,21,528,31],[508,22,528,32,"balancePrev"],[508,33,528,43],[508,34,528,44],[508,37,528,47,"tokenCount"],[508,47,528,57],[509,12,529,20],[510,10,530,16],[511,10,531,16],[512,8,533,12],[512,13,533,17,"TYPE"],[512,17,533,21],[512,18,533,22,"LeftParenthesis"],[512,33,533,37],[513,8,534,12],[513,13,534,17,"TYPE"],[513,17,534,21],[513,18,534,22,"Function"],[513,26,534,30],[514,10,535,16,"balance"],[514,17,535,23],[514,18,535,24,"tokenCount"],[514,28,535,34],[514,29,535,35],[514,32,535,38,"balanceStart"],[514,44,535,50],[515,10,536,16,"balanceCloseType"],[515,26,536,32],[515,29,536,35,"TYPE"],[515,33,536,39],[515,34,536,40,"RightParenthesis"],[515,50,536,56],[516,10,537,16,"balanceStart"],[516,22,537,28],[516,25,537,32,"balanceCloseType"],[516,41,537,48],[516,45,537,52,"TYPE_SHIFT"],[516,55,537,62],[516,58,537,66,"tokenCount"],[516,68,537,76],[517,10,538,16],[518,8,540,12],[518,13,540,17,"TYPE"],[518,17,540,21],[518,18,540,22,"LeftSquareBracket"],[518,35,540,39],[519,10,541,16,"balance"],[519,17,541,23],[519,18,541,24,"tokenCount"],[519,28,541,34],[519,29,541,35],[519,32,541,38,"balanceStart"],[519,44,541,50],[520,10,542,16,"balanceCloseType"],[520,26,542,32],[520,29,542,35,"TYPE"],[520,33,542,39],[520,34,542,40,"RightSquareBracket"],[520,52,542,58],[521,10,543,16,"balanceStart"],[521,22,543,28],[521,25,543,32,"balanceCloseType"],[521,41,543,48],[521,45,543,52,"TYPE_SHIFT"],[521,55,543,62],[521,58,543,66,"tokenCount"],[521,68,543,76],[522,10,544,16],[523,8,546,12],[523,13,546,17,"TYPE"],[523,17,546,21],[523,18,546,22,"LeftCurlyBracket"],[523,34,546,38],[524,10,547,16,"balance"],[524,17,547,23],[524,18,547,24,"tokenCount"],[524,28,547,34],[524,29,547,35],[524,32,547,38,"balanceStart"],[524,44,547,50],[525,10,548,16,"balanceCloseType"],[525,26,548,32],[525,29,548,35,"TYPE"],[525,33,548,39],[525,34,548,40,"RightCurlyBracket"],[525,51,548,57],[526,10,549,16,"balanceStart"],[526,22,549,28],[526,25,549,32,"balanceCloseType"],[526,41,549,48],[526,45,549,52,"TYPE_SHIFT"],[526,55,549,62],[526,58,549,66,"tokenCount"],[526,68,549,76],[527,10,550,16],[528,6,551,8],[529,6,553,8,"offsetAndType"],[529,19,553,21],[529,20,553,22,"tokenCount"],[529,30,553,32],[529,32,553,34],[529,33,553,35],[529,36,553,39,"type"],[529,40,553,43],[529,44,553,47,"TYPE_SHIFT"],[529,54,553,57],[529,57,553,61,"offset"],[529,63,553,67],[530,4,554,4],[532,4,556,4],[533,4,557,4,"offsetAndType"],[533,17,557,17],[533,18,557,18,"tokenCount"],[533,28,557,28],[533,29,557,29],[533,32,557,33,"TYPE"],[533,36,557,37],[533,37,557,38,"EOF"],[533,40,557,41],[533,44,557,45,"TYPE_SHIFT"],[533,54,557,55],[533,57,557,59,"offset"],[533,63,557,65],[533,64,557,66],[533,65,557,67],[534,4,558,4,"balance"],[534,11,558,11],[534,12,558,12,"tokenCount"],[534,22,558,22],[534,23,558,23],[534,26,558,26,"sourceLength"],[534,38,558,38],[535,4,559,4,"balance"],[535,11,559,11],[535,12,559,12,"sourceLength"],[535,24,559,24],[535,25,559,25],[535,28,559,28,"sourceLength"],[535,40,559,40],[535,41,559,41],[535,42,559,42],[536,4,560,4],[536,11,560,11,"balanceStart"],[536,23,560,23],[536,28,560,28],[536,29,560,29],[536,31,560,31],[537,6,561,8,"balancePrev"],[537,17,561,19],[537,20,561,22,"balanceStart"],[537,32,561,34],[537,35,561,37,"OFFSET_MASK"],[537,46,561,48],[538,6,562,8,"balanceStart"],[538,18,562,20],[538,21,562,23,"balance"],[538,28,562,30],[538,29,562,31,"balancePrev"],[538,40,562,42],[538,41,562,43],[539,6,563,8,"balance"],[539,13,563,15],[539,14,563,16,"balancePrev"],[539,25,563,27],[539,26,563,28],[539,29,563,31,"sourceLength"],[539,41,563,43],[540,4,564,4],[542,4,566,4],[543,4,567,4,"stream"],[543,10,567,10],[543,11,567,11,"source"],[543,17,567,17],[543,20,567,20,"source"],[543,26,567,26],[544,4,568,4,"stream"],[544,10,568,10],[544,11,568,11,"firstCharOffset"],[544,26,568,26],[544,29,568,29,"start"],[544,34,568,34],[545,4,569,4,"stream"],[545,10,569,10],[545,11,569,11,"offsetAndType"],[545,24,569,24],[545,27,569,27,"offsetAndType"],[545,40,569,40],[546,4,570,4,"stream"],[546,10,570,10],[546,11,570,11,"tokenCount"],[546,21,570,21],[546,24,570,24,"tokenCount"],[546,34,570,34],[547,4,571,4,"stream"],[547,10,571,10],[547,11,571,11,"balance"],[547,18,571,18],[547,21,571,21,"balance"],[547,28,571,28],[548,4,572,4,"stream"],[548,10,572,10],[548,11,572,11,"reset"],[548,16,572,16],[548,17,572,17],[548,18,572,18],[549,4,573,4,"stream"],[549,10,573,10],[549,11,573,11,"next"],[549,15,573,15],[549,16,573,16],[549,17,573,17],[550,4,575,4],[550,11,575,11,"stream"],[550,17,575,17],[551,2,576,0],[553,2,578,0],[554,2,579,0,"Object"],[554,8,579,6],[554,9,579,7,"keys"],[554,13,579,11],[554,14,579,12,"constants"],[554,23,579,21],[554,24,579,22],[554,25,579,23,"forEach"],[554,32,579,30],[554,33,579,31],[554,43,579,40,"key"],[554,46,579,43],[554,48,579,45],[555,4,580,4,"tokenize"],[555,12,580,12],[555,13,580,13,"key"],[555,16,580,16],[555,17,580,17],[555,20,580,20,"constants"],[555,29,580,29],[555,30,580,30,"key"],[555,33,580,33],[555,34,580,34],[556,2,581,0],[556,3,581,1],[556,4,581,2],[558,2,583,0],[559,2,584,0,"Object"],[559,8,584,6],[559,9,584,7,"keys"],[559,13,584,11],[559,14,584,12,"charCodeDefinitions"],[559,33,584,31],[559,34,584,32],[559,35,584,33,"forEach"],[559,42,584,40],[559,43,584,41],[559,53,584,50,"key"],[559,56,584,53],[559,58,584,55],[560,4,585,4,"tokenize"],[560,12,585,12],[560,13,585,13,"key"],[560,16,585,16],[560,17,585,17],[560,20,585,20,"charCodeDefinitions"],[560,39,585,39],[560,40,585,40,"key"],[560,43,585,43],[560,44,585,44],[561,2,586,0],[561,3,586,1],[561,4,586,2],[562,2,587,0,"Object"],[562,8,587,6],[562,9,587,7,"keys"],[562,13,587,11],[562,14,587,12,"utils"],[562,19,587,17],[562,20,587,18],[562,21,587,19,"forEach"],[562,28,587,26],[562,29,587,27],[562,39,587,36,"key"],[562,42,587,39],[562,44,587,41],[563,4,588,4,"tokenize"],[563,12,588,12],[563,13,588,13,"key"],[563,16,588,16],[563,17,588,17],[563,20,588,20,"utils"],[563,25,588,25],[563,26,588,26,"key"],[563,29,588,29],[563,30,588,30],[564,2,589,0],[564,3,589,1],[564,4,589,2],[565,2,591,0,"module"],[565,8,591,6],[565,9,591,7,"exports"],[565,16,591,14],[565,19,591,17,"tokenize"],[565,27,591,25],[566,0,591,26],[566,3]],"functionMap":{"names":["<global>","tokenize","getCharCode","consumeNumericToken","consumeIdentLikeToken","consumeStringToken","consumeUrlToken","Object.keys.forEach$argument_0"],"mappings":"AAA;AC2B;ICC;KDE;IEG;KFwB;IGG;KHqC;IIG;KJ8D;IKO;KL6E;CDyU;+BOG;CPE;yCOG;CPE;2BOC;CPE"},"hasCjsExports":true},"type":"js/module"}]}