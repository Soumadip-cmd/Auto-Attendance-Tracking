{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"xmlReplacer\", {\n    enumerable: true,\n    get: function () {\n      return xmlReplacer;\n    }\n  });\n  Object.defineProperty(exports, \"getCodePoint\", {\n    enumerable: true,\n    get: function () {\n      return getCodePoint;\n    }\n  });\n  exports.encodeXML = encodeXML;\n  Object.defineProperty(exports, \"escape\", {\n    enumerable: true,\n    get: function () {\n      return escape;\n    }\n  });\n  Object.defineProperty(exports, \"escapeUTF8\", {\n    enumerable: true,\n    get: function () {\n      return escapeUTF8;\n    }\n  });\n  Object.defineProperty(exports, \"escapeAttribute\", {\n    enumerable: true,\n    get: function () {\n      return escapeAttribute;\n    }\n  });\n  Object.defineProperty(exports, \"escapeText\", {\n    enumerable: true,\n    get: function () {\n      return escapeText;\n    }\n  });\n  var xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\n  var xmlCodeMap = new Map([[34, \"&quot;\"], [38, \"&amp;\"], [39, \"&apos;\"], [60, \"&lt;\"], [62, \"&gt;\"]]);\n  // For compatibility with node < 4, we wrap `codePointAt`\n  var getCodePoint =\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  String.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) :\n  // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  (c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in XML\n   * documents using XML entities.\n   *\n   * If a character has no equivalent entity, a\n   * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n   */\n  function encodeXML(str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = xmlReplacer.exec(str)) !== null) {\n      var i = match.index;\n      var char = str.charCodeAt(i);\n      var next = xmlCodeMap.get(char);\n      if (next !== undefined) {\n        ret += str.substring(lastIdx, i) + next;\n        lastIdx = i + 1;\n      } else {\n        ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n        // Increase by 1 if we have a surrogate pair\n        lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n      }\n    }\n    return ret + str.substr(lastIdx);\n  }\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in XML\n   * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n   *\n   * Have a look at `escapeUTF8` if you want a more concise output at the expense\n   * of reduced transportability.\n   *\n   * @param data String to escape.\n   */\n  var escape = encodeXML;\n  /**\n   * Creates a function that escapes all characters matched by the given regular\n   * expression using the given map of characters to escape to their entities.\n   *\n   * @param regex Regular expression to match characters to escape.\n   * @param map Map of characters to escape to their entities.\n   *\n   * @returns Function that escapes all characters matched by the given regular\n   * expression using the given map of characters to escape to their entities.\n   */\n  function getEscaper(regex, map) {\n    return function escape(data) {\n      var match;\n      var lastIdx = 0;\n      var result = \"\";\n      while (match = regex.exec(data)) {\n        if (lastIdx !== match.index) {\n          result += data.substring(lastIdx, match.index);\n        }\n        // We know that this character will be in the map.\n        result += map.get(match[0].charCodeAt(0));\n        // Every match will be of length 1\n        lastIdx = match.index + 1;\n      }\n      return result + data.substring(lastIdx);\n    };\n  }\n  /**\n   * Encodes all characters not valid in XML documents using XML entities.\n   *\n   * Note that the output will be character-set dependent.\n   *\n   * @param data String to escape.\n   */\n  var escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n  /**\n   * Encodes all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   *\n   * @param data String to escape.\n   */\n  var escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([[34, \"&quot;\"], [38, \"&amp;\"], [160, \"&nbsp;\"]]));\n  /**\n   * Encodes all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   *\n   * @param data String to escape.\n   */\n  var escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([[38, \"&amp;\"], [60, \"&lt;\"], [62, \"&gt;\"], [160, \"&nbsp;\"]]));\n});","lineCount":137,"map":[[7,2,1,0,"Object"],[7,8,1,0],[7,9,1,0,"defineProperty"],[7,23,1,0],[7,24,1,0,"exports"],[7,31,1,0],[8,4,1,0,"enumerable"],[8,14,1,0],[9,4,1,0,"get"],[9,7,1,0],[9,18,1,0,"get"],[9,19,1,0],[10,6,1,0],[10,13,1,0,"xmlReplacer"],[10,24,1,0],[11,4,1,0],[12,2,1,0],[13,2,10,0,"Object"],[13,8,10,0],[13,9,10,0,"defineProperty"],[13,23,10,0],[13,24,10,0,"exports"],[13,31,10,0],[14,4,10,0,"enumerable"],[14,14,10,0],[15,4,10,0,"get"],[15,7,10,0],[15,18,10,0,"get"],[15,19,10,0],[16,6,10,0],[16,13,10,0,"getCodePoint"],[16,25,10,0],[17,4,10,0],[18,2,10,0],[19,2,28,0,"exports"],[19,9,28,0],[19,10,28,0,"encodeXML"],[19,19,28,0],[19,22,28,0,"encodeXML"],[19,31,28,0],[20,2,57,0,"Object"],[20,8,57,0],[20,9,57,0,"defineProperty"],[20,23,57,0],[20,24,57,0,"exports"],[20,31,57,0],[21,4,57,0,"enumerable"],[21,14,57,0],[22,4,57,0,"get"],[22,7,57,0],[22,18,57,0,"get"],[22,19,57,0],[23,6,57,0],[23,13,57,0,"escape"],[23,19,57,0],[24,4,57,0],[25,2,57,0],[26,2,92,0,"Object"],[26,8,92,0],[26,9,92,0,"defineProperty"],[26,23,92,0],[26,24,92,0,"exports"],[26,31,92,0],[27,4,92,0,"enumerable"],[27,14,92,0],[28,4,92,0,"get"],[28,7,92,0],[28,18,92,0,"get"],[28,19,92,0],[29,6,92,0],[29,13,92,0,"escapeUTF8"],[29,23,92,0],[30,4,92,0],[31,2,92,0],[32,2,99,0,"Object"],[32,8,99,0],[32,9,99,0,"defineProperty"],[32,23,99,0],[32,24,99,0,"exports"],[32,31,99,0],[33,4,99,0,"enumerable"],[33,14,99,0],[34,4,99,0,"get"],[34,7,99,0],[34,18,99,0,"get"],[34,19,99,0],[35,6,99,0],[35,13,99,0,"escapeAttribute"],[35,28,99,0],[36,4,99,0],[37,2,99,0],[38,2,110,0,"Object"],[38,8,110,0],[38,9,110,0,"defineProperty"],[38,23,110,0],[38,24,110,0,"exports"],[38,31,110,0],[39,4,110,0,"enumerable"],[39,14,110,0],[40,4,110,0,"get"],[40,7,110,0],[40,18,110,0,"get"],[40,19,110,0],[41,6,110,0],[41,13,110,0,"escapeText"],[41,23,110,0],[42,4,110,0],[43,2,110,0],[44,2,1,7],[44,6,1,13,"xmlReplacer"],[44,17,1,24],[44,20,1,27],[44,42,1,49],[45,2,2,0],[45,6,2,6,"xmlCodeMap"],[45,16,2,16],[45,19,2,19],[45,23,2,23,"Map"],[45,26,2,26],[45,27,2,27],[45,28,3,4],[45,29,3,5],[45,31,3,7],[45,33,3,9],[45,41,3,17],[45,42,3,18],[45,44,4,4],[45,45,4,5],[45,47,4,7],[45,49,4,9],[45,56,4,16],[45,57,4,17],[45,59,5,4],[45,60,5,5],[45,62,5,7],[45,64,5,9],[45,72,5,17],[45,73,5,18],[45,75,6,4],[45,76,6,5],[45,78,6,7],[45,80,6,9],[45,86,6,15],[45,87,6,16],[45,89,7,4],[45,90,7,5],[45,92,7,7],[45,94,7,9],[45,100,7,15],[45,101,7,16],[45,102,8,1],[45,103,8,2],[46,2,9,0],[47,2,10,7],[47,6,10,13,"getCodePoint"],[47,18,10,25],[48,2,11,0],[49,2,12,0,"String"],[49,8,12,6],[49,9,12,7,"prototype"],[49,18,12,16],[49,19,12,17,"codePointAt"],[49,30,12,28],[49,34,12,32],[49,38,12,36],[49,41,13,6],[49,42,13,7,"str"],[49,45,13,10],[49,47,13,12,"index"],[49,52,13,17],[49,57,13,22,"str"],[49,60,13,25],[49,61,13,26,"codePointAt"],[49,72,13,37],[49,73,13,38,"index"],[49,78,13,43],[49,79,13,44],[50,2,14,6],[51,2,15,8],[51,3,15,9,"c"],[51,4,15,10],[51,6,15,12,"index"],[51,11,15,17],[51,16,15,22],[51,17,15,23,"c"],[51,18,15,24],[51,19,15,25,"charCodeAt"],[51,29,15,35],[51,30,15,36,"index"],[51,35,15,41],[51,36,15,42],[51,39,15,45],[51,45,15,51],[51,51,15,57],[51,57,15,63],[51,60,16,14],[51,61,16,15,"c"],[51,62,16,16],[51,63,16,17,"charCodeAt"],[51,73,16,27],[51,74,16,28,"index"],[51,79,16,33],[51,80,16,34],[51,83,16,37],[51,89,16,43],[51,93,16,47],[51,98,16,52],[51,101,17,16,"c"],[51,102,17,17],[51,103,17,18,"charCodeAt"],[51,113,17,28],[51,114,17,29,"index"],[51,119,17,34],[51,122,17,37],[51,123,17,38],[51,124,17,39],[51,127,18,16],[51,133,18,22],[51,136,19,16],[51,143,19,23],[51,146,20,14,"c"],[51,147,20,15],[51,148,20,16,"charCodeAt"],[51,158,20,26],[51,159,20,27,"index"],[51,164,20,32],[51,165,20,33],[52,2,21,0],[53,0,22,0],[54,0,23,0],[55,0,24,0],[56,0,25,0],[57,0,26,0],[58,0,27,0],[59,2,28,7],[59,11,28,16,"encodeXML"],[59,20,28,25,"encodeXML"],[59,21,28,26,"str"],[59,24,28,29],[59,26,28,31],[60,4,29,4],[60,8,29,8,"ret"],[60,11,29,11],[60,14,29,14],[60,16,29,16],[61,4,30,4],[61,8,30,8,"lastIdx"],[61,15,30,15],[61,18,30,18],[61,19,30,19],[62,4,31,4],[62,8,31,8,"match"],[62,13,31,13],[63,4,32,4],[63,11,32,11],[63,12,32,12,"match"],[63,17,32,17],[63,20,32,20,"xmlReplacer"],[63,31,32,31],[63,32,32,32,"exec"],[63,36,32,36],[63,37,32,37,"str"],[63,40,32,40],[63,41,32,41],[63,47,32,47],[63,51,32,51],[63,53,32,53],[64,6,33,8],[64,10,33,14,"i"],[64,11,33,15],[64,14,33,18,"match"],[64,19,33,23],[64,20,33,24,"index"],[64,25,33,29],[65,6,34,8],[65,10,34,14,"char"],[65,14,34,18],[65,17,34,21,"str"],[65,20,34,24],[65,21,34,25,"charCodeAt"],[65,31,34,35],[65,32,34,36,"i"],[65,33,34,37],[65,34,34,38],[66,6,35,8],[66,10,35,14,"next"],[66,14,35,18],[66,17,35,21,"xmlCodeMap"],[66,27,35,31],[66,28,35,32,"get"],[66,31,35,35],[66,32,35,36,"char"],[66,36,35,40],[66,37,35,41],[67,6,36,8],[67,10,36,12,"next"],[67,14,36,16],[67,19,36,21,"undefined"],[67,28,36,30],[67,30,36,32],[68,8,37,12,"ret"],[68,11,37,15],[68,15,37,19,"str"],[68,18,37,22],[68,19,37,23,"substring"],[68,28,37,32],[68,29,37,33,"lastIdx"],[68,36,37,40],[68,38,37,42,"i"],[68,39,37,43],[68,40,37,44],[68,43,37,47,"next"],[68,47,37,51],[69,8,38,12,"lastIdx"],[69,15,38,19],[69,18,38,22,"i"],[69,19,38,23],[69,22,38,26],[69,23,38,27],[70,6,39,8],[70,7,39,9],[70,13,40,13],[71,8,41,12,"ret"],[71,11,41,15],[71,15,41,19],[71,18,41,22,"str"],[71,21,41,25],[71,22,41,26,"substring"],[71,31,41,35],[71,32,41,36,"lastIdx"],[71,39,41,43],[71,41,41,45,"i"],[71,42,41,46],[71,43,41,47],[71,49,41,53,"getCodePoint"],[71,61,41,65],[71,62,41,66,"str"],[71,65,41,69],[71,67,41,71,"i"],[71,68,41,72],[71,69,41,73],[71,70,41,74,"toString"],[71,78,41,82],[71,79,41,83],[71,81,41,85],[71,82,41,86],[71,85,41,89],[72,8,42,12],[73,8,43,12,"lastIdx"],[73,15,43,19],[73,18,43,22,"xmlReplacer"],[73,29,43,33],[73,30,43,34,"lastIndex"],[73,39,43,43],[73,43,43,47,"Number"],[73,49,43,53],[73,50,43,54],[73,51,43,55,"char"],[73,55,43,59],[73,58,43,62],[73,64,43,68],[73,70,43,74],[73,76,43,80],[73,77,43,81],[74,6,44,8],[75,4,45,4],[76,4,46,4],[76,11,46,11,"ret"],[76,14,46,14],[76,17,46,17,"str"],[76,20,46,20],[76,21,46,21,"substr"],[76,27,46,27],[76,28,46,28,"lastIdx"],[76,35,46,35],[76,36,46,36],[77,2,47,0],[78,2,48,0],[79,0,49,0],[80,0,50,0],[81,0,51,0],[82,0,52,0],[83,0,53,0],[84,0,54,0],[85,0,55,0],[86,0,56,0],[87,2,57,7],[87,6,57,13,"escape"],[87,12,57,19],[87,15,57,22,"encodeXML"],[87,24,57,31],[88,2,58,0],[89,0,59,0],[90,0,60,0],[91,0,61,0],[92,0,62,0],[93,0,63,0],[94,0,64,0],[95,0,65,0],[96,0,66,0],[97,0,67,0],[98,2,68,0],[98,11,68,9,"getEscaper"],[98,21,68,19,"getEscaper"],[98,22,68,20,"regex"],[98,27,68,25],[98,29,68,27,"map"],[98,32,68,30],[98,34,68,32],[99,4,69,4],[99,11,69,11],[99,20,69,20,"escape"],[99,26,69,26,"escape"],[99,27,69,27,"data"],[99,31,69,31],[99,33,69,33],[100,6,70,8],[100,10,70,12,"match"],[100,15,70,17],[101,6,71,8],[101,10,71,12,"lastIdx"],[101,17,71,19],[101,20,71,22],[101,21,71,23],[102,6,72,8],[102,10,72,12,"result"],[102,16,72,18],[102,19,72,21],[102,21,72,23],[103,6,73,8],[103,13,73,16,"match"],[103,18,73,21],[103,21,73,24,"regex"],[103,26,73,29],[103,27,73,30,"exec"],[103,31,73,34],[103,32,73,35,"data"],[103,36,73,39],[103,37,73,40],[103,39,73,43],[104,8,74,12],[104,12,74,16,"lastIdx"],[104,19,74,23],[104,24,74,28,"match"],[104,29,74,33],[104,30,74,34,"index"],[104,35,74,39],[104,37,74,41],[105,10,75,16,"result"],[105,16,75,22],[105,20,75,26,"data"],[105,24,75,30],[105,25,75,31,"substring"],[105,34,75,40],[105,35,75,41,"lastIdx"],[105,42,75,48],[105,44,75,50,"match"],[105,49,75,55],[105,50,75,56,"index"],[105,55,75,61],[105,56,75,62],[106,8,76,12],[107,8,77,12],[108,8,78,12,"result"],[108,14,78,18],[108,18,78,22,"map"],[108,21,78,25],[108,22,78,26,"get"],[108,25,78,29],[108,26,78,30,"match"],[108,31,78,35],[108,32,78,36],[108,33,78,37],[108,34,78,38],[108,35,78,39,"charCodeAt"],[108,45,78,49],[108,46,78,50],[108,47,78,51],[108,48,78,52],[108,49,78,53],[109,8,79,12],[110,8,80,12,"lastIdx"],[110,15,80,19],[110,18,80,22,"match"],[110,23,80,27],[110,24,80,28,"index"],[110,29,80,33],[110,32,80,36],[110,33,80,37],[111,6,81,8],[112,6,82,8],[112,13,82,15,"result"],[112,19,82,21],[112,22,82,24,"data"],[112,26,82,28],[112,27,82,29,"substring"],[112,36,82,38],[112,37,82,39,"lastIdx"],[112,44,82,46],[112,45,82,47],[113,4,83,4],[113,5,83,5],[114,2,84,0],[115,2,85,0],[116,0,86,0],[117,0,87,0],[118,0,88,0],[119,0,89,0],[120,0,90,0],[121,0,91,0],[122,2,92,7],[122,6,92,13,"escapeUTF8"],[122,16,92,23],[122,19,92,26,"getEscaper"],[122,29,92,36],[122,30,92,37],[122,40,92,47],[122,42,92,49,"xmlCodeMap"],[122,52,92,59],[122,53,92,60],[123,2,93,0],[124,0,94,0],[125,0,95,0],[126,0,96,0],[127,0,97,0],[128,0,98,0],[129,2,99,7],[129,6,99,13,"escapeAttribute"],[129,21,99,28],[129,24,99,31,"getEscaper"],[129,34,99,41],[129,35,99,42],[129,48,99,55],[129,50,99,57],[129,54,99,61,"Map"],[129,57,99,64],[129,58,99,65],[129,59,100,4],[129,60,100,5],[129,62,100,7],[129,64,100,9],[129,72,100,17],[129,73,100,18],[129,75,101,4],[129,76,101,5],[129,78,101,7],[129,80,101,9],[129,87,101,16],[129,88,101,17],[129,90,102,4],[129,91,102,5],[129,94,102,8],[129,96,102,10],[129,104,102,18],[129,105,102,19],[129,106,103,1],[129,107,103,2],[129,108,103,3],[130,2,104,0],[131,0,105,0],[132,0,106,0],[133,0,107,0],[134,0,108,0],[135,0,109,0],[136,2,110,7],[136,6,110,13,"escapeText"],[136,16,110,23],[136,19,110,26,"getEscaper"],[136,29,110,36],[136,30,110,37],[136,44,110,51],[136,46,110,53],[136,50,110,57,"Map"],[136,53,110,60],[136,54,110,61],[136,55,111,4],[136,56,111,5],[136,58,111,7],[136,60,111,9],[136,67,111,16],[136,68,111,17],[136,70,112,4],[136,71,112,5],[136,73,112,7],[136,75,112,9],[136,81,112,15],[136,82,112,16],[136,84,113,4],[136,85,113,5],[136,87,113,7],[136,89,113,9],[136,95,113,15],[136,96,113,16],[136,98,114,4],[136,99,114,5],[136,102,114,8],[136,104,114,10],[136,112,114,18],[136,113,114,19],[136,114,115,1],[136,115,115,2],[136,116,115,3],[137,0,115,4],[137,3]],"functionMap":{"names":["<global>","<anonymous>","encodeXML","getEscaper","escape"],"mappings":"AAA;MCY,sCD;QCE;iCDK;OEQ;CFmB;AGqB;WCC;KDc;CHC"},"hasCjsExports":false},"type":"js/module"}]}