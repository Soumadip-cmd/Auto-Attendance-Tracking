{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.parse = parse;\n  // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n  // Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\n  var whitespace = new Set([9, 10, 12, 13, 32]);\n  var ZERO = \"0\".charCodeAt(0);\n  var NINE = \"9\".charCodeAt(0);\n  /**\n   * Parses an expression.\n   *\n   * @throws An `Error` if parsing fails.\n   * @returns An array containing the integer step size and the integer offset of the nth rule.\n   * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n   */\n  function parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n      return [2, 0];\n    } else if (formula === \"odd\") {\n      return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n      idx++;\n      a = sign * (number !== null && number !== void 0 ? number : 1);\n      skipWhitespace();\n      if (idx < formula.length) {\n        sign = readSign();\n        skipWhitespace();\n        number = readNumber();\n      } else {\n        sign = number = 0;\n      }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n      throw new Error(`n-th rule couldn't be parsed ('${formula}')`);\n    }\n    return [a, sign * number];\n    function readSign() {\n      if (formula.charAt(idx) === \"-\") {\n        idx++;\n        return -1;\n      }\n      if (formula.charAt(idx) === \"+\") {\n        idx++;\n      }\n      return 1;\n    }\n    function readNumber() {\n      var start = idx;\n      var value = 0;\n      while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n        value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n        idx++;\n      }\n      // Return `null` if we didn't read anything.\n      return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n      while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n        idx++;\n      }\n    }\n  }\n});","lineCount":75,"map":[[7,2,13,0,"exports"],[7,9,13,0],[7,10,13,0,"parse"],[7,15,13,0],[7,18,13,0,"parse"],[7,23,13,0],[8,2,1,0],[9,2,2,0],[10,2,3,0],[10,6,3,6,"whitespace"],[10,16,3,16],[10,19,3,19],[10,23,3,23,"Set"],[10,26,3,26],[10,27,3,27],[10,28,3,28],[10,29,3,29],[10,31,3,31],[10,33,3,33],[10,35,3,35],[10,37,3,37],[10,39,3,39],[10,41,3,41],[10,43,3,43],[10,45,3,45],[10,46,3,46],[10,47,3,47],[11,2,4,0],[11,6,4,6,"ZERO"],[11,10,4,10],[11,13,4,13],[11,16,4,16],[11,17,4,17,"charCodeAt"],[11,27,4,27],[11,28,4,28],[11,29,4,29],[11,30,4,30],[12,2,5,0],[12,6,5,6,"NINE"],[12,10,5,10],[12,13,5,13],[12,16,5,16],[12,17,5,17,"charCodeAt"],[12,27,5,27],[12,28,5,28],[12,29,5,29],[12,30,5,30],[13,2,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,2,13,7],[20,11,13,16,"parse"],[20,16,13,21,"parse"],[20,17,13,22,"formula"],[20,24,13,29],[20,26,13,31],[21,4,14,4,"formula"],[21,11,14,11],[21,14,14,14,"formula"],[21,21,14,21],[21,22,14,22,"trim"],[21,26,14,26],[21,27,14,27],[21,28,14,28],[21,29,14,29,"toLowerCase"],[21,40,14,40],[21,41,14,41],[21,42,14,42],[22,4,15,4],[22,8,15,8,"formula"],[22,15,15,15],[22,20,15,20],[22,26,15,26],[22,28,15,28],[23,6,16,8],[23,13,16,15],[23,14,16,16],[23,15,16,17],[23,17,16,19],[23,18,16,20],[23,19,16,21],[24,4,17,4],[24,5,17,5],[24,11,18,9],[24,15,18,13,"formula"],[24,22,18,20],[24,27,18,25],[24,32,18,30],[24,34,18,32],[25,6,19,8],[25,13,19,15],[25,14,19,16],[25,15,19,17],[25,17,19,19],[25,18,19,20],[25,19,19,21],[26,4,20,4],[27,4,21,4],[28,4,22,4],[28,8,22,8,"idx"],[28,11,22,11],[28,14,22,14],[28,15,22,15],[29,4,23,4],[29,8,23,8,"a"],[29,9,23,9],[29,12,23,12],[29,13,23,13],[30,4,24,4],[30,8,24,8,"sign"],[30,12,24,12],[30,15,24,15,"readSign"],[30,23,24,23],[30,24,24,24],[30,25,24,25],[31,4,25,4],[31,8,25,8,"number"],[31,14,25,14],[31,17,25,17,"readNumber"],[31,27,25,27],[31,28,25,28],[31,29,25,29],[32,4,26,4],[32,8,26,8,"idx"],[32,11,26,11],[32,14,26,14,"formula"],[32,21,26,21],[32,22,26,22,"length"],[32,28,26,28],[32,32,26,32,"formula"],[32,39,26,39],[32,40,26,40,"charAt"],[32,46,26,46],[32,47,26,47,"idx"],[32,50,26,50],[32,51,26,51],[32,56,26,56],[32,59,26,59],[32,61,26,61],[33,6,27,8,"idx"],[33,9,27,11],[33,11,27,13],[34,6,28,8,"a"],[34,7,28,9],[34,10,28,12,"sign"],[34,14,28,16],[34,18,28,20,"number"],[34,24,28,26],[34,29,28,31],[34,33,28,35],[34,37,28,39,"number"],[34,43,28,45],[34,48,28,50],[34,53,28,55],[34,54,28,56],[34,57,28,59,"number"],[34,63,28,65],[34,66,28,68],[34,67,28,69],[34,68,28,70],[35,6,29,8,"skipWhitespace"],[35,20,29,22],[35,21,29,23],[35,22,29,24],[36,6,30,8],[36,10,30,12,"idx"],[36,13,30,15],[36,16,30,18,"formula"],[36,23,30,25],[36,24,30,26,"length"],[36,30,30,32],[36,32,30,34],[37,8,31,12,"sign"],[37,12,31,16],[37,15,31,19,"readSign"],[37,23,31,27],[37,24,31,28],[37,25,31,29],[38,8,32,12,"skipWhitespace"],[38,22,32,26],[38,23,32,27],[38,24,32,28],[39,8,33,12,"number"],[39,14,33,18],[39,17,33,21,"readNumber"],[39,27,33,31],[39,28,33,32],[39,29,33,33],[40,6,34,8],[40,7,34,9],[40,13,35,13],[41,8,36,12,"sign"],[41,12,36,16],[41,15,36,19,"number"],[41,21,36,25],[41,24,36,28],[41,25,36,29],[42,6,37,8],[43,4,38,4],[44,4,39,4],[45,4,40,4],[45,8,40,8,"number"],[45,14,40,14],[45,19,40,19],[45,23,40,23],[45,27,40,27,"idx"],[45,30,40,30],[45,33,40,33,"formula"],[45,40,40,40],[45,41,40,41,"length"],[45,47,40,47],[45,49,40,49],[46,6,41,8],[46,12,41,14],[46,16,41,18,"Error"],[46,21,41,23],[46,22,41,24],[46,56,41,58,"formula"],[46,63,41,65],[46,67,41,69],[46,68,41,70],[47,4,42,4],[48,4,43,4],[48,11,43,11],[48,12,43,12,"a"],[48,13,43,13],[48,15,43,15,"sign"],[48,19,43,19],[48,22,43,22,"number"],[48,28,43,28],[48,29,43,29],[49,4,44,4],[49,13,44,13,"readSign"],[49,21,44,21,"readSign"],[49,22,44,21],[49,24,44,24],[50,6,45,8],[50,10,45,12,"formula"],[50,17,45,19],[50,18,45,20,"charAt"],[50,24,45,26],[50,25,45,27,"idx"],[50,28,45,30],[50,29,45,31],[50,34,45,36],[50,37,45,39],[50,39,45,41],[51,8,46,12,"idx"],[51,11,46,15],[51,13,46,17],[52,8,47,12],[52,15,47,19],[52,16,47,20],[52,17,47,21],[53,6,48,8],[54,6,49,8],[54,10,49,12,"formula"],[54,17,49,19],[54,18,49,20,"charAt"],[54,24,49,26],[54,25,49,27,"idx"],[54,28,49,30],[54,29,49,31],[54,34,49,36],[54,37,49,39],[54,39,49,41],[55,8,50,12,"idx"],[55,11,50,15],[55,13,50,17],[56,6,51,8],[57,6,52,8],[57,13,52,15],[57,14,52,16],[58,4,53,4],[59,4,54,4],[59,13,54,13,"readNumber"],[59,23,54,23,"readNumber"],[59,24,54,23],[59,26,54,26],[60,6,55,8],[60,10,55,14,"start"],[60,15,55,19],[60,18,55,22,"idx"],[60,21,55,25],[61,6,56,8],[61,10,56,12,"value"],[61,15,56,17],[61,18,56,20],[61,19,56,21],[62,6,57,8],[62,13,57,15,"idx"],[62,16,57,18],[62,19,57,21,"formula"],[62,26,57,28],[62,27,57,29,"length"],[62,33,57,35],[62,37,58,12,"formula"],[62,44,58,19],[62,45,58,20,"charCodeAt"],[62,55,58,30],[62,56,58,31,"idx"],[62,59,58,34],[62,60,58,35],[62,64,58,39,"ZERO"],[62,68,58,43],[62,72,59,12,"formula"],[62,79,59,19],[62,80,59,20,"charCodeAt"],[62,90,59,30],[62,91,59,31,"idx"],[62,94,59,34],[62,95,59,35],[62,99,59,39,"NINE"],[62,103,59,43],[62,105,59,45],[63,8,60,12,"value"],[63,13,60,17],[63,16,60,20,"value"],[63,21,60,25],[63,24,60,28],[63,26,60,30],[63,30,60,34,"formula"],[63,37,60,41],[63,38,60,42,"charCodeAt"],[63,48,60,52],[63,49,60,53,"idx"],[63,52,60,56],[63,53,60,57],[63,56,60,60,"ZERO"],[63,60,60,64],[63,61,60,65],[64,8,61,12,"idx"],[64,11,61,15],[64,13,61,17],[65,6,62,8],[66,6,63,8],[67,6,64,8],[67,13,64,15,"idx"],[67,16,64,18],[67,21,64,23,"start"],[67,26,64,28],[67,29,64,31],[67,33,64,35],[67,36,64,38,"value"],[67,41,64,43],[68,4,65,4],[69,4,66,4],[69,13,66,13,"skipWhitespace"],[69,27,66,27,"skipWhitespace"],[69,28,66,27],[69,30,66,30],[70,6,67,8],[70,13,67,15,"idx"],[70,16,67,18],[70,19,67,21,"formula"],[70,26,67,28],[70,27,67,29,"length"],[70,33,67,35],[70,37,68,12,"whitespace"],[70,47,68,22],[70,48,68,23,"has"],[70,51,68,26],[70,52,68,27,"formula"],[70,59,68,34],[70,60,68,35,"charCodeAt"],[70,70,68,45],[70,71,68,46,"idx"],[70,74,68,49],[70,75,68,50],[70,76,68,51],[70,78,68,53],[71,8,69,12,"idx"],[71,11,69,15],[71,13,69,17],[72,6,70,8],[73,4,71,4],[74,2,72,0],[75,0,72,1],[75,3]],"functionMap":{"names":["<global>","parse","readSign","readNumber","skipWhitespace"],"mappings":"AAA;OCY;IC+B;KDS;IEC;KFW;IGC;KHK;CDC"},"hasCjsExports":false},"type":"js/module"}]}